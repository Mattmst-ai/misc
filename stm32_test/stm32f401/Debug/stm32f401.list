
stm32f401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800921c  0800921c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800921c  0800921c  0001921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009224  08009224  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009224  08009224  00019224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009228  08009228  00019228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800922c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f0  200001e4  08009410  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013d4  08009410  000213d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a386  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b63  00000000  00000000  0003a59a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e8  00000000  00000000  0003e100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001110  00000000  00000000  0003f3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b1da  00000000  00000000  000404f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000128ec  00000000  00000000  0005b6d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000935d0  00000000  00000000  0006dfbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010158e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000540c  00000000  00000000  0010160c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080090f0 	.word	0x080090f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080090f0 	.word	0x080090f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	463b      	mov	r3, r7
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000592:	4b29      	ldr	r3, [pc, #164]	; (8000638 <MX_ADC1_Init+0xb8>)
 8000594:	4a29      	ldr	r2, [pc, #164]	; (800063c <MX_ADC1_Init+0xbc>)
 8000596:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <MX_ADC1_Init+0xb8>)
 800059a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800059e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b2:	4b21      	ldr	r3, [pc, #132]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005d0:	2202      	movs	r2, #2
 80005d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e2:	4815      	ldr	r0, [pc, #84]	; (8000638 <MX_ADC1_Init+0xb8>)
 80005e4:	f000 fd26 	bl	8001034 <HAL_ADC_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80005ee:	f000 fa57 	bl	8000aa0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	4619      	mov	r1, r3
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <MX_ADC1_Init+0xb8>)
 8000604:	f000 fe38 	bl	8001278 <HAL_ADC_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800060e:	f000 fa47 	bl	8000aa0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000612:	2301      	movs	r3, #1
 8000614:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <MX_ADC1_Init+0xb8>)
 8000620:	f000 fe2a 	bl	8001278 <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800062a:	f000 fa39 	bl	8000aa0 <Error_Handler>
  }

}
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000023c 	.word	0x2000023c
 800063c:	40012000 	.word	0x40012000

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a33      	ldr	r2, [pc, #204]	; (800072c <HAL_ADC_MspInit+0xec>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d160      	bne.n	8000724 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <HAL_ADC_MspInit+0xf0>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	4a31      	ldr	r2, [pc, #196]	; (8000730 <HAL_ADC_MspInit+0xf0>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000670:	6453      	str	r3, [r2, #68]	; 0x44
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <HAL_ADC_MspInit+0xf0>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <HAL_ADC_MspInit+0xf0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <HAL_ADC_MspInit+0xf0>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <HAL_ADC_MspInit+0xf0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800069a:	2303      	movs	r3, #3
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4821      	ldr	r0, [pc, #132]	; (8000734 <HAL_ADC_MspInit+0xf4>)
 80006ae:	f001 fd03 	bl	80020b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <HAL_ADC_MspInit+0xfc>)
 80006b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 8000704:	2200      	movs	r2, #0
 8000706:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 800070a:	f001 f967 	bl	80019dc <HAL_DMA_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000714:	f000 f9c4 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38
 800071e:	4a06      	ldr	r2, [pc, #24]	; (8000738 <HAL_ADC_MspInit+0xf8>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40012000 	.word	0x40012000
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000
 8000738:	20000284 	.word	0x20000284
 800073c:	40026410 	.word	0x40026410

08000740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_DMA_Init+0x3c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0b      	ldr	r2, [pc, #44]	; (800077c <MX_DMA_Init+0x3c>)
 8000750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_DMA_Init+0x3c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2038      	movs	r0, #56	; 0x38
 8000768:	f001 f901 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800076c:	2038      	movs	r0, #56	; 0x38
 800076e:	f001 f91a 	bl	80019a6 <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_GPIO_Init+0xc4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a29      	ldr	r2, [pc, #164]	; (8000844 <MX_GPIO_Init+0xc4>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b27      	ldr	r3, [pc, #156]	; (8000844 <MX_GPIO_Init+0xc4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0xc4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <MX_GPIO_Init+0xc4>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_GPIO_Init+0xc4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_GPIO_Init+0xc4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <MX_GPIO_Init+0xc4>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_GPIO_Init+0xc4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f0:	4815      	ldr	r0, [pc, #84]	; (8000848 <MX_GPIO_Init+0xc8>)
 80007f2:	f001 fde3 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2138      	movs	r1, #56	; 0x38
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <MX_GPIO_Init+0xcc>)
 80007fc:	f001 fdde 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4619      	mov	r1, r3
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <MX_GPIO_Init+0xc8>)
 800081a:	f001 fc4d 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800081e:	2338      	movs	r3, #56	; 0x38
 8000820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_GPIO_Init+0xcc>)
 8000836:	f001 fc3f 	bl	80020b8 <HAL_GPIO_Init>

}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020800 	.word	0x40020800
 800084c:	40020000 	.word	0x40020000

08000850 <HAL_ADC_ConvCpltCallback>:
static int counter2 = 0;

static uint16_t val1;
static uint16_t val2;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	LED1_GPIO_Port->BSRR = LED1_Pin;
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_ADC_ConvCpltCallback+0x38>)
 800085a:	2208      	movs	r2, #8
 800085c:	619a      	str	r2, [r3, #24]

	UNUSED(hadc);
	counter1++;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	4a09      	ldr	r2, [pc, #36]	; (800088c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000866:	6013      	str	r3, [r2, #0]
	val1 = dma_buffer[0];
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_ADC_ConvCpltCallback+0x40>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	b29a      	uxth	r2, r3
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_ADC_ConvCpltCallback+0x44>)
 8000870:	801a      	strh	r2, [r3, #0]
	/* NOTE : This function should not be modified. When the callback is needed,
	 function HAL_ADC_ConvCpltCallback must be implemented in the user file.
	 */
	LED1_GPIO_Port->BSRR = (uint32_t) LED1_Pin << 16u;
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_ADC_ConvCpltCallback+0x38>)
 8000874:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000878:	619a      	str	r2, [r3, #24]

}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40020000 	.word	0x40020000
 800088c:	20000220 	.word	0x20000220
 8000890:	20000200 	.word	0x20000200
 8000894:	20000228 	.word	0x20000228

08000898 <HAL_ADC_ConvHalfCpltCallback>:
/**
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	LED2_GPIO_Port->BSRR = LED2_Pin;
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80008a2:	2210      	movs	r2, #16
 80008a4:	619a      	str	r2, [r3, #24]

	counter2++;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3301      	adds	r3, #1
 80008ac:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80008ae:	6013      	str	r3, [r2, #0]
	UNUSED(hadc);
	val2 = dma_buffer[kNumDma/2];
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_ADC_ConvHalfCpltCallback+0x44>)
 80008b8:	801a      	strh	r2, [r3, #0]

	LED2_GPIO_Port->BSRR = (uint32_t) LED2_Pin << 16u;
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80008bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008c0:	619a      	str	r2, [r3, #24]


	/* NOTE : This function should not be modified. When the callback is needed,
	 function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
	 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40020000 	.word	0x40020000
 80008d4:	20000224 	.word	0x20000224
 80008d8:	20000200 	.word	0x20000200
 80008dc:	2000022a 	.word	0x2000022a

080008e0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
	// TODO: process returned value.
	CDC_Transmit_FS((uint8_t*) ptr, (uint16_t) len);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	4619      	mov	r1, r3
 80008f2:	68b8      	ldr	r0, [r7, #8]
 80008f4:	f007 f89e 	bl	8007a34 <CDC_Transmit_FS>
	return len;
 80008f8:	687b      	ldr	r3, [r7, #4]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090a:	f000 faff 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090e:	f000 f85b 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000912:	f7ff ff35 	bl	8000780 <MX_GPIO_Init>
  MX_DMA_Init();
 8000916:	f7ff ff13 	bl	8000740 <MX_DMA_Init>
  MX_ADC1_Init();
 800091a:	f7ff fe31 	bl	8000580 <MX_ADC1_Init>
  MX_TIM1_Init();
 800091e:	f000 f9cf 	bl	8000cc0 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000922:	f006 ffc9 	bl	80078b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //HAL_ADC_Start(&hadc2);
  	//HAL_ADCEx_MultiModeStart_DMA(&hadc1, &(dma_buffer[0]), 32);
  	HAL_ADC_Start_DMA(&hadc1, &(dma_buffer[0]), kNumDma);
 8000926:	2208      	movs	r2, #8
 8000928:	491f      	ldr	r1, [pc, #124]	; (80009a8 <main+0xa4>)
 800092a:	4820      	ldr	r0, [pc, #128]	; (80009ac <main+0xa8>)
 800092c:	f000 fbc6 	bl	80010bc <HAL_ADC_Start_DMA>

  	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000930:	2100      	movs	r1, #0
 8000932:	481f      	ldr	r0, [pc, #124]	; (80009b0 <main+0xac>)
 8000934:	f003 fb52 	bl	8003fdc <HAL_TIM_PWM_Start>

  int loops = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	HAL_Delay(300);
 800093c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000940:	f000 fb56 	bl	8000ff0 <HAL_Delay>

  	printf("\n%d, %d, %d\n", loops++, counter1, counter2);
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	1c4b      	adds	r3, r1, #1
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <main+0xb0>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <main+0xb4>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	481a      	ldr	r0, [pc, #104]	; (80009bc <main+0xb8>)
 8000954:	f007 fd90 	bl	8008478 <iprintf>
  	HAL_Delay(100);
 8000958:	2064      	movs	r0, #100	; 0x64
 800095a:	f000 fb49 	bl	8000ff0 <HAL_Delay>

  	for (int i = 0; i < kNumDma; i++) {
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	e00e      	b.n	8000982 <main+0x7e>
  		printf("%d  %08lx\n", i,  dma_buffer[i]);
 8000964:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <main+0xa4>)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096c:	461a      	mov	r2, r3
 800096e:	6839      	ldr	r1, [r7, #0]
 8000970:	4813      	ldr	r0, [pc, #76]	; (80009c0 <main+0xbc>)
 8000972:	f007 fd81 	bl	8008478 <iprintf>
    	HAL_Delay(100);
 8000976:	2064      	movs	r0, #100	; 0x64
 8000978:	f000 fb3a 	bl	8000ff0 <HAL_Delay>
  	for (int i = 0; i < kNumDma; i++) {
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b07      	cmp	r3, #7
 8000986:	dded      	ble.n	8000964 <main+0x60>
  	}
  	HAL_Delay(50);
 8000988:	2032      	movs	r0, #50	; 0x32
 800098a:	f000 fb31 	bl	8000ff0 <HAL_Delay>
  		LED0_GPIO_Port->BSRR = LED0_Pin;
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <main+0xc0>)
 8000990:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000994:	619a      	str	r2, [r3, #24]
    	HAL_Delay(1000);
 8000996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099a:	f000 fb29 	bl	8000ff0 <HAL_Delay>
  		LED0_GPIO_Port->BSRR = (uint32_t) LED0_Pin << 16u;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <main+0xc0>)
 80009a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80009a4:	619a      	str	r2, [r3, #24]
  	HAL_Delay(300);
 80009a6:	e7c9      	b.n	800093c <main+0x38>
 80009a8:	20000200 	.word	0x20000200
 80009ac:	2000023c 	.word	0x2000023c
 80009b0:	200002e4 	.word	0x200002e4
 80009b4:	20000220 	.word	0x20000220
 80009b8:	20000224 	.word	0x20000224
 80009bc:	08009108 	.word	0x08009108
 80009c0:	08009118 	.word	0x08009118
 80009c4:	40020800 	.word	0x40020800

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	; 0x50
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	2230      	movs	r2, #48	; 0x30
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f007 fc9e 	bl	8008318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <SystemClock_Config+0xd0>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <SystemClock_Config+0xd0>)
 80009f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <SystemClock_Config+0xd0>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <SystemClock_Config+0xd4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a14:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <SystemClock_Config+0xd4>)
 8000a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <SystemClock_Config+0xd4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a3c:	2319      	movs	r3, #25
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a40:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a46:	2304      	movs	r3, #4
 8000a48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fe4e 	bl	80036f4 <HAL_RCC_OscConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a5e:	f000 f81f 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	230f      	movs	r3, #15
 8000a64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a66:	2302      	movs	r3, #2
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 f8a8 	bl	8003bd4 <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a8a:	f000 f809 	bl	8000aa0 <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	; 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 fa2c 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <DMA2_Stream0_IRQHandler+0x10>)
 8000b62:	f001 f841 	bl	8001be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000284 	.word	0x20000284

08000b70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <OTG_FS_IRQHandler+0x10>)
 8000b76:	f001 fd8a 	bl	800268e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000fc8 	.word	0x20000fc8

08000b84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e00a      	b.n	8000bac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b96:	f3af 8000 	nop.w
 8000b9a:	4601      	mov	r1, r0
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	b2ca      	uxtb	r2, r1
 8000ba4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf0      	blt.n	8000b96 <_read+0x12>
	}

return len;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be6:	605a      	str	r2, [r3, #4]
	return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_isatty>:

int _isatty(int file)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f007 fb24 	bl	80082a4 <__errno>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	230c      	movs	r3, #12
 8000c60:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20010000 	.word	0x20010000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	2000022c 	.word	0x2000022c
 8000c90:	200013d8 	.word	0x200013d8

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <SystemInit+0x28>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <SystemInit+0x28>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SystemInit+0x28>)
 8000caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cae:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b096      	sub	sp, #88	; 0x58
 8000cc4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2220      	movs	r2, #32
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f007 fb0d 	bl	8008318 <memset>

  htim1.Instance = TIM1;
 8000cfe:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000d00:	4a3e      	ldr	r2, [pc, #248]	; (8000dfc <MX_TIM1_Init+0x13c>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d04:	4b3c      	ldr	r3, [pc, #240]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 840-1;
 8000d10:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000d12:	f240 3247 	movw	r2, #839	; 0x347
 8000d16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d1e:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d2a:	4833      	ldr	r0, [pc, #204]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000d2c:	f003 f8f6 	bl	8003f1c <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d36:	f7ff feb3 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d44:	4619      	mov	r1, r3
 8000d46:	482c      	ldr	r0, [pc, #176]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000d48:	f003 fa40 	bl	80041cc <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d52:	f7ff fea5 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d56:	4828      	ldr	r0, [pc, #160]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000d58:	f003 f90b 	bl	8003f72 <HAL_TIM_PWM_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d62:	f7ff fe9d 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8000d66:	2330      	movs	r3, #48	; 0x30
 8000d68:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d72:	4619      	mov	r1, r3
 8000d74:	4820      	ldr	r0, [pc, #128]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000d76:	f003 fdad 	bl	80048d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d80:	f7ff fe8e 	bl	8000aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d84:	2360      	movs	r3, #96	; 0x60
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 84-1;
 8000d88:	2353      	movs	r3, #83	; 0x53
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d90:	2300      	movs	r3, #0
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	2200      	movs	r2, #0
 8000da6:	4619      	mov	r1, r3
 8000da8:	4813      	ldr	r0, [pc, #76]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000daa:	f003 f949 	bl	8004040 <HAL_TIM_PWM_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000db4:	f7ff fe74 	bl	8000aa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000ddc:	f003 fde8 	bl	80049b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000de6:	f7ff fe5b 	bl	8000aa0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <MX_TIM1_Init+0x138>)
 8000dec:	f000 f82a 	bl	8000e44 <HAL_TIM_MspPostInit>

}
 8000df0:	bf00      	nop
 8000df2:	3758      	adds	r7, #88	; 0x58
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200002e4 	.word	0x200002e4
 8000dfc:	40010000 	.word	0x40010000

08000e00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <HAL_TIM_Base_MspInit+0x3c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d10d      	bne.n	8000e2e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_TIM_Base_MspInit+0x40>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <HAL_TIM_Base_MspInit+0x40>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6453      	str	r3, [r2, #68]	; 0x44
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <HAL_TIM_Base_MspInit+0x40>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40010000 	.word	0x40010000
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a12      	ldr	r2, [pc, #72]	; (8000eac <HAL_TIM_MspPostInit+0x68>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d11e      	bne.n	8000ea4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_TIM_MspPostInit+0x6c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <HAL_TIM_MspPostInit+0x6c>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_TIM_MspPostInit+0x6c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_TIM_MspPostInit+0x70>)
 8000ea0:	f001 f90a 	bl	80020b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ebc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ebe:	e003      	b.n	8000ec8 <LoopCopyDataInit>

08000ec0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ec2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ec4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ec6:	3104      	adds	r1, #4

08000ec8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ecc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ece:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ed0:	d3f6      	bcc.n	8000ec0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ed4:	e002      	b.n	8000edc <LoopFillZerobss>

08000ed6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ed6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ed8:	f842 3b04 	str.w	r3, [r2], #4

08000edc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ee0:	d3f9      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ee2:	f7ff fed7 	bl	8000c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f007 f9e3 	bl	80082b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fd0b 	bl	8000904 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000ef4:	0800922c 	.word	0x0800922c
  ldr  r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000efc:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000f00:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000f04:	200013d4 	.word	0x200013d4

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 fd0f 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fdb6 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fd27 	bl	80019c2 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 fcef 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000324 	.word	0x20000324

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000324 	.word	0x20000324

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff ffee 	bl	8000fd8 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_Delay+0x40>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffde 	bl	8000fd8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008

08001034 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e033      	b.n	80010b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	2b00      	cmp	r3, #0
 8001050:	d109      	bne.n	8001066 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff faf4 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	2b00      	cmp	r3, #0
 8001070:	d118      	bne.n	80010a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800107a:	f023 0302 	bic.w	r3, r3, #2
 800107e:	f043 0202 	orr.w	r2, r3, #2
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fa18 	bl	80014bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f023 0303 	bic.w	r3, r3, #3
 800109a:	f043 0201 	orr.w	r2, r3, #1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
 80010a2:	e001      	b.n	80010a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d101      	bne.n	80010da <HAL_ADC_Start_DMA+0x1e>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e0b1      	b.n	800123e <HAL_ADC_Start_DMA+0x182>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d018      	beq.n	8001122 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0201 	orr.w	r2, r2, #1
 80010fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001100:	4b51      	ldr	r3, [pc, #324]	; (8001248 <HAL_ADC_Start_DMA+0x18c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a51      	ldr	r2, [pc, #324]	; (800124c <HAL_ADC_Start_DMA+0x190>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	0c9a      	lsrs	r2, r3, #18
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001114:	e002      	b.n	800111c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	3b01      	subs	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f9      	bne.n	8001116 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	f040 8085 	bne.w	800123c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800115c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001170:	d106      	bne.n	8001180 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f023 0206 	bic.w	r2, r3, #6
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
 800117e:	e002      	b.n	8001186 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_ADC_Start_DMA+0x194>)
 8001190:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001196:	4a2f      	ldr	r2, [pc, #188]	; (8001254 <HAL_ADC_Start_DMA+0x198>)
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119e:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <HAL_ADC_Start_DMA+0x19c>)
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <HAL_ADC_Start_DMA+0x1a0>)
 80011a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	334c      	adds	r3, #76	; 0x4c
 80011de:	4619      	mov	r1, r3
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f000 fca8 	bl	8001b38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10f      	bne.n	8001214 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d11c      	bne.n	800123c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	e013      	b.n	800123c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a11      	ldr	r2, [pc, #68]	; (8001260 <HAL_ADC_Start_DMA+0x1a4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10e      	bne.n	800123c <HAL_ADC_Start_DMA+0x180>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d107      	bne.n	800123c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800123a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000000 	.word	0x20000000
 800124c:	431bde83 	.word	0x431bde83
 8001250:	40012300 	.word	0x40012300
 8001254:	080016b5 	.word	0x080016b5
 8001258:	0800176f 	.word	0x0800176f
 800125c:	0800178b 	.word	0x0800178b
 8001260:	40012000 	.word	0x40012000

08001264 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x1c>
 8001290:	2302      	movs	r3, #2
 8001292:	e105      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x228>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	d925      	bls.n	80012f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68d9      	ldr	r1, [r3, #12]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	4613      	mov	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	3b1e      	subs	r3, #30
 80012ba:	2207      	movs	r2, #7
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43da      	mvns	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	400a      	ands	r2, r1
 80012c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68d9      	ldr	r1, [r3, #12]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	4603      	mov	r3, r0
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4403      	add	r3, r0
 80012e2:	3b1e      	subs	r3, #30
 80012e4:	409a      	lsls	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	e022      	b.n	8001336 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6919      	ldr	r1, [r3, #16]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	2207      	movs	r2, #7
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	400a      	ands	r2, r1
 8001312:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6919      	ldr	r1, [r3, #16]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	4603      	mov	r3, r0
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4403      	add	r3, r0
 800132c:	409a      	lsls	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b06      	cmp	r3, #6
 800133c:	d824      	bhi.n	8001388 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	3b05      	subs	r3, #5
 8001350:	221f      	movs	r2, #31
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	400a      	ands	r2, r1
 800135e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	3b05      	subs	r3, #5
 800137a:	fa00 f203 	lsl.w	r2, r0, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
 8001386:	e04c      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b0c      	cmp	r3, #12
 800138e:	d824      	bhi.n	80013da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	3b23      	subs	r3, #35	; 0x23
 80013a2:	221f      	movs	r2, #31
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43da      	mvns	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	400a      	ands	r2, r1
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	3b23      	subs	r3, #35	; 0x23
 80013cc:	fa00 f203 	lsl.w	r2, r0, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
 80013d8:	e023      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	3b41      	subs	r3, #65	; 0x41
 80013ec:	221f      	movs	r2, #31
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	400a      	ands	r2, r1
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	4618      	mov	r0, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	3b41      	subs	r3, #65	; 0x41
 8001416:	fa00 f203 	lsl.w	r2, r0, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_ADC_ConfigChannel+0x234>)
 8001424:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <HAL_ADC_ConfigChannel+0x238>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d109      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1cc>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b12      	cmp	r3, #18
 8001436:	d105      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_ADC_ConfigChannel+0x238>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d123      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x21e>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b10      	cmp	r3, #16
 8001454:	d003      	beq.n	800145e <HAL_ADC_ConfigChannel+0x1e6>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b11      	cmp	r3, #17
 800145c:	d11b      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b10      	cmp	r3, #16
 8001470:	d111      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_ADC_ConfigChannel+0x23c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <HAL_ADC_ConfigChannel+0x240>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	0c9a      	lsrs	r2, r3, #18
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001488:	e002      	b.n	8001490 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	3b01      	subs	r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f9      	bne.n	800148a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40012300 	.word	0x40012300
 80014b0:	40012000 	.word	0x40012000
 80014b4:	20000000 	.word	0x20000000
 80014b8:	431bde83 	.word	0x431bde83

080014bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c4:	4b79      	ldr	r3, [pc, #484]	; (80016ac <ADC_Init+0x1f0>)
 80014c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	431a      	orrs	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	021a      	lsls	r2, r3, #8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6899      	ldr	r1, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <ADC_Init+0x1f4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d022      	beq.n	800159a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001562:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6899      	ldr	r1, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6899      	ldr	r1, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	e00f      	b.n	80015ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0202 	bic.w	r2, r2, #2
 80015c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6899      	ldr	r1, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7e1b      	ldrb	r3, [r3, #24]
 80015d4:	005a      	lsls	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01b      	beq.n	8001620 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001606:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6859      	ldr	r1, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	3b01      	subs	r3, #1
 8001614:	035a      	lsls	r2, r3, #13
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	e007      	b.n	8001630 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800162e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	3b01      	subs	r3, #1
 800164c:	051a      	lsls	r2, r3, #20
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6899      	ldr	r1, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001672:	025a      	lsls	r2, r3, #9
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800168a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6899      	ldr	r1, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	029a      	lsls	r2, r3, #10
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	609a      	str	r2, [r3, #8]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40012300 	.word	0x40012300
 80016b0:	0f000001 	.word	0x0f000001

080016b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d13c      	bne.n	8001748 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d12b      	bne.n	8001740 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d127      	bne.n	8001740 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001708:	2b00      	cmp	r3, #0
 800170a:	d119      	bne.n	8001740 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0220 	bic.w	r2, r2, #32
 800171a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f043 0201 	orr.w	r2, r3, #1
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff f885 	bl	8000850 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001746:	e00e      	b.n	8001766 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f7ff fd85 	bl	8001264 <HAL_ADC_ErrorCallback>
}
 800175a:	e004      	b.n	8001766 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f7ff f88b 	bl	8000898 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001796:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f043 0204 	orr.w	r2, r3, #4
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f7ff fd5a 	bl	8001264 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff3e 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff8e 	bl	80018ac <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff5d 	bl	8001858 <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff31 	bl	800181c <__NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa2 	bl	8001914 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff faf6 	bl	8000fd8 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e099      	b.n	8001b2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a18:	e00f      	b.n	8001a3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a1a:	f7ff fadd 	bl	8000fd8 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d908      	bls.n	8001a3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2203      	movs	r2, #3
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e078      	b.n	8001b2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1e8      	bne.n	8001a1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_DMA_Init+0x158>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d107      	bne.n	8001aa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f023 0307 	bic.w	r3, r3, #7
 8001aba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d117      	bne.n	8001afe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00e      	beq.n	8001afe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fa6f 	bl	8001fc4 <DMA_CheckFifoParam>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001afa:	2301      	movs	r3, #1
 8001afc:	e016      	b.n	8001b2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fa26 	bl	8001f58 <DMA_CalcBaseAndBitshift>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	223f      	movs	r2, #63	; 0x3f
 8001b16:	409a      	lsls	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	f010803f 	.word	0xf010803f

08001b38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_DMA_Start_IT+0x26>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e040      	b.n	8001be0 <HAL_DMA_Start_IT+0xa8>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d12f      	bne.n	8001bd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f9b8 	bl	8001efc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	223f      	movs	r2, #63	; 0x3f
 8001b92:	409a      	lsls	r2, r3
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0216 	orr.w	r2, r2, #22
 8001ba6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0208 	orr.w	r2, r2, #8
 8001bbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e005      	b.n	8001bde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bf4:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <HAL_DMA_IRQHandler+0x258>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a92      	ldr	r2, [pc, #584]	; (8001e44 <HAL_DMA_IRQHandler+0x25c>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0a9b      	lsrs	r3, r3, #10
 8001c00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c12:	2208      	movs	r2, #8
 8001c14:	409a      	lsls	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01a      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0204 	bic.w	r2, r2, #4
 8001c3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c40:	2208      	movs	r2, #8
 8001c42:	409a      	lsls	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	f043 0201 	orr.w	r2, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	2201      	movs	r2, #1
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d012      	beq.n	8001c8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c76:	2201      	movs	r2, #1
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c82:	f043 0202 	orr.w	r2, r3, #2
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8e:	2204      	movs	r2, #4
 8001c90:	409a      	lsls	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d012      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00b      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	2204      	movs	r2, #4
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb8:	f043 0204 	orr.w	r2, r3, #4
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d043      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d03c      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d018      	beq.n	8001d2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d108      	bne.n	8001d18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d024      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
 8001d16:	e01f      	b.n	8001d58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01b      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4798      	blx	r3
 8001d28:	e016      	b.n	8001d58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d107      	bne.n	8001d48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0208 	bic.w	r2, r2, #8
 8001d46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 808e 	beq.w	8001e86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 8086 	beq.w	8001e86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2220      	movs	r2, #32
 8001d80:	409a      	lsls	r2, r3
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d136      	bne.n	8001e00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0216 	bic.w	r2, r2, #22
 8001da0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d103      	bne.n	8001dc2 <HAL_DMA_IRQHandler+0x1da>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0208 	bic.w	r2, r2, #8
 8001dd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	223f      	movs	r2, #63	; 0x3f
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d07d      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	4798      	blx	r3
        }
        return;
 8001dfe:	e078      	b.n	8001ef2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01c      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d108      	bne.n	8001e2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d030      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	e02b      	b.n	8001e86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d027      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	4798      	blx	r3
 8001e3e:	e022      	b.n	8001e86 <HAL_DMA_IRQHandler+0x29e>
 8001e40:	20000000 	.word	0x20000000
 8001e44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10f      	bne.n	8001e76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0210 	bic.w	r2, r2, #16
 8001e64:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d032      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d022      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2205      	movs	r2, #5
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d307      	bcc.n	8001ece <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f2      	bne.n	8001eb2 <HAL_DMA_IRQHandler+0x2ca>
 8001ecc:	e000      	b.n	8001ed0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ece:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
 8001ef0:	e000      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ef2:	bf00      	nop
    }
  }
}
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop

08001efc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b40      	cmp	r3, #64	; 0x40
 8001f28:	d108      	bne.n	8001f3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f3a:	e007      	b.n	8001f4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	3b10      	subs	r3, #16
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <DMA_CalcBaseAndBitshift+0x64>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f72:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <DMA_CalcBaseAndBitshift+0x68>)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d909      	bls.n	8001f9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	1d1a      	adds	r2, r3, #4
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	659a      	str	r2, [r3, #88]	; 0x58
 8001f98:	e007      	b.n	8001faa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	aaaaaaab 	.word	0xaaaaaaab
 8001fc0:	0800917c 	.word	0x0800917c

08001fc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d11f      	bne.n	800201e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d855      	bhi.n	8002090 <DMA_CheckFifoParam+0xcc>
 8001fe4:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <DMA_CheckFifoParam+0x28>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	08001ffd 	.word	0x08001ffd
 8001ff0:	0800200f 	.word	0x0800200f
 8001ff4:	08001ffd 	.word	0x08001ffd
 8001ff8:	08002091 	.word	0x08002091
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d045      	beq.n	8002094 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800200c:	e042      	b.n	8002094 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002016:	d13f      	bne.n	8002098 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800201c:	e03c      	b.n	8002098 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002026:	d121      	bne.n	800206c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d836      	bhi.n	800209c <DMA_CheckFifoParam+0xd8>
 800202e:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <DMA_CheckFifoParam+0x70>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	08002045 	.word	0x08002045
 8002038:	0800204b 	.word	0x0800204b
 800203c:	08002045 	.word	0x08002045
 8002040:	0800205d 	.word	0x0800205d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
      break;
 8002048:	e02f      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d024      	beq.n	80020a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800205a:	e021      	b.n	80020a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002064:	d11e      	bne.n	80020a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800206a:	e01b      	b.n	80020a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d902      	bls.n	8002078 <DMA_CheckFifoParam+0xb4>
 8002072:	2b03      	cmp	r3, #3
 8002074:	d003      	beq.n	800207e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002076:	e018      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      break;
 800207c:	e015      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00e      	beq.n	80020a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
      break;
 800208e:	e00b      	b.n	80020a8 <DMA_CheckFifoParam+0xe4>
      break;
 8002090:	bf00      	nop
 8002092:	e00a      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;
 8002094:	bf00      	nop
 8002096:	e008      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;
 8002098:	bf00      	nop
 800209a:	e006      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;
 800209c:	bf00      	nop
 800209e:	e004      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;
 80020a0:	bf00      	nop
 80020a2:	e002      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;   
 80020a4:	bf00      	nop
 80020a6:	e000      	b.n	80020aa <DMA_CheckFifoParam+0xe6>
      break;
 80020a8:	bf00      	nop
    }
  } 
  
  return status; 
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	e159      	b.n	8002388 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	f040 8148 	bne.w	8002382 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d00b      	beq.n	8002112 <HAL_GPIO_Init+0x5a>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d007      	beq.n	8002112 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002106:	2b11      	cmp	r3, #17
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b12      	cmp	r3, #18
 8002110:	d130      	bne.n	8002174 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	2203      	movs	r2, #3
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 0201 	and.w	r2, r3, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0xfc>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b12      	cmp	r3, #18
 80021b2:	d123      	bne.n	80021fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	08da      	lsrs	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3208      	adds	r2, #8
 80021bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	08da      	lsrs	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3208      	adds	r2, #8
 80021f6:	69b9      	ldr	r1, [r7, #24]
 80021f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0203 	and.w	r2, r3, #3
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a2 	beq.w	8002382 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b56      	ldr	r3, [pc, #344]	; (800239c <HAL_GPIO_Init+0x2e4>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4a55      	ldr	r2, [pc, #340]	; (800239c <HAL_GPIO_Init+0x2e4>)
 8002248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224c:	6453      	str	r3, [r2, #68]	; 0x44
 800224e:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_GPIO_Init+0x2e4>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225a:	4a51      	ldr	r2, [pc, #324]	; (80023a0 <HAL_GPIO_Init+0x2e8>)
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a48      	ldr	r2, [pc, #288]	; (80023a4 <HAL_GPIO_Init+0x2ec>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d019      	beq.n	80022ba <HAL_GPIO_Init+0x202>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a47      	ldr	r2, [pc, #284]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0x1fe>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a46      	ldr	r2, [pc, #280]	; (80023ac <HAL_GPIO_Init+0x2f4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_GPIO_Init+0x1fa>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a45      	ldr	r2, [pc, #276]	; (80023b0 <HAL_GPIO_Init+0x2f8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <HAL_GPIO_Init+0x1f6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a44      	ldr	r2, [pc, #272]	; (80023b4 <HAL_GPIO_Init+0x2fc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_GPIO_Init+0x1f2>
 80022a6:	2304      	movs	r3, #4
 80022a8:	e008      	b.n	80022bc <HAL_GPIO_Init+0x204>
 80022aa:	2307      	movs	r3, #7
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x204>
 80022ae:	2303      	movs	r3, #3
 80022b0:	e004      	b.n	80022bc <HAL_GPIO_Init+0x204>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e002      	b.n	80022bc <HAL_GPIO_Init+0x204>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_GPIO_Init+0x204>
 80022ba:	2300      	movs	r3, #0
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	f002 0203 	and.w	r2, r2, #3
 80022c2:	0092      	lsls	r2, r2, #2
 80022c4:	4093      	lsls	r3, r2
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022cc:	4934      	ldr	r1, [pc, #208]	; (80023a0 <HAL_GPIO_Init+0x2e8>)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3302      	adds	r3, #2
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022da:	4b37      	ldr	r3, [pc, #220]	; (80023b8 <HAL_GPIO_Init+0x300>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022fe:	4a2e      	ldr	r2, [pc, #184]	; (80023b8 <HAL_GPIO_Init+0x300>)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002304:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <HAL_GPIO_Init+0x300>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002328:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <HAL_GPIO_Init+0x300>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <HAL_GPIO_Init+0x300>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002352:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <HAL_GPIO_Init+0x300>)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <HAL_GPIO_Init+0x300>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800237c:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_GPIO_Init+0x300>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3301      	adds	r3, #1
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b0f      	cmp	r3, #15
 800238c:	f67f aea2 	bls.w	80020d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002390:	bf00      	nop
 8002392:	3724      	adds	r7, #36	; 0x24
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	40023800 	.word	0x40023800
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020c00 	.word	0x40020c00
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40013c00 	.word	0x40013c00

080023bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d8:	e003      	b.n	80023e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	041a      	lsls	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	619a      	str	r2, [r3, #24]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f0:	b08f      	sub	sp, #60	; 0x3c
 80023f2:	af0a      	add	r7, sp, #40	; 0x28
 80023f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e10f      	b.n	8002620 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f005 fc50 	bl	8007cc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2203      	movs	r2, #3
 8002424:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f002 fc1d 	bl	8004c7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	687e      	ldr	r6, [r7, #4]
 800244c:	466d      	mov	r5, sp
 800244e:	f106 0410 	add.w	r4, r6, #16
 8002452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800245a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800245e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002462:	1d33      	adds	r3, r6, #4
 8002464:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002466:	6838      	ldr	r0, [r7, #0]
 8002468:	f002 faf4 	bl	8004a54 <USB_CoreInit>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0d0      	b.n	8002620 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f002 fc0b 	bl	8004ca0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e04a      	b.n	8002526 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	333d      	adds	r3, #61	; 0x3d
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	333c      	adds	r3, #60	; 0x3c
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	b298      	uxth	r0, r3
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3342      	adds	r3, #66	; 0x42
 80024cc:	4602      	mov	r2, r0
 80024ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	333f      	adds	r3, #63	; 0x3f
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	3344      	adds	r3, #68	; 0x44
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	3348      	adds	r3, #72	; 0x48
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	3350      	adds	r3, #80	; 0x50
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	3301      	adds	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	d3af      	bcc.n	8002490 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e044      	b.n	80025c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	3301      	adds	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d3b5      	bcc.n	8002536 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	687e      	ldr	r6, [r7, #4]
 80025d2:	466d      	mov	r5, sp
 80025d4:	f106 0410 	add.w	r4, r6, #16
 80025d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80025e8:	1d33      	adds	r3, r6, #4
 80025ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ec:	6838      	ldr	r0, [r7, #0]
 80025ee:	f002 fb81 	bl	8004cf4 <USB_DevInit>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e00d      	b.n	8002620 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fbc9 	bl	8005db0 <USB_DevDisconnect>

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002628 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_PCD_Start+0x1c>
 8002640:	2302      	movs	r3, #2
 8002642:	e020      	b.n	8002686 <HAL_PCD_Start+0x5e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	2b01      	cmp	r3, #1
 8002652:	d109      	bne.n	8002668 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002658:	2b01      	cmp	r3, #1
 800265a:	d005      	beq.n	8002668 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f002 faf5 	bl	8004c5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fb79 	bl	8005d6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800268e:	b590      	push	{r4, r7, lr}
 8002690:	b08d      	sub	sp, #52	; 0x34
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 fc37 	bl	8005f18 <USB_GetMode>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f040 839d 	bne.w	8002dec <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fb9b 	bl	8005df2 <USB_ReadInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8393 	beq.w	8002dea <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 fb92 	bl	8005df2 <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d107      	bne.n	80026e8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f002 0202 	and.w	r2, r2, #2
 80026e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f003 fb80 	bl	8005df2 <USB_ReadInterrupts>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d161      	bne.n	80027c0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0210 	bic.w	r2, r2, #16
 800270a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f003 020f 	and.w	r2, r3, #15
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	3304      	adds	r3, #4
 800272a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	0c5b      	lsrs	r3, r3, #17
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	2b02      	cmp	r3, #2
 8002736:	d124      	bne.n	8002782 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d035      	beq.n	80027b0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800274e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	6a38      	ldr	r0, [r7, #32]
 8002758:	f003 f9e6 	bl	8005b28 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002768:	441a      	add	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800277a:	441a      	add	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	619a      	str	r2, [r3, #24]
 8002780:	e016      	b.n	80027b0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	0c5b      	lsrs	r3, r3, #17
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	2b06      	cmp	r3, #6
 800278c:	d110      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002794:	2208      	movs	r2, #8
 8002796:	4619      	mov	r1, r3
 8002798:	6a38      	ldr	r0, [r7, #32]
 800279a:	f003 f9c5 	bl	8005b28 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027aa:	441a      	add	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0210 	orr.w	r2, r2, #16
 80027be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 fb14 	bl	8005df2 <USB_ReadInterrupts>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027d4:	d16e      	bne.n	80028b4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 fb1a 	bl	8005e18 <USB_ReadDevAllOutEpInterrupt>
 80027e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80027e6:	e062      	b.n	80028ae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d057      	beq.n	80028a2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fb3f 	bl	8005e80 <USB_ReadDevOutEPInterrupt>
 8002802:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4413      	add	r3, r2
 8002816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800281a:	461a      	mov	r2, r3
 800281c:	2301      	movs	r3, #1
 800281e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fdb0 	bl	8003388 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00c      	beq.n	800284c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283e:	461a      	mov	r2, r3
 8002840:	2308      	movs	r3, #8
 8002842:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 feaa 	bl	80035a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002862:	461a      	mov	r2, r3
 8002864:	2310      	movs	r3, #16
 8002866:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4413      	add	r3, r2
 800287a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287e:	461a      	mov	r2, r3
 8002880:	2320      	movs	r3, #32
 8002882:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289a:	461a      	mov	r2, r3
 800289c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	3301      	adds	r3, #1
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d199      	bne.n	80027e8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f003 fa9a 	bl	8005df2 <USB_ReadInterrupts>
 80028be:	4603      	mov	r3, r0
 80028c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028c8:	f040 80c0 	bne.w	8002a4c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fabb 	bl	8005e4c <USB_ReadDevAllInEpInterrupt>
 80028d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028dc:	e0b2      	b.n	8002a44 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a7 	beq.w	8002a38 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 fae1 	bl	8005ebc <USB_ReadDevInEPInterrupt>
 80028fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d057      	beq.n	80029b6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	2201      	movs	r2, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800291a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	43db      	mvns	r3, r3
 8002920:	69f9      	ldr	r1, [r7, #28]
 8002922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002926:	4013      	ands	r3, r2
 8002928:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	4413      	add	r3, r2
 8002932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002936:	461a      	mov	r2, r3
 8002938:	2301      	movs	r3, #1
 800293a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d132      	bne.n	80029aa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3348      	adds	r3, #72	; 0x48
 8002954:	6819      	ldr	r1, [r3, #0]
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4403      	add	r3, r0
 8002964:	3344      	adds	r3, #68	; 0x44
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4419      	add	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4403      	add	r3, r0
 8002978:	3348      	adds	r3, #72	; 0x48
 800297a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	d113      	bne.n	80029aa <HAL_PCD_IRQHandler+0x31c>
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3350      	adds	r3, #80	; 0x50
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d108      	bne.n	80029aa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029a2:	461a      	mov	r2, r3
 80029a4:	2101      	movs	r1, #1
 80029a6:	f003 fae9 	bl	8005f7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f005 fa06 	bl	8007dc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029cc:	461a      	mov	r2, r3
 80029ce:	2308      	movs	r3, #8
 80029d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e8:	461a      	mov	r2, r3
 80029ea:	2310      	movs	r3, #16
 80029ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a04:	461a      	mov	r2, r3
 8002a06:	2340      	movs	r3, #64	; 0x40
 8002a08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a20:	461a      	mov	r2, r3
 8002a22:	2302      	movs	r3, #2
 8002a24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fc1b 	bl	800326e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	085b      	lsrs	r3, r3, #1
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f47f af49 	bne.w	80028de <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f003 f9ce 	bl	8005df2 <USB_ReadInterrupts>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a60:	d122      	bne.n	8002aa8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d108      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a88:	2100      	movs	r1, #0
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fe26 	bl	80036dc <HAL_PCDEx_LPM_Callback>
 8002a90:	e002      	b.n	8002a98 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f005 fa02 	bl	8007e9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 f9a0 	bl	8005df2 <USB_ReadInterrupts>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002abc:	d112      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d102      	bne.n	8002ad4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f005 f9be 	bl	8007e50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ae2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 f982 	bl	8005df2 <USB_ReadInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af8:	f040 80c7 	bne.w	8002c8a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2110      	movs	r1, #16
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 fa50 	bl	8004fbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b20:	e056      	b.n	8002bd0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b46:	0151      	lsls	r1, r2, #5
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	440a      	add	r2, r1
 8002b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b54:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b66:	0151      	lsls	r1, r2, #5
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	440a      	add	r2, r1
 8002b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b82:	461a      	mov	r2, r3
 8002b84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b88:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9a:	0151      	lsls	r1, r2, #5
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	440a      	add	r2, r1
 8002ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ba4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ba8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bba:	0151      	lsls	r1, r2, #5
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	440a      	add	r2, r1
 8002bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bc8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bcc:	3301      	adds	r3, #1
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d3a3      	bcc.n	8002b22 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002be8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c06:	f043 030b 	orr.w	r3, r3, #11
 8002c0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c1c:	f043 030b 	orr.w	r3, r3, #11
 8002c20:	6453      	str	r3, [r2, #68]	; 0x44
 8002c22:	e015      	b.n	8002c50 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c36:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c4a:	f043 030b 	orr.w	r3, r3, #11
 8002c4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c74:	461a      	mov	r2, r3
 8002c76:	f003 f981 	bl	8005f7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 f8af 	bl	8005df2 <USB_ReadInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9e:	d124      	bne.n	8002cea <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f003 f945 	bl	8005f34 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f002 f9e5 	bl	800507e <USB_GetDevSpeed>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681c      	ldr	r4, [r3, #0]
 8002cc0:	f001 f920 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8002cc4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f001 ff22 	bl	8004b18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f005 f89c 	bl	8007e12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 f87f 	bl	8005df2 <USB_ReadInterrupts>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d10a      	bne.n	8002d14 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f005 f879 	bl	8007df6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f002 0208 	and.w	r2, r2, #8
 8002d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 f86a 	bl	8005df2 <USB_ReadInterrupts>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d28:	d10f      	bne.n	8002d4a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	4619      	mov	r1, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f005 f8d1 	bl	8007edc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 f84f 	bl	8005df2 <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d5e:	d10f      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f005 f8a4 	bl	8007eb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f003 f834 	bl	8005df2 <USB_ReadInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d94:	d10a      	bne.n	8002dac <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f005 f8b2 	bl	8007f00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 f81e 	bl	8005df2 <USB_ReadInterrupts>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d115      	bne.n	8002dec <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f005 f8a2 	bl	8007f1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	e000      	b.n	8002dec <HAL_PCD_IRQHandler+0x75e>
      return;
 8002dea:	bf00      	nop
    }
  }
}
 8002dec:	3734      	adds	r7, #52	; 0x34
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd90      	pop	{r4, r7, pc}

08002df2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_PCD_SetAddress+0x1a>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e013      	b.n	8002e34 <HAL_PCD_SetAddress+0x42>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f002 ff7c 	bl	8005d22 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	70fb      	strb	r3, [r7, #3]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	803b      	strh	r3, [r7, #0]
 8002e52:	4613      	mov	r3, r2
 8002e54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	da0f      	bge.n	8002e82 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	f003 020f 	and.w	r2, r3, #15
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	3338      	adds	r3, #56	; 0x38
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	3304      	adds	r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	705a      	strb	r2, [r3, #1]
 8002e80:	e00f      	b.n	8002ea2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	f003 020f 	and.w	r2, r3, #15
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	4413      	add	r3, r2
 8002e98:	3304      	adds	r3, #4
 8002e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eae:	883a      	ldrh	r2, [r7, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	78ba      	ldrb	r2, [r7, #2]
 8002eb8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d004      	beq.n	8002ecc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ecc:	78bb      	ldrb	r3, [r7, #2]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d102      	bne.n	8002ed8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_PCD_EP_Open+0xaa>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e00e      	b.n	8002f04 <HAL_PCD_EP_Open+0xc8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68f9      	ldr	r1, [r7, #12]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 f8e7 	bl	80050c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f02:	7afb      	ldrb	r3, [r7, #11]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	da0f      	bge.n	8002f40 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	f003 020f 	and.w	r2, r3, #15
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	3338      	adds	r3, #56	; 0x38
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	3304      	adds	r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	705a      	strb	r2, [r3, #1]
 8002f3e:	e00f      	b.n	8002f60 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 020f 	and.w	r2, r3, #15
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	3304      	adds	r3, #4
 8002f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_PCD_EP_Close+0x6e>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e00e      	b.n	8002f98 <HAL_PCD_EP_Close+0x8c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f002 f925 	bl	80051d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	460b      	mov	r3, r1
 8002fae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb0:	7afb      	ldrb	r3, [r7, #11]
 8002fb2:	f003 020f 	and.w	r2, r3, #15
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe2:	7afb      	ldrb	r3, [r7, #11]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d102      	bne.n	8002ffc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ffc:	7afb      	ldrb	r3, [r7, #11]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	6979      	ldr	r1, [r7, #20]
 8003014:	f002 fc00 	bl	8005818 <USB_EP0StartXfer>
 8003018:	e008      	b.n	800302c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	6979      	ldr	r1, [r7, #20]
 8003028:	f002 f9b2 	bl	8005390 <USB_EPStartXfer>
  }

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	f003 020f 	and.w	r2, r3, #15
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003058:	681b      	ldr	r3, [r3, #0]
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	460b      	mov	r3, r1
 8003074:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003076:	7afb      	ldrb	r3, [r7, #11]
 8003078:	f003 020f 	and.w	r2, r3, #15
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	3338      	adds	r3, #56	; 0x38
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4413      	add	r3, r2
 800308a:	3304      	adds	r3, #4
 800308c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2201      	movs	r2, #1
 80030a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a6:	7afb      	ldrb	r3, [r7, #11]
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d102      	bne.n	80030c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030c0:	7afb      	ldrb	r3, [r7, #11]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	6979      	ldr	r1, [r7, #20]
 80030d8:	f002 fb9e 	bl	8005818 <USB_EP0StartXfer>
 80030dc:	e008      	b.n	80030f0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	6979      	ldr	r1, [r7, #20]
 80030ec:	f002 f950 	bl	8005390 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	460b      	mov	r3, r1
 8003104:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 020f 	and.w	r2, r3, #15
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d901      	bls.n	8003118 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e050      	b.n	80031ba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800311c:	2b00      	cmp	r3, #0
 800311e:	da0f      	bge.n	8003140 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	f003 020f 	and.w	r2, r3, #15
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	3338      	adds	r3, #56	; 0x38
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	3304      	adds	r3, #4
 8003136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	705a      	strb	r2, [r3, #1]
 800313e:	e00d      	b.n	800315c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	3304      	adds	r3, #4
 8003154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_PCD_EP_SetStall+0x82>
 8003178:	2302      	movs	r3, #2
 800317a:	e01e      	b.n	80031ba <HAL_PCD_EP_SetStall+0xc0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68f9      	ldr	r1, [r7, #12]
 800318a:	4618      	mov	r0, r3
 800318c:	f002 fcf5 	bl	8005b7a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	b2d9      	uxtb	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031aa:	461a      	mov	r2, r3
 80031ac:	f002 fee6 	bl	8005f7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	460b      	mov	r3, r1
 80031cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 020f 	and.w	r2, r3, #15
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d901      	bls.n	80031e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e042      	b.n	8003266 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	da0f      	bge.n	8003208 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 020f 	and.w	r2, r3, #15
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	3338      	adds	r3, #56	; 0x38
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	3304      	adds	r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	705a      	strb	r2, [r3, #1]
 8003206:	e00f      	b.n	8003228 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 020f 	and.w	r2, r3, #15
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	3304      	adds	r3, #4
 8003220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	b2da      	uxtb	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_PCD_EP_ClrStall+0x86>
 8003244:	2302      	movs	r3, #2
 8003246:	e00e      	b.n	8003266 <HAL_PCD_EP_ClrStall+0xa4>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68f9      	ldr	r1, [r7, #12]
 8003256:	4618      	mov	r0, r3
 8003258:	f002 fcfd 	bl	8005c56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b08a      	sub	sp, #40	; 0x28
 8003272:	af02      	add	r7, sp, #8
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	3338      	adds	r3, #56	; 0x38
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	3304      	adds	r3, #4
 8003294:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d901      	bls.n	80032a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06c      	b.n	8003380 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d902      	bls.n	80032c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3303      	adds	r3, #3
 80032c6:	089b      	lsrs	r3, r3, #2
 80032c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032ca:	e02b      	b.n	8003324 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	695a      	ldr	r2, [r3, #20]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d902      	bls.n	80032e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	3303      	adds	r3, #3
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68d9      	ldr	r1, [r3, #12]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003300:	b2db      	uxtb	r3, r3
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	4603      	mov	r3, r0
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f002 fbd9 	bl	8005abe <USB_WritePacket>

    ep->xfer_buff  += len;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	441a      	add	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	441a      	add	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	b29b      	uxth	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	429a      	cmp	r2, r3
 8003338:	d809      	bhi.n	800334e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003342:	429a      	cmp	r2, r3
 8003344:	d203      	bcs.n	800334e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1be      	bne.n	80032cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	429a      	cmp	r2, r3
 8003358:	d811      	bhi.n	800337e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	2201      	movs	r2, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	43db      	mvns	r3, r3
 8003374:	6939      	ldr	r1, [r7, #16]
 8003376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800337a:	4013      	ands	r3, r2
 800337c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3720      	adds	r7, #32
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	333c      	adds	r3, #60	; 0x3c
 80033a0:	3304      	adds	r3, #4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	f040 80a0 	bne.w	8003500 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d015      	beq.n	80033f6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a72      	ldr	r2, [pc, #456]	; (8003598 <PCD_EP_OutXfrComplete_int+0x210>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	f240 80dd 	bls.w	800358e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80d7 	beq.w	800358e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ec:	461a      	mov	r2, r3
 80033ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f2:	6093      	str	r3, [r2, #8]
 80033f4:	e0cb      	b.n	800358e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d009      	beq.n	8003414 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340c:	461a      	mov	r2, r3
 800340e:	2320      	movs	r3, #32
 8003410:	6093      	str	r3, [r2, #8]
 8003412:	e0bc      	b.n	800358e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 80b7 	bne.w	800358e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a5d      	ldr	r2, [pc, #372]	; (8003598 <PCD_EP_OutXfrComplete_int+0x210>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d90f      	bls.n	8003448 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343e:	461a      	mov	r2, r3
 8003440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003444:	6093      	str	r3, [r2, #8]
 8003446:	e0a2      	b.n	800358e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800345a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	440b      	add	r3, r1
 8003464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800346e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4403      	add	r3, r0
 800347e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003482:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4403      	add	r3, r0
 80034a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4419      	add	r1, r3
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4403      	add	r3, r0
 80034bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034c0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d114      	bne.n	80034f2 <PCD_EP_OutXfrComplete_int+0x16a>
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d108      	bne.n	80034f2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034ea:	461a      	mov	r2, r3
 80034ec:	2101      	movs	r1, #1
 80034ee:	f002 fd45 	bl	8005f7c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f004 fc47 	bl	8007d8c <HAL_PCD_DataOutStageCallback>
 80034fe:	e046      	b.n	800358e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a26      	ldr	r2, [pc, #152]	; (800359c <PCD_EP_OutXfrComplete_int+0x214>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d124      	bne.n	8003552 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351e:	461a      	mov	r2, r3
 8003520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003524:	6093      	str	r3, [r2, #8]
 8003526:	e032      	b.n	800358e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353e:	461a      	mov	r2, r3
 8003540:	2320      	movs	r3, #32
 8003542:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f004 fc1e 	bl	8007d8c <HAL_PCD_DataOutStageCallback>
 8003550:	e01d      	b.n	800358e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d114      	bne.n	8003582 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d108      	bne.n	8003582 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800357a:	461a      	mov	r2, r3
 800357c:	2100      	movs	r1, #0
 800357e:	f002 fcfd 	bl	8005f7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	4619      	mov	r1, r3
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f004 fbff 	bl	8007d8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	4f54300a 	.word	0x4f54300a
 800359c:	4f54310a 	.word	0x4f54310a

080035a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	333c      	adds	r3, #60	; 0x3c
 80035b8:	3304      	adds	r3, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a15      	ldr	r2, [pc, #84]	; (8003628 <PCD_EP_OutSetupPacket_int+0x88>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d90e      	bls.n	80035f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ec:	461a      	mov	r2, r3
 80035ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f004 fbb7 	bl	8007d68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <PCD_EP_OutSetupPacket_int+0x88>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d90c      	bls.n	800361c <PCD_EP_OutSetupPacket_int+0x7c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d108      	bne.n	800361c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003614:	461a      	mov	r2, r3
 8003616:	2101      	movs	r1, #1
 8003618:	f002 fcb0 	bl	8005f7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	4f54300a 	.word	0x4f54300a

0800362c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	70fb      	strb	r3, [r7, #3]
 8003638:	4613      	mov	r3, r2
 800363a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d107      	bne.n	800365a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800364a:	883b      	ldrh	r3, [r7, #0]
 800364c:	0419      	lsls	r1, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	430a      	orrs	r2, r1
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
 8003658:	e028      	b.n	80036ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	0c1b      	lsrs	r3, r3, #16
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	4413      	add	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003668:	2300      	movs	r3, #0
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	e00d      	b.n	800368a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	3340      	adds	r3, #64	; 0x40
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	4413      	add	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	3301      	adds	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	3b01      	subs	r3, #1
 8003690:	429a      	cmp	r2, r3
 8003692:	d3ec      	bcc.n	800366e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003694:	883b      	ldrh	r3, [r7, #0]
 8003696:	0418      	lsls	r0, r3, #16
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	3b01      	subs	r3, #1
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	4302      	orrs	r2, r0
 80036a4:	3340      	adds	r3, #64	; 0x40
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e25b      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d075      	beq.n	80037fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003712:	4ba3      	ldr	r3, [pc, #652]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b04      	cmp	r3, #4
 800371c:	d00c      	beq.n	8003738 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371e:	4ba0      	ldr	r3, [pc, #640]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003726:	2b08      	cmp	r3, #8
 8003728:	d112      	bne.n	8003750 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372a:	4b9d      	ldr	r3, [pc, #628]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003736:	d10b      	bne.n	8003750 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003738:	4b99      	ldr	r3, [pc, #612]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d05b      	beq.n	80037fc <HAL_RCC_OscConfig+0x108>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d157      	bne.n	80037fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e236      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003758:	d106      	bne.n	8003768 <HAL_RCC_OscConfig+0x74>
 800375a:	4b91      	ldr	r3, [pc, #580]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a90      	ldr	r2, [pc, #576]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e01d      	b.n	80037a4 <HAL_RCC_OscConfig+0xb0>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x98>
 8003772:	4b8b      	ldr	r3, [pc, #556]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a8a      	ldr	r2, [pc, #552]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b88      	ldr	r3, [pc, #544]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a87      	ldr	r2, [pc, #540]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0xb0>
 800378c:	4b84      	ldr	r3, [pc, #528]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a83      	ldr	r2, [pc, #524]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b81      	ldr	r3, [pc, #516]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a80      	ldr	r2, [pc, #512]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 800379e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fd fc14 	bl	8000fd8 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fd fc10 	bl	8000fd8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1fb      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b76      	ldr	r3, [pc, #472]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0xc0>
 80037d2:	e014      	b.n	80037fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fd fc00 	bl	8000fd8 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fd fbfc 	bl	8000fd8 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	; 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e1e7      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ee:	4b6c      	ldr	r3, [pc, #432]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0xe8>
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d063      	beq.n	80038d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800380a:	4b65      	ldr	r3, [pc, #404]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003816:	4b62      	ldr	r3, [pc, #392]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800381e:	2b08      	cmp	r3, #8
 8003820:	d11c      	bne.n	800385c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003822:	4b5f      	ldr	r3, [pc, #380]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d116      	bne.n	800385c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382e:	4b5c      	ldr	r3, [pc, #368]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_RCC_OscConfig+0x152>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d001      	beq.n	8003846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e1bb      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003846:	4b56      	ldr	r3, [pc, #344]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4952      	ldr	r1, [pc, #328]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385a:	e03a      	b.n	80038d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d020      	beq.n	80038a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003864:	4b4f      	ldr	r3, [pc, #316]	; (80039a4 <HAL_RCC_OscConfig+0x2b0>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fd fbb5 	bl	8000fd8 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003872:	f7fd fbb1 	bl	8000fd8 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e19c      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003884:	4b46      	ldr	r3, [pc, #280]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003890:	4b43      	ldr	r3, [pc, #268]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4940      	ldr	r1, [pc, #256]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	600b      	str	r3, [r1, #0]
 80038a4:	e015      	b.n	80038d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a6:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <HAL_RCC_OscConfig+0x2b0>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fd fb94 	bl	8000fd8 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b4:	f7fd fb90 	bl	8000fd8 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e17b      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c6:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d030      	beq.n	8003940 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d016      	beq.n	8003914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e6:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <HAL_RCC_OscConfig+0x2b4>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fd fb74 	bl	8000fd8 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fd fb70 	bl	8000fd8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e15b      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003906:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x200>
 8003912:	e015      	b.n	8003940 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RCC_OscConfig+0x2b4>)
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391a:	f7fd fb5d 	bl	8000fd8 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003922:	f7fd fb59 	bl	8000fd8 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e144      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003934:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80a0 	beq.w	8003a8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003952:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10f      	bne.n	800397e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a0e      	ldr	r2, [pc, #56]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
 800396e:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_OscConfig+0x2b8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d121      	bne.n	80039ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_RCC_OscConfig+0x2b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a07      	ldr	r2, [pc, #28]	; (80039ac <HAL_RCC_OscConfig+0x2b8>)
 8003990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003996:	f7fd fb1f 	bl	8000fd8 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	e011      	b.n	80039c2 <HAL_RCC_OscConfig+0x2ce>
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800
 80039a4:	42470000 	.word	0x42470000
 80039a8:	42470e80 	.word	0x42470e80
 80039ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b0:	f7fd fb12 	bl	8000fd8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e0fd      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b81      	ldr	r3, [pc, #516]	; (8003bc8 <HAL_RCC_OscConfig+0x4d4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d106      	bne.n	80039e4 <HAL_RCC_OscConfig+0x2f0>
 80039d6:	4b7d      	ldr	r3, [pc, #500]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a7c      	ldr	r2, [pc, #496]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70
 80039e2:	e01c      	b.n	8003a1e <HAL_RCC_OscConfig+0x32a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCC_OscConfig+0x312>
 80039ec:	4b77      	ldr	r3, [pc, #476]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	4a76      	ldr	r2, [pc, #472]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	6713      	str	r3, [r2, #112]	; 0x70
 80039f8:	4b74      	ldr	r3, [pc, #464]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	4a73      	ldr	r2, [pc, #460]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6713      	str	r3, [r2, #112]	; 0x70
 8003a04:	e00b      	b.n	8003a1e <HAL_RCC_OscConfig+0x32a>
 8003a06:	4b71      	ldr	r3, [pc, #452]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	4a70      	ldr	r2, [pc, #448]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	6713      	str	r3, [r2, #112]	; 0x70
 8003a12:	4b6e      	ldr	r3, [pc, #440]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	4a6d      	ldr	r2, [pc, #436]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003a18:	f023 0304 	bic.w	r3, r3, #4
 8003a1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d015      	beq.n	8003a52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a26:	f7fd fad7 	bl	8000fd8 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2c:	e00a      	b.n	8003a44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fd fad3 	bl	8000fd8 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e0bc      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a44:	4b61      	ldr	r3, [pc, #388]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0ee      	beq.n	8003a2e <HAL_RCC_OscConfig+0x33a>
 8003a50:	e014      	b.n	8003a7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a52:	f7fd fac1 	bl	8000fd8 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fd fabd 	bl	8000fd8 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e0a6      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a70:	4b56      	ldr	r3, [pc, #344]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1ee      	bne.n	8003a5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d105      	bne.n	8003a8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a82:	4b52      	ldr	r3, [pc, #328]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4a51      	ldr	r2, [pc, #324]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8092 	beq.w	8003bbc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a98:	4b4c      	ldr	r3, [pc, #304]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d05c      	beq.n	8003b5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d141      	bne.n	8003b30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aac:	4b48      	ldr	r3, [pc, #288]	; (8003bd0 <HAL_RCC_OscConfig+0x4dc>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7fd fa91 	bl	8000fd8 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aba:	f7fd fa8d 	bl	8000fd8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e078      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003acc:	4b3f      	ldr	r3, [pc, #252]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	019b      	lsls	r3, r3, #6
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	3b01      	subs	r3, #1
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	4933      	ldr	r1, [pc, #204]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b02:	4b33      	ldr	r3, [pc, #204]	; (8003bd0 <HAL_RCC_OscConfig+0x4dc>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fd fa66 	bl	8000fd8 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fd fa62 	bl	8000fd8 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e04d      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b22:	4b2a      	ldr	r3, [pc, #168]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x41c>
 8003b2e:	e045      	b.n	8003bbc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b30:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <HAL_RCC_OscConfig+0x4dc>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b36:	f7fd fa4f 	bl	8000fd8 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7fd fa4b 	bl	8000fd8 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e036      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b50:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f0      	bne.n	8003b3e <HAL_RCC_OscConfig+0x44a>
 8003b5c:	e02e      	b.n	8003bbc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e029      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b6a:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <HAL_RCC_OscConfig+0x4d8>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d11c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d115      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b92:	4013      	ands	r3, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d10d      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d106      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	42470060 	.word	0x42470060

08003bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0cc      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b68      	ldr	r3, [pc, #416]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d90c      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b63      	ldr	r3, [pc, #396]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0b8      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c28:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c40:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a52      	ldr	r2, [pc, #328]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4c:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	494d      	ldr	r1, [pc, #308]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d044      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d119      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e07f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	4b3f      	ldr	r3, [pc, #252]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e06f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca2:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e067      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb2:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f023 0203 	bic.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4934      	ldr	r1, [pc, #208]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc4:	f7fd f988 	bl	8000fd8 <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fd f984 	bl	8000fd8 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e04f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	4b2b      	ldr	r3, [pc, #172]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 020c 	and.w	r2, r3, #12
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d1eb      	bne.n	8003ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d20c      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e032      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4916      	ldr	r1, [pc, #88]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	490e      	ldr	r1, [pc, #56]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d5a:	f000 f821 	bl	8003da0 <HAL_RCC_GetSysClockFreq>
 8003d5e:	4601      	mov	r1, r0
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
 8003d6e:	fa21 f303 	lsr.w	r3, r1, r3
 8003d72:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1c8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fd f8e8 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023c00 	.word	0x40023c00
 8003d90:	40023800 	.word	0x40023800
 8003d94:	0800916c 	.word	0x0800916c
 8003d98:	20000000 	.word	0x20000000
 8003d9c:	20000004 	.word	0x20000004

08003da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	2300      	movs	r3, #0
 8003db0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db6:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d007      	beq.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x32>
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x38>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 808d 	bne.w	8003ee6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dcc:	4b4b      	ldr	r3, [pc, #300]	; (8003efc <HAL_RCC_GetSysClockFreq+0x15c>)
 8003dce:	60bb      	str	r3, [r7, #8]
       break;
 8003dd0:	e08c      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dd2:	4b4b      	ldr	r3, [pc, #300]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x160>)
 8003dd4:	60bb      	str	r3, [r7, #8]
      break;
 8003dd6:	e089      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd8:	4b47      	ldr	r3, [pc, #284]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003de2:	4b45      	ldr	r3, [pc, #276]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d023      	beq.n	8003e36 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dee:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	099b      	lsrs	r3, r3, #6
 8003df4:	f04f 0400 	mov.w	r4, #0
 8003df8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	ea03 0501 	and.w	r5, r3, r1
 8003e04:	ea04 0602 	and.w	r6, r4, r2
 8003e08:	4a3d      	ldr	r2, [pc, #244]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e0a:	fb02 f106 	mul.w	r1, r2, r6
 8003e0e:	2200      	movs	r2, #0
 8003e10:	fb02 f205 	mul.w	r2, r2, r5
 8003e14:	440a      	add	r2, r1
 8003e16:	493a      	ldr	r1, [pc, #232]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e18:	fba5 0101 	umull	r0, r1, r5, r1
 8003e1c:	1853      	adds	r3, r2, r1
 8003e1e:	4619      	mov	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f04f 0400 	mov.w	r4, #0
 8003e26:	461a      	mov	r2, r3
 8003e28:	4623      	mov	r3, r4
 8003e2a:	f7fc fa29 	bl	8000280 <__aeabi_uldivmod>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	460c      	mov	r4, r1
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e049      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e36:	4b30      	ldr	r3, [pc, #192]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	099b      	lsrs	r3, r3, #6
 8003e3c:	f04f 0400 	mov.w	r4, #0
 8003e40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	ea03 0501 	and.w	r5, r3, r1
 8003e4c:	ea04 0602 	and.w	r6, r4, r2
 8003e50:	4629      	mov	r1, r5
 8003e52:	4632      	mov	r2, r6
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	f04f 0400 	mov.w	r4, #0
 8003e5c:	0154      	lsls	r4, r2, #5
 8003e5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e62:	014b      	lsls	r3, r1, #5
 8003e64:	4619      	mov	r1, r3
 8003e66:	4622      	mov	r2, r4
 8003e68:	1b49      	subs	r1, r1, r5
 8003e6a:	eb62 0206 	sbc.w	r2, r2, r6
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	f04f 0400 	mov.w	r4, #0
 8003e76:	0194      	lsls	r4, r2, #6
 8003e78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e7c:	018b      	lsls	r3, r1, #6
 8003e7e:	1a5b      	subs	r3, r3, r1
 8003e80:	eb64 0402 	sbc.w	r4, r4, r2
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	00e2      	lsls	r2, r4, #3
 8003e8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e92:	00d9      	lsls	r1, r3, #3
 8003e94:	460b      	mov	r3, r1
 8003e96:	4614      	mov	r4, r2
 8003e98:	195b      	adds	r3, r3, r5
 8003e9a:	eb44 0406 	adc.w	r4, r4, r6
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	02a2      	lsls	r2, r4, #10
 8003ea8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003eac:	0299      	lsls	r1, r3, #10
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f04f 0400 	mov.w	r4, #0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	f7fc f9de 	bl	8000280 <__aeabi_uldivmod>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eca:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	0c1b      	lsrs	r3, r3, #16
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	60bb      	str	r3, [r7, #8]
      break;
 8003ee4:	e002      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_GetSysClockFreq+0x15c>)
 8003ee8:	60bb      	str	r3, [r7, #8]
      break;
 8003eea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eec:	68bb      	ldr	r3, [r7, #8]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	00f42400 	.word	0x00f42400
 8003f00:	017d7840 	.word	0x017d7840

08003f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000000 	.word	0x20000000

08003f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e01d      	b.n	8003f6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fc ff5c 	bl	8000e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f000 f9ee 	bl	800433c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e01d      	b.n	8003fc0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f815 	bl	8003fc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3304      	adds	r3, #4
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	f000 f9c3 	bl	800433c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2201      	movs	r2, #1
 8003fec:	6839      	ldr	r1, [r7, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fc4a 	bl	8004888 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a10      	ldr	r2, [pc, #64]	; (800403c <HAL_TIM_PWM_Start+0x60>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d107      	bne.n	800400e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800400c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b06      	cmp	r3, #6
 800401e:	d007      	beq.n	8004030 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40010000 	.word	0x40010000

08004040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004056:	2302      	movs	r3, #2
 8004058:	e0b4      	b.n	80041c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2202      	movs	r2, #2
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b0c      	cmp	r3, #12
 800406e:	f200 809f 	bhi.w	80041b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004072:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	080040ad 	.word	0x080040ad
 800407c:	080041b1 	.word	0x080041b1
 8004080:	080041b1 	.word	0x080041b1
 8004084:	080041b1 	.word	0x080041b1
 8004088:	080040ed 	.word	0x080040ed
 800408c:	080041b1 	.word	0x080041b1
 8004090:	080041b1 	.word	0x080041b1
 8004094:	080041b1 	.word	0x080041b1
 8004098:	0800412f 	.word	0x0800412f
 800409c:	080041b1 	.word	0x080041b1
 80040a0:	080041b1 	.word	0x080041b1
 80040a4:	080041b1 	.word	0x080041b1
 80040a8:	0800416f 	.word	0x0800416f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f9c2 	bl	800443c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0208 	orr.w	r2, r2, #8
 80040c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0204 	bic.w	r2, r2, #4
 80040d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6999      	ldr	r1, [r3, #24]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	619a      	str	r2, [r3, #24]
      break;
 80040ea:	e062      	b.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fa08 	bl	8004508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6999      	ldr	r1, [r3, #24]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	021a      	lsls	r2, r3, #8
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	619a      	str	r2, [r3, #24]
      break;
 800412c:	e041      	b.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fa53 	bl	80045e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0208 	orr.w	r2, r2, #8
 8004148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0204 	bic.w	r2, r2, #4
 8004158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69d9      	ldr	r1, [r3, #28]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	61da      	str	r2, [r3, #28]
      break;
 800416c:	e021      	b.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fa9d 	bl	80046b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69d9      	ldr	r1, [r3, #28]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	021a      	lsls	r2, r3, #8
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	61da      	str	r2, [r3, #28]
      break;
 80041ae:	e000      	b.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80041b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_TIM_ConfigClockSource+0x18>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e0a6      	b.n	8004332 <HAL_TIM_ConfigClockSource+0x166>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004202:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800420a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	d067      	beq.n	80042ec <HAL_TIM_ConfigClockSource+0x120>
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d80b      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x6c>
 8004220:	2b10      	cmp	r3, #16
 8004222:	d073      	beq.n	800430c <HAL_TIM_ConfigClockSource+0x140>
 8004224:	2b10      	cmp	r3, #16
 8004226:	d802      	bhi.n	800422e <HAL_TIM_ConfigClockSource+0x62>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d06f      	beq.n	800430c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800422c:	e078      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800422e:	2b20      	cmp	r3, #32
 8004230:	d06c      	beq.n	800430c <HAL_TIM_ConfigClockSource+0x140>
 8004232:	2b30      	cmp	r3, #48	; 0x30
 8004234:	d06a      	beq.n	800430c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004236:	e073      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004238:	2b70      	cmp	r3, #112	; 0x70
 800423a:	d00d      	beq.n	8004258 <HAL_TIM_ConfigClockSource+0x8c>
 800423c:	2b70      	cmp	r3, #112	; 0x70
 800423e:	d804      	bhi.n	800424a <HAL_TIM_ConfigClockSource+0x7e>
 8004240:	2b50      	cmp	r3, #80	; 0x50
 8004242:	d033      	beq.n	80042ac <HAL_TIM_ConfigClockSource+0xe0>
 8004244:	2b60      	cmp	r3, #96	; 0x60
 8004246:	d041      	beq.n	80042cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004248:	e06a      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424e:	d066      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x152>
 8004250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004254:	d017      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004256:	e063      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	6899      	ldr	r1, [r3, #8]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f000 faee 	bl	8004848 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800427a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	609a      	str	r2, [r3, #8]
      break;
 8004284:	e04c      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6899      	ldr	r1, [r3, #8]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f000 fad7 	bl	8004848 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042a8:	609a      	str	r2, [r3, #8]
      break;
 80042aa:	e039      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	6859      	ldr	r1, [r3, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	461a      	mov	r2, r3
 80042ba:	f000 fa4b 	bl	8004754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2150      	movs	r1, #80	; 0x50
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 faa4 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 80042ca:	e029      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	461a      	mov	r2, r3
 80042da:	f000 fa6a 	bl	80047b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2160      	movs	r1, #96	; 0x60
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fa94 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 80042ea:	e019      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	6859      	ldr	r1, [r3, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	461a      	mov	r2, r3
 80042fa:	f000 fa2b 	bl	8004754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2140      	movs	r1, #64	; 0x40
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fa84 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 800430a:	e009      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f000 fa7b 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 800431c:	e000      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800431e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a34      	ldr	r2, [pc, #208]	; (8004420 <TIM_Base_SetConfig+0xe4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00f      	beq.n	8004374 <TIM_Base_SetConfig+0x38>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435a:	d00b      	beq.n	8004374 <TIM_Base_SetConfig+0x38>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a31      	ldr	r2, [pc, #196]	; (8004424 <TIM_Base_SetConfig+0xe8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d007      	beq.n	8004374 <TIM_Base_SetConfig+0x38>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a30      	ldr	r2, [pc, #192]	; (8004428 <TIM_Base_SetConfig+0xec>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_Base_SetConfig+0x38>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a2f      	ldr	r2, [pc, #188]	; (800442c <TIM_Base_SetConfig+0xf0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d108      	bne.n	8004386 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a25      	ldr	r2, [pc, #148]	; (8004420 <TIM_Base_SetConfig+0xe4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01b      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d017      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a22      	ldr	r2, [pc, #136]	; (8004424 <TIM_Base_SetConfig+0xe8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a21      	ldr	r2, [pc, #132]	; (8004428 <TIM_Base_SetConfig+0xec>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00f      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a20      	ldr	r2, [pc, #128]	; (800442c <TIM_Base_SetConfig+0xf0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <TIM_Base_SetConfig+0xf4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d007      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <TIM_Base_SetConfig+0xf8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_Base_SetConfig+0x8a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a1d      	ldr	r2, [pc, #116]	; (8004438 <TIM_Base_SetConfig+0xfc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d108      	bne.n	80043d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a08      	ldr	r2, [pc, #32]	; (8004420 <TIM_Base_SetConfig+0xe4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d103      	bne.n	800440c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	615a      	str	r2, [r3, #20]
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40010000 	.word	0x40010000
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800
 800442c:	40000c00 	.word	0x40000c00
 8004430:	40014000 	.word	0x40014000
 8004434:	40014400 	.word	0x40014400
 8004438:	40014800 	.word	0x40014800

0800443c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f023 0302 	bic.w	r3, r3, #2
 8004484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a1c      	ldr	r2, [pc, #112]	; (8004504 <TIM_OC1_SetConfig+0xc8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d10c      	bne.n	80044b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0308 	bic.w	r3, r3, #8
 800449e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 0304 	bic.w	r3, r3, #4
 80044b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a13      	ldr	r2, [pc, #76]	; (8004504 <TIM_OC1_SetConfig+0xc8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d111      	bne.n	80044de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	621a      	str	r2, [r3, #32]
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40010000 	.word	0x40010000

08004508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f023 0210 	bic.w	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 0320 	bic.w	r3, r3, #32
 8004552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <TIM_OC2_SetConfig+0xd4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d10d      	bne.n	8004584 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a15      	ldr	r2, [pc, #84]	; (80045dc <TIM_OC2_SetConfig+0xd4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d113      	bne.n	80045b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800459a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40010000 	.word	0x40010000

080045e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <TIM_OC3_SetConfig+0xd0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d10d      	bne.n	800465a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <TIM_OC3_SetConfig+0xd0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d113      	bne.n	800468a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	621a      	str	r2, [r3, #32]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40010000 	.word	0x40010000

080046b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	021b      	lsls	r3, r3, #8
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	031b      	lsls	r3, r3, #12
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a10      	ldr	r2, [pc, #64]	; (8004750 <TIM_OC4_SetConfig+0x9c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d109      	bne.n	8004728 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800471a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	019b      	lsls	r3, r3, #6
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40010000 	.word	0x40010000

08004754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	f023 0201 	bic.w	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800477e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f023 030a 	bic.w	r3, r3, #10
 8004790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b087      	sub	sp, #28
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0210 	bic.w	r2, r3, #16
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	031b      	lsls	r3, r3, #12
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	f043 0307 	orr.w	r3, r3, #7
 8004834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	609a      	str	r2, [r3, #8]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	021a      	lsls	r2, r3, #8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	431a      	orrs	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4313      	orrs	r3, r2
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	609a      	str	r2, [r3, #8]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2201      	movs	r2, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1a      	ldr	r2, [r3, #32]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	401a      	ands	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1a      	ldr	r2, [r3, #32]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	fa01 f303 	lsl.w	r3, r1, r3
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e050      	b.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1c      	ldr	r2, [pc, #112]	; (800499c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d018      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004938:	d013      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00e      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d009      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a13      	ldr	r2, [pc, #76]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10c      	bne.n	800497c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	4313      	orrs	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40010000 	.word	0x40010000
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800
 80049a8:	40000c00 	.word	0x40000c00
 80049ac:	40014000 	.word	0x40014000

080049b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e03d      	b.n	8004a48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a54:	b084      	sub	sp, #16
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	f107 001c 	add.w	r0, r7, #28
 8004a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d122      	bne.n	8004ab2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d105      	bne.n	8004aa6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f001 fac6 	bl	8006038 <USB_CoreReset>
 8004aac:	4603      	mov	r3, r0
 8004aae:	73fb      	strb	r3, [r7, #15]
 8004ab0:	e01a      	b.n	8004ae8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f001 faba 	bl	8006038 <USB_CoreReset>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	639a      	str	r2, [r3, #56]	; 0x38
 8004ada:	e005      	b.n	8004ae8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d10b      	bne.n	8004b06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f043 0206 	orr.w	r2, r3, #6
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f043 0220 	orr.w	r2, r3, #32
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b12:	b004      	add	sp, #16
 8004b14:	4770      	bx	lr
	...

08004b18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	4613      	mov	r3, r2
 8004b24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d165      	bne.n	8004bf8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4a41      	ldr	r2, [pc, #260]	; (8004c34 <USB_SetTurnaroundTime+0x11c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d906      	bls.n	8004b42 <USB_SetTurnaroundTime+0x2a>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4a40      	ldr	r2, [pc, #256]	; (8004c38 <USB_SetTurnaroundTime+0x120>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d802      	bhi.n	8004b42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b3c:	230f      	movs	r3, #15
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	e062      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4a3c      	ldr	r2, [pc, #240]	; (8004c38 <USB_SetTurnaroundTime+0x120>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d906      	bls.n	8004b58 <USB_SetTurnaroundTime+0x40>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4a3b      	ldr	r2, [pc, #236]	; (8004c3c <USB_SetTurnaroundTime+0x124>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d802      	bhi.n	8004b58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b52:	230e      	movs	r3, #14
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e057      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4a38      	ldr	r2, [pc, #224]	; (8004c3c <USB_SetTurnaroundTime+0x124>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d906      	bls.n	8004b6e <USB_SetTurnaroundTime+0x56>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4a37      	ldr	r2, [pc, #220]	; (8004c40 <USB_SetTurnaroundTime+0x128>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d802      	bhi.n	8004b6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b68:	230d      	movs	r3, #13
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e04c      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4a33      	ldr	r2, [pc, #204]	; (8004c40 <USB_SetTurnaroundTime+0x128>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d906      	bls.n	8004b84 <USB_SetTurnaroundTime+0x6c>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4a32      	ldr	r2, [pc, #200]	; (8004c44 <USB_SetTurnaroundTime+0x12c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d802      	bhi.n	8004b84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b7e:	230c      	movs	r3, #12
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e041      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4a2f      	ldr	r2, [pc, #188]	; (8004c44 <USB_SetTurnaroundTime+0x12c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d906      	bls.n	8004b9a <USB_SetTurnaroundTime+0x82>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4a2e      	ldr	r2, [pc, #184]	; (8004c48 <USB_SetTurnaroundTime+0x130>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d802      	bhi.n	8004b9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b94:	230b      	movs	r3, #11
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e036      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4a2a      	ldr	r2, [pc, #168]	; (8004c48 <USB_SetTurnaroundTime+0x130>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d906      	bls.n	8004bb0 <USB_SetTurnaroundTime+0x98>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4a29      	ldr	r2, [pc, #164]	; (8004c4c <USB_SetTurnaroundTime+0x134>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d802      	bhi.n	8004bb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004baa:	230a      	movs	r3, #10
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e02b      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4a26      	ldr	r2, [pc, #152]	; (8004c4c <USB_SetTurnaroundTime+0x134>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d906      	bls.n	8004bc6 <USB_SetTurnaroundTime+0xae>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4a25      	ldr	r2, [pc, #148]	; (8004c50 <USB_SetTurnaroundTime+0x138>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d802      	bhi.n	8004bc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004bc0:	2309      	movs	r3, #9
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e020      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <USB_SetTurnaroundTime+0x138>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d906      	bls.n	8004bdc <USB_SetTurnaroundTime+0xc4>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <USB_SetTurnaroundTime+0x13c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d802      	bhi.n	8004bdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	e015      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <USB_SetTurnaroundTime+0x13c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d906      	bls.n	8004bf2 <USB_SetTurnaroundTime+0xda>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <USB_SetTurnaroundTime+0x140>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d802      	bhi.n	8004bf2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004bec:	2307      	movs	r3, #7
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e00a      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004bf2:	2306      	movs	r3, #6
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e007      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004bfe:	2309      	movs	r3, #9
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	e001      	b.n	8004c08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c04:	2309      	movs	r3, #9
 8004c06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	029b      	lsls	r3, r3, #10
 8004c1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	00d8acbf 	.word	0x00d8acbf
 8004c38:	00e4e1bf 	.word	0x00e4e1bf
 8004c3c:	00f423ff 	.word	0x00f423ff
 8004c40:	0106737f 	.word	0x0106737f
 8004c44:	011a499f 	.word	0x011a499f
 8004c48:	01312cff 	.word	0x01312cff
 8004c4c:	014ca43f 	.word	0x014ca43f
 8004c50:	016e35ff 	.word	0x016e35ff
 8004c54:	01a6ab1f 	.word	0x01a6ab1f
 8004c58:	01e847ff 	.word	0x01e847ff

08004c5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0201 	bic.w	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d106      	bne.n	8004ccc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	e00b      	b.n	8004ce4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60da      	str	r2, [r3, #12]
 8004cde:	e001      	b.n	8004ce4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e003      	b.n	8004cec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004ce4:	2032      	movs	r0, #50	; 0x32
 8004ce6:	f7fc f983 	bl	8000ff0 <HAL_Delay>

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b086      	sub	sp, #24
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	e009      	b.n	8004d28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	3340      	adds	r3, #64	; 0x40
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	2200      	movs	r2, #0
 8004d20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	3301      	adds	r3, #1
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b0e      	cmp	r3, #14
 8004d2c:	d9f2      	bls.n	8004d14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d11c      	bne.n	8004d6e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d42:	f043 0302 	orr.w	r3, r3, #2
 8004d46:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	639a      	str	r2, [r3, #56]	; 0x38
 8004d6c:	e00b      	b.n	8004d86 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d98:	4619      	mov	r1, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da0:	461a      	mov	r2, r3
 8004da2:	680b      	ldr	r3, [r1, #0]
 8004da4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d10c      	bne.n	8004dc6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d104      	bne.n	8004dbc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004db2:	2100      	movs	r1, #0
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f949 	bl	800504c <USB_SetDevSpeed>
 8004dba:	e008      	b.n	8004dce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f944 	bl	800504c <USB_SetDevSpeed>
 8004dc4:	e003      	b.n	8004dce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004dc6:	2103      	movs	r1, #3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f93f 	bl	800504c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dce:	2110      	movs	r1, #16
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f8f3 	bl	8004fbc <USB_FlushTxFifo>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f911 	bl	8005008 <USB_FlushRxFifo>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	461a      	mov	r2, r3
 8004df8:	2300      	movs	r3, #0
 8004dfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	461a      	mov	r2, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2300      	movs	r3, #0
 8004e12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]
 8004e18:	e043      	b.n	8004ea2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e30:	d118      	bne.n	8004e64 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	461a      	mov	r2, r3
 8004e46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	e013      	b.n	8004e76 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	e008      	b.n	8004e76 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	461a      	mov	r2, r3
 8004e72:	2300      	movs	r3, #0
 8004e74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e82:	461a      	mov	r2, r3
 8004e84:	2300      	movs	r3, #0
 8004e86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e94:	461a      	mov	r2, r3
 8004e96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d3b7      	bcc.n	8004e1a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	e043      	b.n	8004f38 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ec6:	d118      	bne.n	8004efa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eda:	461a      	mov	r2, r3
 8004edc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	e013      	b.n	8004f0c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	e008      	b.n	8004f0c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f06:	461a      	mov	r2, r3
 8004f08:	2300      	movs	r3, #0
 8004f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f18:	461a      	mov	r2, r3
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	3301      	adds	r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d3b7      	bcc.n	8004eb0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d105      	bne.n	8004f74 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f043 0210 	orr.w	r2, r3, #16
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699a      	ldr	r2, [r3, #24]
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <USB_DevInit+0x2c4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f043 0208 	orr.w	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d107      	bne.n	8004fa8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fa0:	f043 0304 	orr.w	r3, r3, #4
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fb4:	b004      	add	sp, #16
 8004fb6:	4770      	bx	lr
 8004fb8:	803c3800 	.word	0x803c3800

08004fbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	019b      	lsls	r3, r3, #6
 8004fce:	f043 0220 	orr.w	r2, r3, #32
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a09      	ldr	r2, [pc, #36]	; (8005004 <USB_FlushTxFifo+0x48>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e006      	b.n	8004ff6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d0f0      	beq.n	8004fd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	00030d40 	.word	0x00030d40

08005008 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2210      	movs	r2, #16
 8005018:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3301      	adds	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a09      	ldr	r2, [pc, #36]	; (8005048 <USB_FlushRxFifo+0x40>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e006      	b.n	800503a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	2b10      	cmp	r3, #16
 8005036:	d0f0      	beq.n	800501a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	00030d40 	.word	0x00030d40

0800504c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800506c:	4313      	orrs	r3, r2
 800506e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0306 	and.w	r3, r3, #6
 8005096:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d102      	bne.n	80050a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800509e:	2300      	movs	r3, #0
 80050a0:	75fb      	strb	r3, [r7, #23]
 80050a2:	e00a      	b.n	80050ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d002      	beq.n	80050b0 <USB_GetDevSpeed+0x32>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b06      	cmp	r3, #6
 80050ae:	d102      	bne.n	80050b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80050b0:	2302      	movs	r3, #2
 80050b2:	75fb      	strb	r3, [r7, #23]
 80050b4:	e001      	b.n	80050ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80050b6:	230f      	movs	r3, #15
 80050b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d13a      	bne.n	800515a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f303 	lsl.w	r3, r1, r3
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	68f9      	ldr	r1, [r7, #12]
 80050fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005102:	4313      	orrs	r3, r2
 8005104:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d155      	bne.n	80051c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	78db      	ldrb	r3, [r3, #3]
 8005136:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005138:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	059b      	lsls	r3, r3, #22
 800513e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005140:	4313      	orrs	r3, r2
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	e036      	b.n	80051c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005160:	69da      	ldr	r2, [r3, #28]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	2101      	movs	r1, #1
 800516c:	fa01 f303 	lsl.w	r3, r1, r3
 8005170:	041b      	lsls	r3, r3, #16
 8005172:	68f9      	ldr	r1, [r7, #12]
 8005174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005178:	4313      	orrs	r3, r2
 800517a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d11a      	bne.n	80051c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	78db      	ldrb	r3, [r3, #3]
 80051ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051ae:	430b      	orrs	r3, r1
 80051b0:	4313      	orrs	r3, r2
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d161      	bne.n	80052b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520a:	d11f      	bne.n	800524c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	440a      	add	r2, r1
 8005222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800522a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	440a      	add	r2, r1
 8005242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800524a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	2101      	movs	r1, #1
 800525e:	fa01 f303 	lsl.w	r3, r1, r3
 8005262:	b29b      	uxth	r3, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800526c:	4013      	ands	r3, r2
 800526e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	2101      	movs	r1, #1
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	b29b      	uxth	r3, r3
 8005288:	43db      	mvns	r3, r3
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005290:	4013      	ands	r3, r2
 8005292:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	0159      	lsls	r1, r3, #5
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	440b      	add	r3, r1
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	4619      	mov	r1, r3
 80052b0:	4b35      	ldr	r3, [pc, #212]	; (8005388 <USB_DeactivateEndpoint+0x1b0>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]
 80052b6:	e060      	b.n	800537a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ce:	d11f      	bne.n	8005310 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	440a      	add	r2, r1
 8005306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800530e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	2101      	movs	r1, #1
 8005322:	fa01 f303 	lsl.w	r3, r1, r3
 8005326:	041b      	lsls	r3, r3, #16
 8005328:	43db      	mvns	r3, r3
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005330:	4013      	ands	r3, r2
 8005332:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	2101      	movs	r1, #1
 8005346:	fa01 f303 	lsl.w	r3, r1, r3
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	43db      	mvns	r3, r3
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005354:	4013      	ands	r3, r2
 8005356:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	0159      	lsls	r1, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	440b      	add	r3, r1
 800536e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005372:	4619      	mov	r1, r3
 8005374:	4b05      	ldr	r3, [pc, #20]	; (800538c <USB_DeactivateEndpoint+0x1b4>)
 8005376:	4013      	ands	r3, r2
 8005378:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	ec337800 	.word	0xec337800
 800538c:	eff37800 	.word	0xeff37800

08005390 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08a      	sub	sp, #40	; 0x28
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	f040 815c 	bne.w	800566a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d132      	bne.n	8005420 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	440a      	add	r2, r1
 8005414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005418:	0cdb      	lsrs	r3, r3, #19
 800541a:	04db      	lsls	r3, r3, #19
 800541c:	6113      	str	r3, [r2, #16]
 800541e:	e074      	b.n	800550a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	0151      	lsls	r1, r2, #5
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	440a      	add	r2, r1
 8005436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543a:	0cdb      	lsrs	r3, r3, #19
 800543c:	04db      	lsls	r3, r3, #19
 800543e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800545a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800545e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005462:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6959      	ldr	r1, [r3, #20]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	440b      	add	r3, r1
 800547c:	1e59      	subs	r1, r3, #1
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	fbb1 f3f3 	udiv	r3, r1, r3
 8005486:	04d9      	lsls	r1, r3, #19
 8005488:	4b9d      	ldr	r3, [pc, #628]	; (8005700 <USB_EPStartXfer+0x370>)
 800548a:	400b      	ands	r3, r1
 800548c:	69b9      	ldr	r1, [r7, #24]
 800548e:	0148      	lsls	r0, r1, #5
 8005490:	69f9      	ldr	r1, [r7, #28]
 8005492:	4401      	add	r1, r0
 8005494:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005498:	4313      	orrs	r3, r2
 800549a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b2:	69b9      	ldr	r1, [r7, #24]
 80054b4:	0148      	lsls	r0, r1, #5
 80054b6:	69f9      	ldr	r1, [r7, #28]
 80054b8:	4401      	add	r1, r0
 80054ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054be:	4313      	orrs	r3, r2
 80054c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	78db      	ldrb	r3, [r3, #3]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d11f      	bne.n	800550a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005504:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005508:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d14b      	bne.n	80055a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d009      	beq.n	800552c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	461a      	mov	r2, r3
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	78db      	ldrb	r3, [r3, #3]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d128      	bne.n	8005586 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d110      	bne.n	8005566 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	0151      	lsls	r1, r2, #5
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	440a      	add	r2, r1
 800555a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e00f      	b.n	8005586 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005584:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	e12f      	b.n	8005808 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	78db      	ldrb	r3, [r3, #3]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d015      	beq.n	80055fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8117 	beq.w	8005808 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	2101      	movs	r1, #1
 80055ec:	fa01 f303 	lsl.w	r3, r1, r3
 80055f0:	69f9      	ldr	r1, [r7, #28]
 80055f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f6:	4313      	orrs	r3, r2
 80055f8:	634b      	str	r3, [r1, #52]	; 0x34
 80055fa:	e105      	b.n	8005808 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d110      	bne.n	800562e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005626:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	e00f      	b.n	800564e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	440a      	add	r2, r1
 8005644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	68d9      	ldr	r1, [r3, #12]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	781a      	ldrb	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	b298      	uxth	r0, r3
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	4603      	mov	r3, r0
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fa2b 	bl	8005abe <USB_WritePacket>
 8005668:	e0ce      	b.n	8005808 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005684:	0cdb      	lsrs	r3, r3, #19
 8005686:	04db      	lsls	r3, r3, #19
 8005688:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	0151      	lsls	r1, r2, #5
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	440a      	add	r2, r1
 80056a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d126      	bne.n	8005704 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056cc:	69b9      	ldr	r1, [r7, #24]
 80056ce:	0148      	lsls	r0, r1, #5
 80056d0:	69f9      	ldr	r1, [r7, #28]
 80056d2:	4401      	add	r1, r0
 80056d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056d8:	4313      	orrs	r3, r2
 80056da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056fa:	6113      	str	r3, [r2, #16]
 80056fc:	e036      	b.n	800576c <USB_EPStartXfer+0x3dc>
 80056fe:	bf00      	nop
 8005700:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	4413      	add	r3, r2
 800570e:	1e5a      	subs	r2, r3, #1
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	fbb2 f3f3 	udiv	r3, r2, r3
 8005718:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	8afb      	ldrh	r3, [r7, #22]
 800572a:	04d9      	lsls	r1, r3, #19
 800572c:	4b39      	ldr	r3, [pc, #228]	; (8005814 <USB_EPStartXfer+0x484>)
 800572e:	400b      	ands	r3, r1
 8005730:	69b9      	ldr	r1, [r7, #24]
 8005732:	0148      	lsls	r0, r1, #5
 8005734:	69f9      	ldr	r1, [r7, #28]
 8005736:	4401      	add	r1, r0
 8005738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800573c:	4313      	orrs	r3, r2
 800573e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	8af9      	ldrh	r1, [r7, #22]
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575c:	69b9      	ldr	r1, [r7, #24]
 800575e:	0148      	lsls	r0, r1, #5
 8005760:	69f9      	ldr	r1, [r7, #28]
 8005762:	4401      	add	r1, r0
 8005764:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005768:	4313      	orrs	r3, r2
 800576a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d10d      	bne.n	800578e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	68d9      	ldr	r1, [r3, #12]
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578a:	460a      	mov	r2, r1
 800578c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	78db      	ldrb	r3, [r3, #3]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d128      	bne.n	80057e8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d110      	bne.n	80057c8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	e00f      	b.n	80057e8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005802:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005806:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3720      	adds	r7, #32
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	1ff80000 	.word	0x1ff80000

08005818 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	4613      	mov	r3, r2
 8005824:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b01      	cmp	r3, #1
 8005836:	f040 80cd 	bne.w	80059d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d132      	bne.n	80058a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	440a      	add	r2, r1
 8005858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	440a      	add	r2, r1
 800587c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a0:	0cdb      	lsrs	r3, r3, #19
 80058a2:	04db      	lsls	r3, r3, #19
 80058a4:	6113      	str	r3, [r2, #16]
 80058a6:	e04e      	b.n	8005946 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c2:	0cdb      	lsrs	r3, r3, #19
 80058c4:	04db      	lsls	r3, r3, #19
 80058c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	0151      	lsls	r1, r2, #5
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	440a      	add	r2, r1
 80058de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	695a      	ldr	r2, [r3, #20]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d903      	bls.n	8005900 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800591e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005936:	6939      	ldr	r1, [r7, #16]
 8005938:	0148      	lsls	r0, r1, #5
 800593a:	6979      	ldr	r1, [r7, #20]
 800593c:	4401      	add	r1, r0
 800593e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005942:	4313      	orrs	r3, r2
 8005944:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d11e      	bne.n	800598a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d009      	beq.n	8005968 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005960:	461a      	mov	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	440a      	add	r2, r1
 800597e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005982:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	e092      	b.n	8005ab0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	0151      	lsls	r1, r2, #5
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	440a      	add	r2, r1
 80059a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d07e      	beq.n	8005ab0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	2101      	movs	r1, #1
 80059c4:	fa01 f303 	lsl.w	r3, r1, r3
 80059c8:	6979      	ldr	r1, [r7, #20]
 80059ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ce:	4313      	orrs	r3, r2
 80059d0:	634b      	str	r3, [r1, #52]	; 0x34
 80059d2:	e06d      	b.n	8005ab0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ee:	0cdb      	lsrs	r3, r3, #19
 80059f0:	04db      	lsls	r3, r3, #19
 80059f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a16:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a5e:	6939      	ldr	r1, [r7, #16]
 8005a60:	0148      	lsls	r0, r1, #5
 8005a62:	6979      	ldr	r1, [r7, #20]
 8005a64:	4401      	add	r1, r0
 8005a66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d10d      	bne.n	8005a90 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d009      	beq.n	8005a90 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	68d9      	ldr	r1, [r3, #12]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8c:	460a      	mov	r2, r1
 8005a8e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	0151      	lsls	r1, r2, #5
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005aae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	371c      	adds	r7, #28
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b089      	sub	sp, #36	; 0x24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	4611      	mov	r1, r2
 8005aca:	461a      	mov	r2, r3
 8005acc:	460b      	mov	r3, r1
 8005ace:	71fb      	strb	r3, [r7, #7]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005adc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d11a      	bne.n	8005b1a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ae4:	88bb      	ldrh	r3, [r7, #4]
 8005ae6:	3303      	adds	r3, #3
 8005ae8:	089b      	lsrs	r3, r3, #2
 8005aea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
 8005af0:	e00f      	b.n	8005b12 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	031a      	lsls	r2, r3, #12
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afe:	461a      	mov	r2, r3
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3eb      	bcc.n	8005af2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3724      	adds	r7, #36	; 0x24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b089      	sub	sp, #36	; 0x24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	3303      	adds	r3, #3
 8005b42:	089b      	lsrs	r3, r3, #2
 8005b44:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005b46:	2300      	movs	r3, #0
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	e00b      	b.n	8005b64 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	3301      	adds	r3, #1
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d3ef      	bcc.n	8005b4c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b6c:	69fb      	ldr	r3, [r7, #28]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3724      	adds	r7, #36	; 0x24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d12c      	bne.n	8005bf0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	db12      	blt.n	8005bce <USB_EPSetStall+0x54>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00f      	beq.n	8005bce <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bcc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	e02b      	b.n	8005c48 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	db12      	blt.n	8005c28 <USB_EPSetStall+0xae>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00f      	beq.n	8005c28 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c26:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b085      	sub	sp, #20
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d128      	bne.n	8005cc4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	78db      	ldrb	r3, [r3, #3]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d003      	beq.n	8005ca2 <USB_EPClearStall+0x4c>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	78db      	ldrb	r3, [r3, #3]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d138      	bne.n	8005d14 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	e027      	b.n	8005d14 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ce2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	78db      	ldrb	r3, [r3, #3]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d003      	beq.n	8005cf4 <USB_EPClearStall+0x9e>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	78db      	ldrb	r3, [r3, #3]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d10f      	bne.n	8005d14 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d12:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d44:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d56:	68f9      	ldr	r1, [r7, #12]
 8005d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d88:	f023 0303 	bic.w	r3, r3, #3
 8005d8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d9c:	f023 0302 	bic.w	r3, r3, #2
 8005da0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005dca:	f023 0303 	bic.w	r3, r3, #3
 8005dce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dde:	f043 0302 	orr.w	r3, r3, #2
 8005de2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4013      	ands	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	0c1b      	lsrs	r3, r3, #16
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	b29b      	uxth	r3, r3
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005eae:	68bb      	ldr	r3, [r7, #8]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8005eec:	01db      	lsls	r3, r3, #7
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ef6:	78fb      	ldrb	r3, [r7, #3]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4013      	ands	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	f003 0301 	and.w	r3, r3, #1
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
	...

08005f7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	460b      	mov	r3, r1
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	333c      	adds	r3, #60	; 0x3c
 8005f92:	3304      	adds	r3, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4a26      	ldr	r2, [pc, #152]	; (8006034 <USB_EP0_OutStart+0xb8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d90a      	bls.n	8005fb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb0:	d101      	bne.n	8005fb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e037      	b.n	8006026 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe4:	f043 0318 	orr.w	r3, r3, #24
 8005fe8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ffc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d10f      	bne.n	8006024 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	461a      	mov	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006022:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	4f54300a 	.word	0x4f54300a

08006038 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4a13      	ldr	r2, [pc, #76]	; (800609c <USB_CoreReset+0x64>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d901      	bls.n	8006056 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e01b      	b.n	800608e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	daf2      	bge.n	8006044 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f043 0201 	orr.w	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3301      	adds	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4a09      	ldr	r2, [pc, #36]	; (800609c <USB_CoreReset+0x64>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d901      	bls.n	8006080 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e006      	b.n	800608e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b01      	cmp	r3, #1
 800608a:	d0f0      	beq.n	800606e <USB_CoreReset+0x36>

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	00030d40 	.word	0x00030d40

080060a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80060ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80060b0:	f002 f922 	bl	80082f8 <malloc>
 80060b4:	4603      	mov	r3, r0
 80060b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80060c6:	2302      	movs	r3, #2
 80060c8:	e066      	b.n	8006198 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	7c1b      	ldrb	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d119      	bne.n	800610e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060de:	2202      	movs	r2, #2
 80060e0:	2181      	movs	r1, #129	; 0x81
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 ff8f 	bl	8008006 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060f2:	2202      	movs	r2, #2
 80060f4:	2101      	movs	r1, #1
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 ff85 	bl	8008006 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2210      	movs	r2, #16
 8006108:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800610c:	e016      	b.n	800613c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800610e:	2340      	movs	r3, #64	; 0x40
 8006110:	2202      	movs	r2, #2
 8006112:	2181      	movs	r1, #129	; 0x81
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 ff76 	bl	8008006 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006120:	2340      	movs	r3, #64	; 0x40
 8006122:	2202      	movs	r2, #2
 8006124:	2101      	movs	r1, #1
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f001 ff6d 	bl	8008006 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2210      	movs	r2, #16
 8006138:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800613c:	2308      	movs	r3, #8
 800613e:	2203      	movs	r2, #3
 8006140:	2182      	movs	r1, #130	; 0x82
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 ff5f 	bl	8008006 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	7c1b      	ldrb	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d109      	bne.n	8006186 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800617c:	2101      	movs	r1, #1
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f002 f830 	bl	80081e4 <USBD_LL_PrepareReceive>
 8006184:	e007      	b.n	8006196 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800618c:	2340      	movs	r3, #64	; 0x40
 800618e:	2101      	movs	r1, #1
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f002 f827 	bl	80081e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80061b0:	2181      	movs	r1, #129	; 0x81
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 ff4d 	bl	8008052 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80061be:	2101      	movs	r1, #1
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 ff46 	bl	8008052 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80061ce:	2182      	movs	r1, #130	; 0x82
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f001 ff3e 	bl	8008052 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00e      	beq.n	800620e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006200:	4618      	mov	r0, r3
 8006202:	f002 f881 	bl	8008308 <free>
    pdev->pClassData = NULL;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006228:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800623e:	2b00      	cmp	r3, #0
 8006240:	d03a      	beq.n	80062b8 <USBD_CDC_Setup+0xa0>
 8006242:	2b20      	cmp	r3, #32
 8006244:	f040 8097 	bne.w	8006376 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	88db      	ldrh	r3, [r3, #6]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d029      	beq.n	80062a4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	b25b      	sxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	da11      	bge.n	800627e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006266:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	88d2      	ldrh	r2, [r2, #6]
 800626c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800626e:	6939      	ldr	r1, [r7, #16]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	88db      	ldrh	r3, [r3, #6]
 8006274:	461a      	mov	r2, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fa9d 	bl	80077b6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800627c:	e082      	b.n	8006384 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	785a      	ldrb	r2, [r3, #1]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	88db      	ldrh	r3, [r3, #6]
 800628c:	b2da      	uxtb	r2, r3
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006294:	6939      	ldr	r1, [r7, #16]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	88db      	ldrh	r3, [r3, #6]
 800629a:	461a      	mov	r2, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 fab6 	bl	800780e <USBD_CtlPrepareRx>
    break;
 80062a2:	e06f      	b.n	8006384 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	7850      	ldrb	r0, [r2, #1]
 80062b0:	2200      	movs	r2, #0
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	4798      	blx	r3
    break;
 80062b6:	e065      	b.n	8006384 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	2b0b      	cmp	r3, #11
 80062be:	d84f      	bhi.n	8006360 <USBD_CDC_Setup+0x148>
 80062c0:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <USBD_CDC_Setup+0xb0>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	080062f9 	.word	0x080062f9
 80062cc:	0800636f 	.word	0x0800636f
 80062d0:	08006361 	.word	0x08006361
 80062d4:	08006361 	.word	0x08006361
 80062d8:	08006361 	.word	0x08006361
 80062dc:	08006361 	.word	0x08006361
 80062e0:	08006361 	.word	0x08006361
 80062e4:	08006361 	.word	0x08006361
 80062e8:	08006361 	.word	0x08006361
 80062ec:	08006361 	.word	0x08006361
 80062f0:	08006321 	.word	0x08006321
 80062f4:	08006349 	.word	0x08006349
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d107      	bne.n	8006312 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006302:	f107 030c 	add.w	r3, r7, #12
 8006306:	2202      	movs	r2, #2
 8006308:	4619      	mov	r1, r3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f001 fa53 	bl	80077b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006310:	e030      	b.n	8006374 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 f9dd 	bl	80076d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800631a:	2303      	movs	r3, #3
 800631c:	75fb      	strb	r3, [r7, #23]
      break;
 800631e:	e029      	b.n	8006374 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006326:	2b03      	cmp	r3, #3
 8006328:	d107      	bne.n	800633a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800632a:	f107 030f 	add.w	r3, r7, #15
 800632e:	2201      	movs	r2, #1
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 fa3f 	bl	80077b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006338:	e01c      	b.n	8006374 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 f9c9 	bl	80076d4 <USBD_CtlError>
        ret = USBD_FAIL;
 8006342:	2303      	movs	r3, #3
 8006344:	75fb      	strb	r3, [r7, #23]
      break;
 8006346:	e015      	b.n	8006374 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634e:	2b03      	cmp	r3, #3
 8006350:	d00f      	beq.n	8006372 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 f9bd 	bl	80076d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800635a:	2303      	movs	r3, #3
 800635c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800635e:	e008      	b.n	8006372 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 f9b6 	bl	80076d4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006368:	2303      	movs	r3, #3
 800636a:	75fb      	strb	r3, [r7, #23]
      break;
 800636c:	e002      	b.n	8006374 <USBD_CDC_Setup+0x15c>
      break;
 800636e:	bf00      	nop
 8006370:	e008      	b.n	8006384 <USBD_CDC_Setup+0x16c>
      break;
 8006372:	bf00      	nop
    }
    break;
 8006374:	e006      	b.n	8006384 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 f9ab 	bl	80076d4 <USBD_CtlError>
    ret = USBD_FAIL;
 800637e:	2303      	movs	r3, #3
 8006380:	75fb      	strb	r3, [r7, #23]
    break;
 8006382:	bf00      	nop
  }

  return (uint8_t)ret;
 8006384:	7dfb      	ldrb	r3, [r7, #23]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop

08006390 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e049      	b.n	8006446 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80063ba:	78fa      	ldrb	r2, [r7, #3]
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	3318      	adds	r3, #24
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d029      	beq.n	8006424 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063d0:	78fa      	ldrb	r2, [r7, #3]
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	3318      	adds	r3, #24
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	78f9      	ldrb	r1, [r7, #3]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	460b      	mov	r3, r1
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	1a5b      	subs	r3, r3, r1
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4403      	add	r3, r0
 80063f0:	3344      	adds	r3, #68	; 0x44
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80063f8:	fb03 f301 	mul.w	r3, r3, r1
 80063fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d110      	bne.n	8006424 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006402:	78fa      	ldrb	r2, [r7, #3]
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	440b      	add	r3, r1
 8006410:	3318      	adds	r3, #24
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006416:	78f9      	ldrb	r1, [r7, #3]
 8006418:	2300      	movs	r3, #0
 800641a:	2200      	movs	r2, #0
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 fec0 	bl	80081a2 <USBD_LL_Transmit>
 8006422:	e00f      	b.n	8006444 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006440:	78fa      	ldrb	r2, [r7, #3]
 8006442:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006460:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800646c:	2303      	movs	r3, #3
 800646e:	e015      	b.n	800649c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 fed6 	bl	8008226 <USBD_LL_GetRxDataSize>
 800647a:	4602      	mov	r2, r0
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006496:	4611      	mov	r1, r2
 8006498:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064b2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d015      	beq.n	80064ea <USBD_CDC_EP0_RxReady+0x46>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064c4:	2bff      	cmp	r3, #255	; 0xff
 80064c6:	d010      	beq.n	80064ea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80064d6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064de:	b292      	uxth	r2, r2
 80064e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	22ff      	movs	r2, #255	; 0xff
 80064e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2243      	movs	r2, #67	; 0x43
 8006500:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006502:	4b03      	ldr	r3, [pc, #12]	; (8006510 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	20000094 	.word	0x20000094

08006514 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2243      	movs	r2, #67	; 0x43
 8006520:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006522:	4b03      	ldr	r3, [pc, #12]	; (8006530 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	20000050 	.word	0x20000050

08006534 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2243      	movs	r2, #67	; 0x43
 8006540:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006542:	4b03      	ldr	r3, [pc, #12]	; (8006550 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	200000d8 	.word	0x200000d8

08006554 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	220a      	movs	r2, #10
 8006560:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006562:	4b03      	ldr	r3, [pc, #12]	; (8006570 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	2000000c 	.word	0x2000000c

08006574 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006584:	2303      	movs	r3, #3
 8006586:	e004      	b.n	8006592 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800659e:	b480      	push	{r7}
 80065a0:	b087      	sub	sp, #28
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065b0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065e0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006606:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006608:	2301      	movs	r3, #1
 800660a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006616:	2303      	movs	r3, #3
 8006618:	e01a      	b.n	8006650 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006620:	2b00      	cmp	r3, #0
 8006622:	d114      	bne.n	800664e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2201      	movs	r2, #1
 8006628:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006642:	2181      	movs	r1, #129	; 0x81
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 fdac 	bl	80081a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006666:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006672:	2303      	movs	r3, #3
 8006674:	e016      	b.n	80066a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	7c1b      	ldrb	r3, [r3, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d109      	bne.n	8006692 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006688:	2101      	movs	r1, #1
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 fdaa 	bl	80081e4 <USBD_LL_PrepareReceive>
 8006690:	e007      	b.n	80066a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006698:	2340      	movs	r3, #64	; 0x40
 800669a:	2101      	movs	r1, #1
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 fda1 	bl	80081e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	4613      	mov	r3, r2
 80066b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e025      	b.n	8006710 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	79fa      	ldrb	r2, [r7, #7]
 8006702:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f001 fc17 	bl	8007f38 <USBD_LL_Init>
 800670a:	4603      	mov	r3, r0
 800670c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800670e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800672c:	2303      	movs	r3, #3
 800672e:	e010      	b.n	8006752 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006740:	f107 020e 	add.w	r2, r7, #14
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
 8006748:	4602      	mov	r2, r0
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fc34 	bl	8007fd0 <USBD_LL_Start>
 8006768:	4603      	mov	r3, r0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006794:	2303      	movs	r3, #3
 8006796:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	78fa      	ldrb	r2, [r7, #3]
 80067ac:	4611      	mov	r1, r2
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	4798      	blx	r3
 80067b2:	4603      	mov	r3, r0
 80067b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	4611      	mov	r1, r2
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	4798      	blx	r3
  }

  return USBD_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 ff2c 	bl	8007660 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006816:	461a      	mov	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	2b01      	cmp	r3, #1
 800682a:	d00e      	beq.n	800684a <USBD_LL_SetupStage+0x5a>
 800682c:	2b01      	cmp	r3, #1
 800682e:	d302      	bcc.n	8006836 <USBD_LL_SetupStage+0x46>
 8006830:	2b02      	cmp	r3, #2
 8006832:	d014      	beq.n	800685e <USBD_LL_SetupStage+0x6e>
 8006834:	e01d      	b.n	8006872 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa18 	bl	8006c74 <USBD_StdDevReq>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]
      break;
 8006848:	e020      	b.n	800688c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fa7c 	bl	8006d50 <USBD_StdItfReq>
 8006858:	4603      	mov	r3, r0
 800685a:	73fb      	strb	r3, [r7, #15]
      break;
 800685c:	e016      	b.n	800688c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fab8 	bl	8006ddc <USBD_StdEPReq>
 800686c:	4603      	mov	r3, r0
 800686e:	73fb      	strb	r3, [r7, #15]
      break;
 8006870:	e00c      	b.n	800688c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800687c:	b2db      	uxtb	r3, r3
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 fc05 	bl	8008090 <USBD_LL_StallEP>
 8006886:	4603      	mov	r3, r0
 8006888:	73fb      	strb	r3, [r7, #15]
      break;
 800688a:	bf00      	nop
  }

  return ret;
 800688c:	7bfb      	ldrb	r3, [r7, #15]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	460b      	mov	r3, r1
 80068a0:	607a      	str	r2, [r7, #4]
 80068a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068a4:	7afb      	ldrb	r3, [r7, #11]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d137      	bne.n	800691a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d14a      	bne.n	8006952 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d913      	bls.n	80068f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	1ad2      	subs	r2, r2, r3
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	4293      	cmp	r3, r2
 80068e0:	bf28      	it	cs
 80068e2:	4613      	movcs	r3, r2
 80068e4:	461a      	mov	r2, r3
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 ffad 	bl	8007848 <USBD_CtlContinueRx>
 80068ee:	e030      	b.n	8006952 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00a      	beq.n	8006912 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006902:	2b03      	cmp	r3, #3
 8006904:	d105      	bne.n	8006912 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 ffa9 	bl	800786a <USBD_CtlSendStatus>
 8006918:	e01b      	b.n	8006952 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d013      	beq.n	800694e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800692c:	2b03      	cmp	r3, #3
 800692e:	d10e      	bne.n	800694e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	7afa      	ldrb	r2, [r7, #11]
 800693a:	4611      	mov	r1, r2
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	4798      	blx	r3
 8006940:	4603      	mov	r3, r0
 8006942:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	e002      	b.n	8006954 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800694e:	2303      	movs	r3, #3
 8006950:	e000      	b.n	8006954 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	460b      	mov	r3, r1
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800696a:	7afb      	ldrb	r3, [r7, #11]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d16a      	bne.n	8006a46 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3314      	adds	r3, #20
 8006974:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800697c:	2b02      	cmp	r3, #2
 800697e:	d155      	bne.n	8006a2c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	429a      	cmp	r2, r3
 800698a:	d914      	bls.n	80069b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	1ad2      	subs	r2, r2, r3
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	461a      	mov	r2, r3
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 ff22 	bl	80077ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069a8:	2300      	movs	r3, #0
 80069aa:	2200      	movs	r2, #0
 80069ac:	2100      	movs	r1, #0
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f001 fc18 	bl	80081e4 <USBD_LL_PrepareReceive>
 80069b4:	e03a      	b.n	8006a2c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d11c      	bne.n	80069fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d316      	bcc.n	80069fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80069d8:	429a      	cmp	r2, r3
 80069da:	d20f      	bcs.n	80069fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80069dc:	2200      	movs	r2, #0
 80069de:	2100      	movs	r1, #0
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 ff03 	bl	80077ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069ee:	2300      	movs	r3, #0
 80069f0:	2200      	movs	r2, #0
 80069f2:	2100      	movs	r1, #0
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f001 fbf5 	bl	80081e4 <USBD_LL_PrepareReceive>
 80069fa:	e017      	b.n	8006a2c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d105      	bne.n	8006a1e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a1e:	2180      	movs	r1, #128	; 0x80
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f001 fb35 	bl	8008090 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 ff32 	bl	8007890 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d123      	bne.n	8006a7e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f7ff fe9b 	bl	8006772 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a44:	e01b      	b.n	8006a7e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d013      	beq.n	8006a7a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d10e      	bne.n	8006a7a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	7afa      	ldrb	r2, [r7, #11]
 8006a66:	4611      	mov	r1, r2
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	4798      	blx	r3
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	e002      	b.n	8006a80 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e000      	b.n	8006a80 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d009      	beq.n	8006acc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6852      	ldr	r2, [r2, #4]
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006acc:	2340      	movs	r3, #64	; 0x40
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fa97 	bl	8008006 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2240      	movs	r2, #64	; 0x40
 8006ae4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	2200      	movs	r2, #0
 8006aec:	2180      	movs	r1, #128	; 0x80
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fa89 	bl	8008006 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2240      	movs	r2, #64	; 0x40
 8006afe:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	78fa      	ldrb	r2, [r7, #3]
 8006b1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2204      	movs	r2, #4
 8006b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d105      	bne.n	8006b72 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d10b      	bne.n	8006baa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d009      	beq.n	8006c2c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6852      	ldr	r2, [r2, #4]
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	4611      	mov	r1, r2
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
  }

  return USBD_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b087      	sub	sp, #28
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c54:	8a3b      	ldrh	r3, [r7, #16]
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	b21a      	sxth	r2, r3
 8006c5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	b21b      	sxth	r3, r3
 8006c62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c64:	89fb      	ldrh	r3, [r7, #14]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
	...

08006c74 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d004      	beq.n	8006c98 <USBD_StdDevReq+0x24>
 8006c8e:	2b40      	cmp	r3, #64	; 0x40
 8006c90:	d002      	beq.n	8006c98 <USBD_StdDevReq+0x24>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <USBD_StdDevReq+0x38>
 8006c96:	e050      	b.n	8006d3a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8006caa:	e04b      	b.n	8006d44 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2b09      	cmp	r3, #9
 8006cb2:	d83c      	bhi.n	8006d2e <USBD_StdDevReq+0xba>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <USBD_StdDevReq+0x48>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006d11 	.word	0x08006d11
 8006cc0:	08006d25 	.word	0x08006d25
 8006cc4:	08006d2f 	.word	0x08006d2f
 8006cc8:	08006d1b 	.word	0x08006d1b
 8006ccc:	08006d2f 	.word	0x08006d2f
 8006cd0:	08006cef 	.word	0x08006cef
 8006cd4:	08006ce5 	.word	0x08006ce5
 8006cd8:	08006d2f 	.word	0x08006d2f
 8006cdc:	08006d07 	.word	0x08006d07
 8006ce0:	08006cf9 	.word	0x08006cf9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f9ce 	bl	8007088 <USBD_GetDescriptor>
      break;
 8006cec:	e024      	b.n	8006d38 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fb33 	bl	800735c <USBD_SetAddress>
      break;
 8006cf6:	e01f      	b.n	8006d38 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fb70 	bl	80073e0 <USBD_SetConfig>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
      break;
 8006d04:	e018      	b.n	8006d38 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fc0d 	bl	8007528 <USBD_GetConfig>
      break;
 8006d0e:	e013      	b.n	8006d38 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fc3c 	bl	8007590 <USBD_GetStatus>
      break;
 8006d18:	e00e      	b.n	8006d38 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fc6a 	bl	80075f6 <USBD_SetFeature>
      break;
 8006d22:	e009      	b.n	8006d38 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fc79 	bl	800761e <USBD_ClrFeature>
      break;
 8006d2c:	e004      	b.n	8006d38 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fccf 	bl	80076d4 <USBD_CtlError>
      break;
 8006d36:	bf00      	nop
    }
    break;
 8006d38:	e004      	b.n	8006d44 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fcc9 	bl	80076d4 <USBD_CtlError>
    break;
 8006d42:	bf00      	nop
  }

  return ret;
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop

08006d50 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d003      	beq.n	8006d72 <USBD_StdItfReq+0x22>
 8006d6a:	2b40      	cmp	r3, #64	; 0x40
 8006d6c:	d001      	beq.n	8006d72 <USBD_StdItfReq+0x22>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d12a      	bne.n	8006dc8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d81d      	bhi.n	8006dba <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	889b      	ldrh	r3, [r3, #4]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d813      	bhi.n	8006db0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
 8006d96:	4603      	mov	r3, r0
 8006d98:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	88db      	ldrh	r3, [r3, #6]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d110      	bne.n	8006dc4 <USBD_StdItfReq+0x74>
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10d      	bne.n	8006dc4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fd5e 	bl	800786a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006dae:	e009      	b.n	8006dc4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fc8e 	bl	80076d4 <USBD_CtlError>
      break;
 8006db8:	e004      	b.n	8006dc4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fc89 	bl	80076d4 <USBD_CtlError>
      break;
 8006dc2:	e000      	b.n	8006dc6 <USBD_StdItfReq+0x76>
      break;
 8006dc4:	bf00      	nop
    }
    break;
 8006dc6:	e004      	b.n	8006dd2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fc82 	bl	80076d4 <USBD_CtlError>
    break;
 8006dd0:	bf00      	nop
  }

  return ret;
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	889b      	ldrh	r3, [r3, #4]
 8006dee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d004      	beq.n	8006e06 <USBD_StdEPReq+0x2a>
 8006dfc:	2b40      	cmp	r3, #64	; 0x40
 8006dfe:	d002      	beq.n	8006e06 <USBD_StdEPReq+0x2a>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <USBD_StdEPReq+0x3e>
 8006e04:	e135      	b.n	8007072 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	4798      	blx	r3
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]
    break;
 8006e18:	e130      	b.n	800707c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d03e      	beq.n	8006ea0 <USBD_StdEPReq+0xc4>
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d002      	beq.n	8006e2c <USBD_StdEPReq+0x50>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d077      	beq.n	8006f1a <USBD_StdEPReq+0x13e>
 8006e2a:	e11c      	b.n	8007066 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d002      	beq.n	8006e3c <USBD_StdEPReq+0x60>
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d015      	beq.n	8006e66 <USBD_StdEPReq+0x8a>
 8006e3a:	e02b      	b.n	8006e94 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00c      	beq.n	8006e5c <USBD_StdEPReq+0x80>
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	2b80      	cmp	r3, #128	; 0x80
 8006e46:	d009      	beq.n	8006e5c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 f91f 	bl	8008090 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e52:	2180      	movs	r1, #128	; 0x80
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 f91b 	bl	8008090 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e5a:	e020      	b.n	8006e9e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fc38 	bl	80076d4 <USBD_CtlError>
        break;
 8006e64:	e01b      	b.n	8006e9e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	885b      	ldrh	r3, [r3, #2]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10e      	bne.n	8006e8c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <USBD_StdEPReq+0xb0>
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b80      	cmp	r3, #128	; 0x80
 8006e78:	d008      	beq.n	8006e8c <USBD_StdEPReq+0xb0>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	88db      	ldrh	r3, [r3, #6]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d104      	bne.n	8006e8c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 f902 	bl	8008090 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fcec 	bl	800786a <USBD_CtlSendStatus>

        break;
 8006e92:	e004      	b.n	8006e9e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fc1c 	bl	80076d4 <USBD_CtlError>
        break;
 8006e9c:	bf00      	nop
      }
      break;
 8006e9e:	e0e7      	b.n	8007070 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d002      	beq.n	8006eb0 <USBD_StdEPReq+0xd4>
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d015      	beq.n	8006eda <USBD_StdEPReq+0xfe>
 8006eae:	e02d      	b.n	8006f0c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00c      	beq.n	8006ed0 <USBD_StdEPReq+0xf4>
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	2b80      	cmp	r3, #128	; 0x80
 8006eba:	d009      	beq.n	8006ed0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 f8e5 	bl	8008090 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ec6:	2180      	movs	r1, #128	; 0x80
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 f8e1 	bl	8008090 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006ece:	e023      	b.n	8006f18 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fbfe 	bl	80076d4 <USBD_CtlError>
        break;
 8006ed8:	e01e      	b.n	8006f18 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	885b      	ldrh	r3, [r3, #2]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d119      	bne.n	8006f16 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 f8ec 	bl	80080ce <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fcb7 	bl	800786a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	4798      	blx	r3
        }
        break;
 8006f0a:	e004      	b.n	8006f16 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fbe0 	bl	80076d4 <USBD_CtlError>
        break;
 8006f14:	e000      	b.n	8006f18 <USBD_StdEPReq+0x13c>
        break;
 8006f16:	bf00      	nop
      }
      break;
 8006f18:	e0aa      	b.n	8007070 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d002      	beq.n	8006f2a <USBD_StdEPReq+0x14e>
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d032      	beq.n	8006f8e <USBD_StdEPReq+0x1b2>
 8006f28:	e097      	b.n	800705a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d007      	beq.n	8006f40 <USBD_StdEPReq+0x164>
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	2b80      	cmp	r3, #128	; 0x80
 8006f34:	d004      	beq.n	8006f40 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fbcb 	bl	80076d4 <USBD_CtlError>
          break;
 8006f3e:	e091      	b.n	8007064 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	da0b      	bge.n	8006f60 <USBD_StdEPReq+0x184>
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	3310      	adds	r3, #16
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	e00b      	b.n	8006f78 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f66:	4613      	mov	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	4413      	add	r3, r2
 8006f76:	3304      	adds	r3, #4
 8006f78:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2202      	movs	r2, #2
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fc15 	bl	80077b6 <USBD_CtlSendData>
        break;
 8006f8c:	e06a      	b.n	8007064 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006f8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	da11      	bge.n	8006fba <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	f003 020f 	and.w	r2, r3, #15
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	3324      	adds	r3, #36	; 0x24
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d117      	bne.n	8006fe0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fb8e 	bl	80076d4 <USBD_CtlError>
            break;
 8006fb8:	e054      	b.n	8007064 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006fba:	7bbb      	ldrb	r3, [r7, #14]
 8006fbc:	f003 020f 	and.w	r2, r3, #15
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d104      	bne.n	8006fe0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fb7b 	bl	80076d4 <USBD_CtlError>
            break;
 8006fde:	e041      	b.n	8007064 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	da0b      	bge.n	8007000 <USBD_StdEPReq+0x224>
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	3310      	adds	r3, #16
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	e00b      	b.n	8007018 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	4413      	add	r3, r2
 8007016:	3304      	adds	r3, #4
 8007018:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800701a:	7bbb      	ldrb	r3, [r7, #14]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <USBD_StdEPReq+0x24a>
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	2b80      	cmp	r3, #128	; 0x80
 8007024:	d103      	bne.n	800702e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	e00e      	b.n	800704c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800702e:	7bbb      	ldrb	r3, [r7, #14]
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f001 f86a 	bl	800810c <USBD_LL_IsStallEP>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2201      	movs	r2, #1
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e002      	b.n	800704c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2202      	movs	r2, #2
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fbaf 	bl	80077b6 <USBD_CtlSendData>
          break;
 8007058:	e004      	b.n	8007064 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fb39 	bl	80076d4 <USBD_CtlError>
        break;
 8007062:	bf00      	nop
      }
      break;
 8007064:	e004      	b.n	8007070 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fb33 	bl	80076d4 <USBD_CtlError>
      break;
 800706e:	bf00      	nop
    }
    break;
 8007070:	e004      	b.n	800707c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fb2d 	bl	80076d4 <USBD_CtlError>
    break;
 800707a:	bf00      	nop
  }

  return ret;
 800707c:	7bfb      	ldrb	r3, [r7, #15]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	885b      	ldrh	r3, [r3, #2]
 80070a2:	0a1b      	lsrs	r3, r3, #8
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	3b01      	subs	r3, #1
 80070a8:	2b06      	cmp	r3, #6
 80070aa:	f200 8128 	bhi.w	80072fe <USBD_GetDescriptor+0x276>
 80070ae:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <USBD_GetDescriptor+0x2c>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	080070d1 	.word	0x080070d1
 80070b8:	080070e9 	.word	0x080070e9
 80070bc:	08007129 	.word	0x08007129
 80070c0:	080072ff 	.word	0x080072ff
 80070c4:	080072ff 	.word	0x080072ff
 80070c8:	0800729f 	.word	0x0800729f
 80070cc:	080072cb 	.word	0x080072cb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	7c12      	ldrb	r2, [r2, #16]
 80070dc:	f107 0108 	add.w	r1, r7, #8
 80070e0:	4610      	mov	r0, r2
 80070e2:	4798      	blx	r3
 80070e4:	60f8      	str	r0, [r7, #12]
    break;
 80070e6:	e112      	b.n	800730e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	7c1b      	ldrb	r3, [r3, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10d      	bne.n	800710c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	f107 0208 	add.w	r2, r7, #8
 80070fc:	4610      	mov	r0, r2
 80070fe:	4798      	blx	r3
 8007100:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3301      	adds	r3, #1
 8007106:	2202      	movs	r2, #2
 8007108:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800710a:	e100      	b.n	800730e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	f107 0208 	add.w	r2, r7, #8
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
 800711c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	2202      	movs	r2, #2
 8007124:	701a      	strb	r2, [r3, #0]
    break;
 8007126:	e0f2      	b.n	800730e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	885b      	ldrh	r3, [r3, #2]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b05      	cmp	r3, #5
 8007130:	f200 80ac 	bhi.w	800728c <USBD_GetDescriptor+0x204>
 8007134:	a201      	add	r2, pc, #4	; (adr r2, 800713c <USBD_GetDescriptor+0xb4>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	08007155 	.word	0x08007155
 8007140:	08007189 	.word	0x08007189
 8007144:	080071bd 	.word	0x080071bd
 8007148:	080071f1 	.word	0x080071f1
 800714c:	08007225 	.word	0x08007225
 8007150:	08007259 	.word	0x08007259
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00b      	beq.n	8007178 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	7c12      	ldrb	r2, [r2, #16]
 800716c:	f107 0108 	add.w	r1, r7, #8
 8007170:	4610      	mov	r0, r2
 8007172:	4798      	blx	r3
 8007174:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007176:	e091      	b.n	800729c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 faaa 	bl	80076d4 <USBD_CtlError>
        err++;
 8007180:	7afb      	ldrb	r3, [r7, #11]
 8007182:	3301      	adds	r3, #1
 8007184:	72fb      	strb	r3, [r7, #11]
      break;
 8007186:	e089      	b.n	800729c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	7c12      	ldrb	r2, [r2, #16]
 80071a0:	f107 0108 	add.w	r1, r7, #8
 80071a4:	4610      	mov	r0, r2
 80071a6:	4798      	blx	r3
 80071a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071aa:	e077      	b.n	800729c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa90 	bl	80076d4 <USBD_CtlError>
        err++;
 80071b4:	7afb      	ldrb	r3, [r7, #11]
 80071b6:	3301      	adds	r3, #1
 80071b8:	72fb      	strb	r3, [r7, #11]
      break;
 80071ba:	e06f      	b.n	800729c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00b      	beq.n	80071e0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	7c12      	ldrb	r2, [r2, #16]
 80071d4:	f107 0108 	add.w	r1, r7, #8
 80071d8:	4610      	mov	r0, r2
 80071da:	4798      	blx	r3
 80071dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071de:	e05d      	b.n	800729c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa76 	bl	80076d4 <USBD_CtlError>
        err++;
 80071e8:	7afb      	ldrb	r3, [r7, #11]
 80071ea:	3301      	adds	r3, #1
 80071ec:	72fb      	strb	r3, [r7, #11]
      break;
 80071ee:	e055      	b.n	800729c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	7c12      	ldrb	r2, [r2, #16]
 8007208:	f107 0108 	add.w	r1, r7, #8
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
 8007210:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007212:	e043      	b.n	800729c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa5c 	bl	80076d4 <USBD_CtlError>
        err++;
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	3301      	adds	r3, #1
 8007220:	72fb      	strb	r3, [r7, #11]
      break;
 8007222:	e03b      	b.n	800729c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	7c12      	ldrb	r2, [r2, #16]
 800723c:	f107 0108 	add.w	r1, r7, #8
 8007240:	4610      	mov	r0, r2
 8007242:	4798      	blx	r3
 8007244:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007246:	e029      	b.n	800729c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa42 	bl	80076d4 <USBD_CtlError>
        err++;
 8007250:	7afb      	ldrb	r3, [r7, #11]
 8007252:	3301      	adds	r3, #1
 8007254:	72fb      	strb	r3, [r7, #11]
      break;
 8007256:	e021      	b.n	800729c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00b      	beq.n	800727c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	7c12      	ldrb	r2, [r2, #16]
 8007270:	f107 0108 	add.w	r1, r7, #8
 8007274:	4610      	mov	r0, r2
 8007276:	4798      	blx	r3
 8007278:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800727a:	e00f      	b.n	800729c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fa28 	bl	80076d4 <USBD_CtlError>
        err++;
 8007284:	7afb      	ldrb	r3, [r7, #11]
 8007286:	3301      	adds	r3, #1
 8007288:	72fb      	strb	r3, [r7, #11]
      break;
 800728a:	e007      	b.n	800729c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa20 	bl	80076d4 <USBD_CtlError>
      err++;
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	3301      	adds	r3, #1
 8007298:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800729a:	bf00      	nop
    }
    break;
 800729c:	e037      	b.n	800730e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	7c1b      	ldrb	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ae:	f107 0208 	add.w	r2, r7, #8
 80072b2:	4610      	mov	r0, r2
 80072b4:	4798      	blx	r3
 80072b6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80072b8:	e029      	b.n	800730e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fa09 	bl	80076d4 <USBD_CtlError>
      err++;
 80072c2:	7afb      	ldrb	r3, [r7, #11]
 80072c4:	3301      	adds	r3, #1
 80072c6:	72fb      	strb	r3, [r7, #11]
    break;
 80072c8:	e021      	b.n	800730e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	7c1b      	ldrb	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10d      	bne.n	80072ee <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	f107 0208 	add.w	r2, r7, #8
 80072de:	4610      	mov	r0, r2
 80072e0:	4798      	blx	r3
 80072e2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3301      	adds	r3, #1
 80072e8:	2207      	movs	r2, #7
 80072ea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80072ec:	e00f      	b.n	800730e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f9ef 	bl	80076d4 <USBD_CtlError>
      err++;
 80072f6:	7afb      	ldrb	r3, [r7, #11]
 80072f8:	3301      	adds	r3, #1
 80072fa:	72fb      	strb	r3, [r7, #11]
    break;
 80072fc:	e007      	b.n	800730e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f9e7 	bl	80076d4 <USBD_CtlError>
    err++;
 8007306:	7afb      	ldrb	r3, [r7, #11]
 8007308:	3301      	adds	r3, #1
 800730a:	72fb      	strb	r3, [r7, #11]
    break;
 800730c:	bf00      	nop
  }

  if (err != 0U)
 800730e:	7afb      	ldrb	r3, [r7, #11]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d11e      	bne.n	8007352 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	88db      	ldrh	r3, [r3, #6]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d016      	beq.n	800734a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800731c:	893b      	ldrh	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00e      	beq.n	8007340 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	88da      	ldrh	r2, [r3, #6]
 8007326:	893b      	ldrh	r3, [r7, #8]
 8007328:	4293      	cmp	r3, r2
 800732a:	bf28      	it	cs
 800732c:	4613      	movcs	r3, r2
 800732e:	b29b      	uxth	r3, r3
 8007330:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007332:	893b      	ldrh	r3, [r7, #8]
 8007334:	461a      	mov	r2, r3
 8007336:	68f9      	ldr	r1, [r7, #12]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fa3c 	bl	80077b6 <USBD_CtlSendData>
 800733e:	e009      	b.n	8007354 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f9c6 	bl	80076d4 <USBD_CtlError>
 8007348:	e004      	b.n	8007354 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fa8d 	bl	800786a <USBD_CtlSendStatus>
 8007350:	e000      	b.n	8007354 <USBD_GetDescriptor+0x2cc>
    return;
 8007352:	bf00      	nop
    }
  }
}
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop

0800735c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	889b      	ldrh	r3, [r3, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d130      	bne.n	80073d0 <USBD_SetAddress+0x74>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	88db      	ldrh	r3, [r3, #6]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d12c      	bne.n	80073d0 <USBD_SetAddress+0x74>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	885b      	ldrh	r3, [r3, #2]
 800737a:	2b7f      	cmp	r3, #127	; 0x7f
 800737c:	d828      	bhi.n	80073d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	885b      	ldrh	r3, [r3, #2]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007388:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007390:	2b03      	cmp	r3, #3
 8007392:	d104      	bne.n	800739e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f99c 	bl	80076d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739c:	e01c      	b.n	80073d8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	7bfa      	ldrb	r2, [r7, #15]
 80073a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 feda 	bl	8008164 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fa5a 	bl	800786a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c4:	e008      	b.n	80073d8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ce:	e003      	b.n	80073d8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f97e 	bl	80076d4 <USBD_CtlError>
  }
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	885b      	ldrh	r3, [r3, #2]
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	4b4b      	ldr	r3, [pc, #300]	; (8007524 <USBD_SetConfig+0x144>)
 80073f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073f8:	4b4a      	ldr	r3, [pc, #296]	; (8007524 <USBD_SetConfig+0x144>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d905      	bls.n	800740c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f966 	bl	80076d4 <USBD_CtlError>
    return USBD_FAIL;
 8007408:	2303      	movs	r3, #3
 800740a:	e087      	b.n	800751c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007412:	2b02      	cmp	r3, #2
 8007414:	d002      	beq.n	800741c <USBD_SetConfig+0x3c>
 8007416:	2b03      	cmp	r3, #3
 8007418:	d025      	beq.n	8007466 <USBD_SetConfig+0x86>
 800741a:	e071      	b.n	8007500 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800741c:	4b41      	ldr	r3, [pc, #260]	; (8007524 <USBD_SetConfig+0x144>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01c      	beq.n	800745e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007424:	4b3f      	ldr	r3, [pc, #252]	; (8007524 <USBD_SetConfig+0x144>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800742e:	4b3d      	ldr	r3, [pc, #244]	; (8007524 <USBD_SetConfig+0x144>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff f9a7 	bl	8006788 <USBD_SetClassConfig>
 800743a:	4603      	mov	r3, r0
 800743c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d004      	beq.n	800744e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f944 	bl	80076d4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800744c:	e065      	b.n	800751a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa0b 	bl	800786a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2203      	movs	r2, #3
 8007458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800745c:	e05d      	b.n	800751a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fa03 	bl	800786a <USBD_CtlSendStatus>
    break;
 8007464:	e059      	b.n	800751a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007466:	4b2f      	ldr	r3, [pc, #188]	; (8007524 <USBD_SetConfig+0x144>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d112      	bne.n	8007494 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2202      	movs	r2, #2
 8007472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007476:	4b2b      	ldr	r3, [pc, #172]	; (8007524 <USBD_SetConfig+0x144>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007480:	4b28      	ldr	r3, [pc, #160]	; (8007524 <USBD_SetConfig+0x144>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff f99a 	bl	80067c0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f9ec 	bl	800786a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007492:	e042      	b.n	800751a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007494:	4b23      	ldr	r3, [pc, #140]	; (8007524 <USBD_SetConfig+0x144>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	461a      	mov	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d02a      	beq.n	80074f8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff f988 	bl	80067c0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80074b0:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <USBD_SetConfig+0x144>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80074ba:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <USBD_SetConfig+0x144>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff f961 	bl	8006788 <USBD_SetClassConfig>
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00f      	beq.n	80074f0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f8fe 	bl	80076d4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff f96d 	bl	80067c0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2202      	movs	r2, #2
 80074ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80074ee:	e014      	b.n	800751a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f9ba 	bl	800786a <USBD_CtlSendStatus>
    break;
 80074f6:	e010      	b.n	800751a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f9b6 	bl	800786a <USBD_CtlSendStatus>
    break;
 80074fe:	e00c      	b.n	800751a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f8e6 	bl	80076d4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007508:	4b06      	ldr	r3, [pc, #24]	; (8007524 <USBD_SetConfig+0x144>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff f956 	bl	80067c0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007514:	2303      	movs	r3, #3
 8007516:	73fb      	strb	r3, [r7, #15]
    break;
 8007518:	bf00      	nop
  }

  return ret;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	20000230 	.word	0x20000230

08007528 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	88db      	ldrh	r3, [r3, #6]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d004      	beq.n	8007544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f8c9 	bl	80076d4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007542:	e021      	b.n	8007588 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754a:	2b01      	cmp	r3, #1
 800754c:	db17      	blt.n	800757e <USBD_GetConfig+0x56>
 800754e:	2b02      	cmp	r3, #2
 8007550:	dd02      	ble.n	8007558 <USBD_GetConfig+0x30>
 8007552:	2b03      	cmp	r3, #3
 8007554:	d00b      	beq.n	800756e <USBD_GetConfig+0x46>
 8007556:	e012      	b.n	800757e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	3308      	adds	r3, #8
 8007562:	2201      	movs	r2, #1
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f925 	bl	80077b6 <USBD_CtlSendData>
      break;
 800756c:	e00c      	b.n	8007588 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3304      	adds	r3, #4
 8007572:	2201      	movs	r2, #1
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f91d 	bl	80077b6 <USBD_CtlSendData>
      break;
 800757c:	e004      	b.n	8007588 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f8a7 	bl	80076d4 <USBD_CtlError>
      break;
 8007586:	bf00      	nop
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a0:	3b01      	subs	r3, #1
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d81e      	bhi.n	80075e4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	88db      	ldrh	r3, [r3, #6]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d004      	beq.n	80075b8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f88f 	bl	80076d4 <USBD_CtlError>
      break;
 80075b6:	e01a      	b.n	80075ee <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d005      	beq.n	80075d4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f043 0202 	orr.w	r2, r3, #2
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	330c      	adds	r3, #12
 80075d8:	2202      	movs	r2, #2
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f8ea 	bl	80077b6 <USBD_CtlSendData>
    break;
 80075e2:	e004      	b.n	80075ee <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f874 	bl	80076d4 <USBD_CtlError>
    break;
 80075ec:	bf00      	nop
  }
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	885b      	ldrh	r3, [r3, #2]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d106      	bne.n	8007616 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f92a 	bl	800786a <USBD_CtlSendStatus>
  }
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762e:	3b01      	subs	r3, #1
 8007630:	2b02      	cmp	r3, #2
 8007632:	d80b      	bhi.n	800764c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	885b      	ldrh	r3, [r3, #2]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d10c      	bne.n	8007656 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f910 	bl	800786a <USBD_CtlSendStatus>
      }
      break;
 800764a:	e004      	b.n	8007656 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f840 	bl	80076d4 <USBD_CtlError>
      break;
 8007654:	e000      	b.n	8007658 <USBD_ClrFeature+0x3a>
      break;
 8007656:	bf00      	nop
  }
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	781a      	ldrb	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	781a      	ldrb	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	3301      	adds	r3, #1
 8007688:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f7ff fad3 	bl	8006c36 <SWAPBYTE>
 8007690:	4603      	mov	r3, r0
 8007692:	461a      	mov	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3301      	adds	r3, #1
 800769c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3301      	adds	r3, #1
 80076a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff fac6 	bl	8006c36 <SWAPBYTE>
 80076aa:	4603      	mov	r3, r0
 80076ac:	461a      	mov	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7ff fab9 	bl	8006c36 <SWAPBYTE>
 80076c4:	4603      	mov	r3, r0
 80076c6:	461a      	mov	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	80da      	strh	r2, [r3, #6]
}
 80076cc:	bf00      	nop
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076de:	2180      	movs	r1, #128	; 0x80
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fcd5 	bl	8008090 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076e6:	2100      	movs	r1, #0
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fcd1 	bl	8008090 <USBD_LL_StallEP>
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b086      	sub	sp, #24
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	60b9      	str	r1, [r7, #8]
 8007700:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d036      	beq.n	800777a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007710:	6938      	ldr	r0, [r7, #16]
 8007712:	f000 f836 	bl	8007782 <USBD_GetLen>
 8007716:	4603      	mov	r3, r0
 8007718:	3301      	adds	r3, #1
 800771a:	b29b      	uxth	r3, r3
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	4413      	add	r3, r2
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	7812      	ldrb	r2, [r2, #0]
 800772e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	3301      	adds	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	4413      	add	r3, r2
 800773c:	2203      	movs	r2, #3
 800773e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007740:	7dfb      	ldrb	r3, [r7, #23]
 8007742:	3301      	adds	r3, #1
 8007744:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007746:	e013      	b.n	8007770 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007748:	7dfb      	ldrb	r3, [r7, #23]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4413      	add	r3, r2
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	7812      	ldrb	r2, [r2, #0]
 8007752:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	3301      	adds	r3, #1
 8007758:	613b      	str	r3, [r7, #16]
    idx++;
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	3301      	adds	r3, #1
 800775e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	4413      	add	r3, r2
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
    idx++;
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	3301      	adds	r3, #1
 800776e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e7      	bne.n	8007748 <USBD_GetString+0x52>
 8007778:	e000      	b.n	800777c <USBD_GetString+0x86>
    return;
 800777a:	bf00      	nop
  }
}
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007792:	e005      	b.n	80077a0 <USBD_GetLen+0x1e>
  {
    len++;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	3301      	adds	r3, #1
 8007798:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	3301      	adds	r3, #1
 800779e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1f5      	bne.n	8007794 <USBD_GetLen+0x12>
  }

  return len;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2202      	movs	r2, #2
 80077c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	2100      	movs	r1, #0
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f000 fce0 	bl	80081a2 <USBD_LL_Transmit>

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	2100      	movs	r1, #0
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 fccf 	bl	80081a2 <USBD_LL_Transmit>

  return USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2203      	movs	r2, #3
 800781e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	2100      	movs	r1, #0
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fcd3 	bl	80081e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	2100      	movs	r1, #0
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 fcc2 	bl	80081e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2204      	movs	r2, #4
 8007876:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800787a:	2300      	movs	r3, #0
 800787c:	2200      	movs	r2, #0
 800787e:	2100      	movs	r1, #0
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fc8e 	bl	80081a2 <USBD_LL_Transmit>

  return USBD_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2205      	movs	r2, #5
 800789c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078a0:	2300      	movs	r3, #0
 80078a2:	2200      	movs	r2, #0
 80078a4:	2100      	movs	r1, #0
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fc9c 	bl	80081e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078bc:	2200      	movs	r2, #0
 80078be:	4912      	ldr	r1, [pc, #72]	; (8007908 <MX_USB_DEVICE_Init+0x50>)
 80078c0:	4812      	ldr	r0, [pc, #72]	; (800790c <MX_USB_DEVICE_Init+0x54>)
 80078c2:	f7fe fef3 	bl	80066ac <USBD_Init>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078cc:	f7f9 f8e8 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078d0:	490f      	ldr	r1, [pc, #60]	; (8007910 <MX_USB_DEVICE_Init+0x58>)
 80078d2:	480e      	ldr	r0, [pc, #56]	; (800790c <MX_USB_DEVICE_Init+0x54>)
 80078d4:	f7fe ff20 	bl	8006718 <USBD_RegisterClass>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078de:	f7f9 f8df 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078e2:	490c      	ldr	r1, [pc, #48]	; (8007914 <MX_USB_DEVICE_Init+0x5c>)
 80078e4:	4809      	ldr	r0, [pc, #36]	; (800790c <MX_USB_DEVICE_Init+0x54>)
 80078e6:	f7fe fe45 	bl	8006574 <USBD_CDC_RegisterInterface>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078f0:	f7f9 f8d6 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078f4:	4805      	ldr	r0, [pc, #20]	; (800790c <MX_USB_DEVICE_Init+0x54>)
 80078f6:	f7fe ff30 	bl	800675a <USBD_Start>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007900:	f7f9 f8ce 	bl	8000aa0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007904:	bf00      	nop
 8007906:	bd80      	pop	{r7, pc}
 8007908:	20000130 	.word	0x20000130
 800790c:	20000328 	.word	0x20000328
 8007910:	20000018 	.word	0x20000018
 8007914:	2000011c 	.word	0x2000011c

08007918 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800791c:	2200      	movs	r2, #0
 800791e:	4905      	ldr	r1, [pc, #20]	; (8007934 <CDC_Init_FS+0x1c>)
 8007920:	4805      	ldr	r0, [pc, #20]	; (8007938 <CDC_Init_FS+0x20>)
 8007922:	f7fe fe3c 	bl	800659e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007926:	4905      	ldr	r1, [pc, #20]	; (800793c <CDC_Init_FS+0x24>)
 8007928:	4803      	ldr	r0, [pc, #12]	; (8007938 <CDC_Init_FS+0x20>)
 800792a:	f7fe fe51 	bl	80065d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800792e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007930:	4618      	mov	r0, r3
 8007932:	bd80      	pop	{r7, pc}
 8007934:	200009e0 	.word	0x200009e0
 8007938:	20000328 	.word	0x20000328
 800793c:	200005f8 	.word	0x200005f8

08007940 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007944:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007946:	4618      	mov	r0, r3
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	4603      	mov	r3, r0
 8007958:	6039      	str	r1, [r7, #0]
 800795a:	71fb      	strb	r3, [r7, #7]
 800795c:	4613      	mov	r3, r2
 800795e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	2b23      	cmp	r3, #35	; 0x23
 8007964:	d84a      	bhi.n	80079fc <CDC_Control_FS+0xac>
 8007966:	a201      	add	r2, pc, #4	; (adr r2, 800796c <CDC_Control_FS+0x1c>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	080079fd 	.word	0x080079fd
 8007970:	080079fd 	.word	0x080079fd
 8007974:	080079fd 	.word	0x080079fd
 8007978:	080079fd 	.word	0x080079fd
 800797c:	080079fd 	.word	0x080079fd
 8007980:	080079fd 	.word	0x080079fd
 8007984:	080079fd 	.word	0x080079fd
 8007988:	080079fd 	.word	0x080079fd
 800798c:	080079fd 	.word	0x080079fd
 8007990:	080079fd 	.word	0x080079fd
 8007994:	080079fd 	.word	0x080079fd
 8007998:	080079fd 	.word	0x080079fd
 800799c:	080079fd 	.word	0x080079fd
 80079a0:	080079fd 	.word	0x080079fd
 80079a4:	080079fd 	.word	0x080079fd
 80079a8:	080079fd 	.word	0x080079fd
 80079ac:	080079fd 	.word	0x080079fd
 80079b0:	080079fd 	.word	0x080079fd
 80079b4:	080079fd 	.word	0x080079fd
 80079b8:	080079fd 	.word	0x080079fd
 80079bc:	080079fd 	.word	0x080079fd
 80079c0:	080079fd 	.word	0x080079fd
 80079c4:	080079fd 	.word	0x080079fd
 80079c8:	080079fd 	.word	0x080079fd
 80079cc:	080079fd 	.word	0x080079fd
 80079d0:	080079fd 	.word	0x080079fd
 80079d4:	080079fd 	.word	0x080079fd
 80079d8:	080079fd 	.word	0x080079fd
 80079dc:	080079fd 	.word	0x080079fd
 80079e0:	080079fd 	.word	0x080079fd
 80079e4:	080079fd 	.word	0x080079fd
 80079e8:	080079fd 	.word	0x080079fd
 80079ec:	080079fd 	.word	0x080079fd
 80079f0:	080079fd 	.word	0x080079fd
 80079f4:	080079fd 	.word	0x080079fd
 80079f8:	080079fd 	.word	0x080079fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079fc:	bf00      	nop
  }

  return (USBD_OK);
 80079fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	4805      	ldr	r0, [pc, #20]	; (8007a30 <CDC_Receive_FS+0x24>)
 8007a1a:	f7fe fdd9 	bl	80065d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a1e:	4804      	ldr	r0, [pc, #16]	; (8007a30 <CDC_Receive_FS+0x24>)
 8007a20:	f7fe fe1a 	bl	8006658 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000328 	.word	0x20000328

08007a34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a44:	4b0d      	ldr	r3, [pc, #52]	; (8007a7c <CDC_Transmit_FS+0x48>)
 8007a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e00b      	b.n	8007a72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a5a:	887b      	ldrh	r3, [r7, #2]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	4806      	ldr	r0, [pc, #24]	; (8007a7c <CDC_Transmit_FS+0x48>)
 8007a62:	f7fe fd9c 	bl	800659e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a66:	4805      	ldr	r0, [pc, #20]	; (8007a7c <CDC_Transmit_FS+0x48>)
 8007a68:	f7fe fdc6 	bl	80065f8 <USBD_CDC_TransmitPacket>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000328 	.word	0x20000328

08007a80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	4603      	mov	r3, r0
 8007aac:	6039      	str	r1, [r7, #0]
 8007aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2212      	movs	r2, #18
 8007ab4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ab6:	4b03      	ldr	r3, [pc, #12]	; (8007ac4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	2000014c 	.word	0x2000014c

08007ac8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	6039      	str	r1, [r7, #0]
 8007ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ada:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	20000160 	.word	0x20000160

08007aec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	6039      	str	r1, [r7, #0]
 8007af6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d105      	bne.n	8007b0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	4907      	ldr	r1, [pc, #28]	; (8007b20 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b02:	4808      	ldr	r0, [pc, #32]	; (8007b24 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b04:	f7ff fdf7 	bl	80076f6 <USBD_GetString>
 8007b08:	e004      	b.n	8007b14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	4904      	ldr	r1, [pc, #16]	; (8007b20 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b0e:	4805      	ldr	r0, [pc, #20]	; (8007b24 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b10:	f7ff fdf1 	bl	80076f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b14:	4b02      	ldr	r3, [pc, #8]	; (8007b20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000dc8 	.word	0x20000dc8
 8007b24:	08009124 	.word	0x08009124

08007b28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	6039      	str	r1, [r7, #0]
 8007b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	4904      	ldr	r1, [pc, #16]	; (8007b48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b38:	4804      	ldr	r0, [pc, #16]	; (8007b4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b3a:	f7ff fddc 	bl	80076f6 <USBD_GetString>
  return USBD_StrDesc;
 8007b3e:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20000dc8 	.word	0x20000dc8
 8007b4c:	0800913c 	.word	0x0800913c

08007b50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	6039      	str	r1, [r7, #0]
 8007b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	221a      	movs	r2, #26
 8007b60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b62:	f000 f843 	bl	8007bec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b66:	4b02      	ldr	r3, [pc, #8]	; (8007b70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20000164 	.word	0x20000164

08007b74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	6039      	str	r1, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b80:	79fb      	ldrb	r3, [r7, #7]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d105      	bne.n	8007b92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	4907      	ldr	r1, [pc, #28]	; (8007ba8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b8a:	4808      	ldr	r0, [pc, #32]	; (8007bac <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b8c:	f7ff fdb3 	bl	80076f6 <USBD_GetString>
 8007b90:	e004      	b.n	8007b9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	4904      	ldr	r1, [pc, #16]	; (8007ba8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b96:	4805      	ldr	r0, [pc, #20]	; (8007bac <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b98:	f7ff fdad 	bl	80076f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b9c:	4b02      	ldr	r3, [pc, #8]	; (8007ba8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20000dc8 	.word	0x20000dc8
 8007bac:	08009150 	.word	0x08009150

08007bb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	6039      	str	r1, [r7, #0]
 8007bba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	4907      	ldr	r1, [pc, #28]	; (8007be4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bc6:	4808      	ldr	r0, [pc, #32]	; (8007be8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bc8:	f7ff fd95 	bl	80076f6 <USBD_GetString>
 8007bcc:	e004      	b.n	8007bd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	4904      	ldr	r1, [pc, #16]	; (8007be4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bd2:	4805      	ldr	r0, [pc, #20]	; (8007be8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bd4:	f7ff fd8f 	bl	80076f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bd8:	4b02      	ldr	r3, [pc, #8]	; (8007be4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	20000dc8 	.word	0x20000dc8
 8007be8:	0800915c 	.word	0x0800915c

08007bec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bf2:	4b0f      	ldr	r3, [pc, #60]	; (8007c30 <Get_SerialNum+0x44>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bf8:	4b0e      	ldr	r3, [pc, #56]	; (8007c34 <Get_SerialNum+0x48>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bfe:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <Get_SerialNum+0x4c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4413      	add	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c12:	2208      	movs	r2, #8
 8007c14:	4909      	ldr	r1, [pc, #36]	; (8007c3c <Get_SerialNum+0x50>)
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f814 	bl	8007c44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	4908      	ldr	r1, [pc, #32]	; (8007c40 <Get_SerialNum+0x54>)
 8007c20:	68b8      	ldr	r0, [r7, #8]
 8007c22:	f000 f80f 	bl	8007c44 <IntToUnicode>
  }
}
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	1fff7a10 	.word	0x1fff7a10
 8007c34:	1fff7a14 	.word	0x1fff7a14
 8007c38:	1fff7a18 	.word	0x1fff7a18
 8007c3c:	20000166 	.word	0x20000166
 8007c40:	20000176 	.word	0x20000176

08007c44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c56:	2300      	movs	r3, #0
 8007c58:	75fb      	strb	r3, [r7, #23]
 8007c5a:	e027      	b.n	8007cac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	0f1b      	lsrs	r3, r3, #28
 8007c60:	2b09      	cmp	r3, #9
 8007c62:	d80b      	bhi.n	8007c7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	0f1b      	lsrs	r3, r3, #28
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	4619      	mov	r1, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	440b      	add	r3, r1
 8007c74:	3230      	adds	r2, #48	; 0x30
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]
 8007c7a:	e00a      	b.n	8007c92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	0f1b      	lsrs	r3, r3, #28
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	4619      	mov	r1, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	440b      	add	r3, r1
 8007c8c:	3237      	adds	r2, #55	; 0x37
 8007c8e:	b2d2      	uxtb	r2, r2
 8007c90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	75fb      	strb	r3, [r7, #23]
 8007cac:	7dfa      	ldrb	r2, [r7, #23]
 8007cae:	79fb      	ldrb	r3, [r7, #7]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d3d3      	bcc.n	8007c5c <IntToUnicode+0x18>
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	; 0x28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cc8:	f107 0314 	add.w	r3, r7, #20
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	605a      	str	r2, [r3, #4]
 8007cd2:	609a      	str	r2, [r3, #8]
 8007cd4:	60da      	str	r2, [r3, #12]
 8007cd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ce0:	d13a      	bne.n	8007d58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	613b      	str	r3, [r7, #16]
 8007ce6:	4b1e      	ldr	r3, [pc, #120]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	4a1d      	ldr	r2, [pc, #116]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007cec:	f043 0301 	orr.w	r3, r3, #1
 8007cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	613b      	str	r3, [r7, #16]
 8007cfc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007cfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d04:	2302      	movs	r3, #2
 8007d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d10:	230a      	movs	r3, #10
 8007d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d14:	f107 0314 	add.w	r3, r7, #20
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4812      	ldr	r0, [pc, #72]	; (8007d64 <HAL_PCD_MspInit+0xa4>)
 8007d1c:	f7fa f9cc 	bl	80020b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d20:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d24:	4a0e      	ldr	r2, [pc, #56]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2a:	6353      	str	r3, [r2, #52]	; 0x34
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d34:	4a0a      	ldr	r2, [pc, #40]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8007d3c:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	2043      	movs	r0, #67	; 0x43
 8007d4e:	f7f9 fe0e 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d52:	2043      	movs	r0, #67	; 0x43
 8007d54:	f7f9 fe27 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d58:	bf00      	nop
 8007d5a:	3728      	adds	r7, #40	; 0x28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	40023800 	.word	0x40023800
 8007d64:	40020000 	.word	0x40020000

08007d68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4610      	mov	r0, r2
 8007d80:	f7fe fd36 	bl	80067f0 <USBD_LL_SetupStage>
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	440b      	add	r3, r1
 8007dac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	78fb      	ldrb	r3, [r7, #3]
 8007db4:	4619      	mov	r1, r3
 8007db6:	f7fe fd6e 	bl	8006896 <USBD_LL_DataOutStage>
}
 8007dba:	bf00      	nop
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007dd4:	78fa      	ldrb	r2, [r7, #3]
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	440b      	add	r3, r1
 8007de2:	3348      	adds	r3, #72	; 0x48
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	4619      	mov	r1, r3
 8007dea:	f7fe fdb7 	bl	800695c <USBD_LL_DataInStage>
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe febb 	bl	8006b80 <USBD_LL_SOF>
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d001      	beq.n	8007e2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e26:	f7f8 fe3b 	bl	8000aa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e30:	7bfa      	ldrb	r2, [r7, #15]
 8007e32:	4611      	mov	r1, r2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe fe68 	bl	8006b0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe fe21 	bl	8006a88 <USBD_LL_Reset>
}
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe fe63 	bl	8006b2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d005      	beq.n	8007e90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e84:	4b04      	ldr	r3, [pc, #16]	; (8007e98 <HAL_PCD_SuspendCallback+0x48>)
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	4a03      	ldr	r2, [pc, #12]	; (8007e98 <HAL_PCD_SuspendCallback+0x48>)
 8007e8a:	f043 0306 	orr.w	r3, r3, #6
 8007e8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	e000ed00 	.word	0xe000ed00

08007e9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fe52 	bl	8006b54 <USBD_LL_Resume>
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	4611      	mov	r1, r2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fe7d 	bl	8006bce <USBD_LL_IsoOUTIncomplete>
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eee:	78fa      	ldrb	r2, [r7, #3]
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe fe5e 	bl	8006bb4 <USBD_LL_IsoINIncomplete>
}
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe fe6a 	bl	8006be8 <USBD_LL_DevConnected>
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fe fe67 	bl	8006bfe <USBD_LL_DevDisconnected>
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d13c      	bne.n	8007fc2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f48:	4a20      	ldr	r2, [pc, #128]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a1e      	ldr	r2, [pc, #120]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f58:	4b1c      	ldr	r3, [pc, #112]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f60:	4b1a      	ldr	r3, [pc, #104]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f62:	2204      	movs	r2, #4
 8007f64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f66:	4b19      	ldr	r3, [pc, #100]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f68:	2202      	movs	r2, #2
 8007f6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f6c:	4b17      	ldr	r3, [pc, #92]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f72:	4b16      	ldr	r3, [pc, #88]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f74:	2202      	movs	r2, #2
 8007f76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f78:	4b14      	ldr	r3, [pc, #80]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f7e:	4b13      	ldr	r3, [pc, #76]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f84:	4b11      	ldr	r3, [pc, #68]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f8a:	4b10      	ldr	r3, [pc, #64]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f90:	4b0e      	ldr	r3, [pc, #56]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f96:	480d      	ldr	r0, [pc, #52]	; (8007fcc <USBD_LL_Init+0x94>)
 8007f98:	f7fa fa29 	bl	80023ee <HAL_PCD_Init>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007fa2:	f7f8 fd7d 	bl	8000aa0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007fa6:	2180      	movs	r1, #128	; 0x80
 8007fa8:	4808      	ldr	r0, [pc, #32]	; (8007fcc <USBD_LL_Init+0x94>)
 8007faa:	f7fb fb86 	bl	80036ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007fae:	2240      	movs	r2, #64	; 0x40
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4806      	ldr	r0, [pc, #24]	; (8007fcc <USBD_LL_Init+0x94>)
 8007fb4:	f7fb fb3a 	bl	800362c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007fb8:	2280      	movs	r2, #128	; 0x80
 8007fba:	2101      	movs	r1, #1
 8007fbc:	4803      	ldr	r0, [pc, #12]	; (8007fcc <USBD_LL_Init+0x94>)
 8007fbe:	f7fb fb35 	bl	800362c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	20000fc8 	.word	0x20000fc8

08007fd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fa fb1e 	bl	8002628 <HAL_PCD_Start>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 f92a 	bl	800824c <USBD_Get_USB_Status>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	4608      	mov	r0, r1
 8008010:	4611      	mov	r1, r2
 8008012:	461a      	mov	r2, r3
 8008014:	4603      	mov	r3, r0
 8008016:	70fb      	strb	r3, [r7, #3]
 8008018:	460b      	mov	r3, r1
 800801a:	70bb      	strb	r3, [r7, #2]
 800801c:	4613      	mov	r3, r2
 800801e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800802e:	78bb      	ldrb	r3, [r7, #2]
 8008030:	883a      	ldrh	r2, [r7, #0]
 8008032:	78f9      	ldrb	r1, [r7, #3]
 8008034:	f7fa ff02 	bl	8002e3c <HAL_PCD_EP_Open>
 8008038:	4603      	mov	r3, r0
 800803a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	4618      	mov	r0, r3
 8008040:	f000 f904 	bl	800824c <USBD_Get_USB_Status>
 8008044:	4603      	mov	r3, r0
 8008046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008048:	7bbb      	ldrb	r3, [r7, #14]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	460b      	mov	r3, r1
 800805c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800806c:	78fa      	ldrb	r2, [r7, #3]
 800806e:	4611      	mov	r1, r2
 8008070:	4618      	mov	r0, r3
 8008072:	f7fa ff4b 	bl	8002f0c <HAL_PCD_EP_Close>
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	4618      	mov	r0, r3
 800807e:	f000 f8e5 	bl	800824c <USBD_Get_USB_Status>
 8008082:	4603      	mov	r3, r0
 8008084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008086:	7bbb      	ldrb	r3, [r7, #14]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fb f823 	bl	80030fa <HAL_PCD_EP_SetStall>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 f8c6 	bl	800824c <USBD_Get_USB_Status>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	460b      	mov	r3, r1
 80080d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080e8:	78fa      	ldrb	r2, [r7, #3]
 80080ea:	4611      	mov	r1, r2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fb f868 	bl	80031c2 <HAL_PCD_EP_ClrStall>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 f8a7 	bl	800824c <USBD_Get_USB_Status>
 80080fe:	4603      	mov	r3, r0
 8008100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008102:	7bbb      	ldrb	r3, [r7, #14]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800811e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008124:	2b00      	cmp	r3, #0
 8008126:	da0b      	bge.n	8008140 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800812e:	68f9      	ldr	r1, [r7, #12]
 8008130:	4613      	mov	r3, r2
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	1a9b      	subs	r3, r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	440b      	add	r3, r1
 800813a:	333e      	adds	r3, #62	; 0x3e
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	e00b      	b.n	8008158 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008146:	68f9      	ldr	r1, [r7, #12]
 8008148:	4613      	mov	r3, r2
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	1a9b      	subs	r3, r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008156:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800817e:	78fa      	ldrb	r2, [r7, #3]
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f7fa fe35 	bl	8002df2 <HAL_PCD_SetAddress>
 8008188:	4603      	mov	r3, r0
 800818a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	4618      	mov	r0, r3
 8008190:	f000 f85c 	bl	800824c <USBD_Get_USB_Status>
 8008194:	4603      	mov	r3, r0
 8008196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008198:	7bbb      	ldrb	r3, [r7, #14]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b086      	sub	sp, #24
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
 80081ae:	460b      	mov	r3, r1
 80081b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081c0:	7af9      	ldrb	r1, [r7, #11]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	f7fa ff4e 	bl	8003066 <HAL_PCD_EP_Transmit>
 80081ca:	4603      	mov	r3, r0
 80081cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 f83b 	bl	800824c <USBD_Get_USB_Status>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081da:	7dbb      	ldrb	r3, [r7, #22]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	460b      	mov	r3, r1
 80081f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008202:	7af9      	ldrb	r1, [r7, #11]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	f7fa feca 	bl	8002fa0 <HAL_PCD_EP_Receive>
 800820c:	4603      	mov	r3, r0
 800820e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 f81a 	bl	800824c <USBD_Get_USB_Status>
 8008218:	4603      	mov	r3, r0
 800821a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800821c:	7dbb      	ldrb	r3, [r7, #22]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	460b      	mov	r3, r1
 8008230:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008238:	78fa      	ldrb	r2, [r7, #3]
 800823a:	4611      	mov	r1, r2
 800823c:	4618      	mov	r0, r3
 800823e:	f7fa fefa 	bl	8003036 <HAL_PCD_EP_GetRxCount>
 8008242:	4603      	mov	r3, r0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	2b03      	cmp	r3, #3
 800825e:	d817      	bhi.n	8008290 <USBD_Get_USB_Status+0x44>
 8008260:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <USBD_Get_USB_Status+0x1c>)
 8008262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008266:	bf00      	nop
 8008268:	08008279 	.word	0x08008279
 800826c:	0800827f 	.word	0x0800827f
 8008270:	08008285 	.word	0x08008285
 8008274:	0800828b 	.word	0x0800828b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
    break;
 800827c:	e00b      	b.n	8008296 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800827e:	2303      	movs	r3, #3
 8008280:	73fb      	strb	r3, [r7, #15]
    break;
 8008282:	e008      	b.n	8008296 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008284:	2301      	movs	r3, #1
 8008286:	73fb      	strb	r3, [r7, #15]
    break;
 8008288:	e005      	b.n	8008296 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800828a:	2303      	movs	r3, #3
 800828c:	73fb      	strb	r3, [r7, #15]
    break;
 800828e:	e002      	b.n	8008296 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008290:	2303      	movs	r3, #3
 8008292:	73fb      	strb	r3, [r7, #15]
    break;
 8008294:	bf00      	nop
  }
  return usb_status;
 8008296:	7bfb      	ldrb	r3, [r7, #15]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <__errno>:
 80082a4:	4b01      	ldr	r3, [pc, #4]	; (80082ac <__errno+0x8>)
 80082a6:	6818      	ldr	r0, [r3, #0]
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	20000180 	.word	0x20000180

080082b0 <__libc_init_array>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	4e0d      	ldr	r6, [pc, #52]	; (80082e8 <__libc_init_array+0x38>)
 80082b4:	4c0d      	ldr	r4, [pc, #52]	; (80082ec <__libc_init_array+0x3c>)
 80082b6:	1ba4      	subs	r4, r4, r6
 80082b8:	10a4      	asrs	r4, r4, #2
 80082ba:	2500      	movs	r5, #0
 80082bc:	42a5      	cmp	r5, r4
 80082be:	d109      	bne.n	80082d4 <__libc_init_array+0x24>
 80082c0:	4e0b      	ldr	r6, [pc, #44]	; (80082f0 <__libc_init_array+0x40>)
 80082c2:	4c0c      	ldr	r4, [pc, #48]	; (80082f4 <__libc_init_array+0x44>)
 80082c4:	f000 ff14 	bl	80090f0 <_init>
 80082c8:	1ba4      	subs	r4, r4, r6
 80082ca:	10a4      	asrs	r4, r4, #2
 80082cc:	2500      	movs	r5, #0
 80082ce:	42a5      	cmp	r5, r4
 80082d0:	d105      	bne.n	80082de <__libc_init_array+0x2e>
 80082d2:	bd70      	pop	{r4, r5, r6, pc}
 80082d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082d8:	4798      	blx	r3
 80082da:	3501      	adds	r5, #1
 80082dc:	e7ee      	b.n	80082bc <__libc_init_array+0xc>
 80082de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082e2:	4798      	blx	r3
 80082e4:	3501      	adds	r5, #1
 80082e6:	e7f2      	b.n	80082ce <__libc_init_array+0x1e>
 80082e8:	08009224 	.word	0x08009224
 80082ec:	08009224 	.word	0x08009224
 80082f0:	08009224 	.word	0x08009224
 80082f4:	08009228 	.word	0x08009228

080082f8 <malloc>:
 80082f8:	4b02      	ldr	r3, [pc, #8]	; (8008304 <malloc+0xc>)
 80082fa:	4601      	mov	r1, r0
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	f000 b861 	b.w	80083c4 <_malloc_r>
 8008302:	bf00      	nop
 8008304:	20000180 	.word	0x20000180

08008308 <free>:
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <free+0xc>)
 800830a:	4601      	mov	r1, r0
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	f000 b80b 	b.w	8008328 <_free_r>
 8008312:	bf00      	nop
 8008314:	20000180 	.word	0x20000180

08008318 <memset>:
 8008318:	4402      	add	r2, r0
 800831a:	4603      	mov	r3, r0
 800831c:	4293      	cmp	r3, r2
 800831e:	d100      	bne.n	8008322 <memset+0xa>
 8008320:	4770      	bx	lr
 8008322:	f803 1b01 	strb.w	r1, [r3], #1
 8008326:	e7f9      	b.n	800831c <memset+0x4>

08008328 <_free_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4605      	mov	r5, r0
 800832c:	2900      	cmp	r1, #0
 800832e:	d045      	beq.n	80083bc <_free_r+0x94>
 8008330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008334:	1f0c      	subs	r4, r1, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	bfb8      	it	lt
 800833a:	18e4      	addlt	r4, r4, r3
 800833c:	f000 f98e 	bl	800865c <__malloc_lock>
 8008340:	4a1f      	ldr	r2, [pc, #124]	; (80083c0 <_free_r+0x98>)
 8008342:	6813      	ldr	r3, [r2, #0]
 8008344:	4610      	mov	r0, r2
 8008346:	b933      	cbnz	r3, 8008356 <_free_r+0x2e>
 8008348:	6063      	str	r3, [r4, #4]
 800834a:	6014      	str	r4, [r2, #0]
 800834c:	4628      	mov	r0, r5
 800834e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008352:	f000 b984 	b.w	800865e <__malloc_unlock>
 8008356:	42a3      	cmp	r3, r4
 8008358:	d90c      	bls.n	8008374 <_free_r+0x4c>
 800835a:	6821      	ldr	r1, [r4, #0]
 800835c:	1862      	adds	r2, r4, r1
 800835e:	4293      	cmp	r3, r2
 8008360:	bf04      	itt	eq
 8008362:	681a      	ldreq	r2, [r3, #0]
 8008364:	685b      	ldreq	r3, [r3, #4]
 8008366:	6063      	str	r3, [r4, #4]
 8008368:	bf04      	itt	eq
 800836a:	1852      	addeq	r2, r2, r1
 800836c:	6022      	streq	r2, [r4, #0]
 800836e:	6004      	str	r4, [r0, #0]
 8008370:	e7ec      	b.n	800834c <_free_r+0x24>
 8008372:	4613      	mov	r3, r2
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	b10a      	cbz	r2, 800837c <_free_r+0x54>
 8008378:	42a2      	cmp	r2, r4
 800837a:	d9fa      	bls.n	8008372 <_free_r+0x4a>
 800837c:	6819      	ldr	r1, [r3, #0]
 800837e:	1858      	adds	r0, r3, r1
 8008380:	42a0      	cmp	r0, r4
 8008382:	d10b      	bne.n	800839c <_free_r+0x74>
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	4401      	add	r1, r0
 8008388:	1858      	adds	r0, r3, r1
 800838a:	4282      	cmp	r2, r0
 800838c:	6019      	str	r1, [r3, #0]
 800838e:	d1dd      	bne.n	800834c <_free_r+0x24>
 8008390:	6810      	ldr	r0, [r2, #0]
 8008392:	6852      	ldr	r2, [r2, #4]
 8008394:	605a      	str	r2, [r3, #4]
 8008396:	4401      	add	r1, r0
 8008398:	6019      	str	r1, [r3, #0]
 800839a:	e7d7      	b.n	800834c <_free_r+0x24>
 800839c:	d902      	bls.n	80083a4 <_free_r+0x7c>
 800839e:	230c      	movs	r3, #12
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	e7d3      	b.n	800834c <_free_r+0x24>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	1821      	adds	r1, r4, r0
 80083a8:	428a      	cmp	r2, r1
 80083aa:	bf04      	itt	eq
 80083ac:	6811      	ldreq	r1, [r2, #0]
 80083ae:	6852      	ldreq	r2, [r2, #4]
 80083b0:	6062      	str	r2, [r4, #4]
 80083b2:	bf04      	itt	eq
 80083b4:	1809      	addeq	r1, r1, r0
 80083b6:	6021      	streq	r1, [r4, #0]
 80083b8:	605c      	str	r4, [r3, #4]
 80083ba:	e7c7      	b.n	800834c <_free_r+0x24>
 80083bc:	bd38      	pop	{r3, r4, r5, pc}
 80083be:	bf00      	nop
 80083c0:	20000234 	.word	0x20000234

080083c4 <_malloc_r>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	1ccd      	adds	r5, r1, #3
 80083c8:	f025 0503 	bic.w	r5, r5, #3
 80083cc:	3508      	adds	r5, #8
 80083ce:	2d0c      	cmp	r5, #12
 80083d0:	bf38      	it	cc
 80083d2:	250c      	movcc	r5, #12
 80083d4:	2d00      	cmp	r5, #0
 80083d6:	4606      	mov	r6, r0
 80083d8:	db01      	blt.n	80083de <_malloc_r+0x1a>
 80083da:	42a9      	cmp	r1, r5
 80083dc:	d903      	bls.n	80083e6 <_malloc_r+0x22>
 80083de:	230c      	movs	r3, #12
 80083e0:	6033      	str	r3, [r6, #0]
 80083e2:	2000      	movs	r0, #0
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
 80083e6:	f000 f939 	bl	800865c <__malloc_lock>
 80083ea:	4a21      	ldr	r2, [pc, #132]	; (8008470 <_malloc_r+0xac>)
 80083ec:	6814      	ldr	r4, [r2, #0]
 80083ee:	4621      	mov	r1, r4
 80083f0:	b991      	cbnz	r1, 8008418 <_malloc_r+0x54>
 80083f2:	4c20      	ldr	r4, [pc, #128]	; (8008474 <_malloc_r+0xb0>)
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	b91b      	cbnz	r3, 8008400 <_malloc_r+0x3c>
 80083f8:	4630      	mov	r0, r6
 80083fa:	f000 f855 	bl	80084a8 <_sbrk_r>
 80083fe:	6020      	str	r0, [r4, #0]
 8008400:	4629      	mov	r1, r5
 8008402:	4630      	mov	r0, r6
 8008404:	f000 f850 	bl	80084a8 <_sbrk_r>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d124      	bne.n	8008456 <_malloc_r+0x92>
 800840c:	230c      	movs	r3, #12
 800840e:	6033      	str	r3, [r6, #0]
 8008410:	4630      	mov	r0, r6
 8008412:	f000 f924 	bl	800865e <__malloc_unlock>
 8008416:	e7e4      	b.n	80083e2 <_malloc_r+0x1e>
 8008418:	680b      	ldr	r3, [r1, #0]
 800841a:	1b5b      	subs	r3, r3, r5
 800841c:	d418      	bmi.n	8008450 <_malloc_r+0x8c>
 800841e:	2b0b      	cmp	r3, #11
 8008420:	d90f      	bls.n	8008442 <_malloc_r+0x7e>
 8008422:	600b      	str	r3, [r1, #0]
 8008424:	50cd      	str	r5, [r1, r3]
 8008426:	18cc      	adds	r4, r1, r3
 8008428:	4630      	mov	r0, r6
 800842a:	f000 f918 	bl	800865e <__malloc_unlock>
 800842e:	f104 000b 	add.w	r0, r4, #11
 8008432:	1d23      	adds	r3, r4, #4
 8008434:	f020 0007 	bic.w	r0, r0, #7
 8008438:	1ac3      	subs	r3, r0, r3
 800843a:	d0d3      	beq.n	80083e4 <_malloc_r+0x20>
 800843c:	425a      	negs	r2, r3
 800843e:	50e2      	str	r2, [r4, r3]
 8008440:	e7d0      	b.n	80083e4 <_malloc_r+0x20>
 8008442:	428c      	cmp	r4, r1
 8008444:	684b      	ldr	r3, [r1, #4]
 8008446:	bf16      	itet	ne
 8008448:	6063      	strne	r3, [r4, #4]
 800844a:	6013      	streq	r3, [r2, #0]
 800844c:	460c      	movne	r4, r1
 800844e:	e7eb      	b.n	8008428 <_malloc_r+0x64>
 8008450:	460c      	mov	r4, r1
 8008452:	6849      	ldr	r1, [r1, #4]
 8008454:	e7cc      	b.n	80083f0 <_malloc_r+0x2c>
 8008456:	1cc4      	adds	r4, r0, #3
 8008458:	f024 0403 	bic.w	r4, r4, #3
 800845c:	42a0      	cmp	r0, r4
 800845e:	d005      	beq.n	800846c <_malloc_r+0xa8>
 8008460:	1a21      	subs	r1, r4, r0
 8008462:	4630      	mov	r0, r6
 8008464:	f000 f820 	bl	80084a8 <_sbrk_r>
 8008468:	3001      	adds	r0, #1
 800846a:	d0cf      	beq.n	800840c <_malloc_r+0x48>
 800846c:	6025      	str	r5, [r4, #0]
 800846e:	e7db      	b.n	8008428 <_malloc_r+0x64>
 8008470:	20000234 	.word	0x20000234
 8008474:	20000238 	.word	0x20000238

08008478 <iprintf>:
 8008478:	b40f      	push	{r0, r1, r2, r3}
 800847a:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <iprintf+0x2c>)
 800847c:	b513      	push	{r0, r1, r4, lr}
 800847e:	681c      	ldr	r4, [r3, #0]
 8008480:	b124      	cbz	r4, 800848c <iprintf+0x14>
 8008482:	69a3      	ldr	r3, [r4, #24]
 8008484:	b913      	cbnz	r3, 800848c <iprintf+0x14>
 8008486:	4620      	mov	r0, r4
 8008488:	f000 f85e 	bl	8008548 <__sinit>
 800848c:	ab05      	add	r3, sp, #20
 800848e:	9a04      	ldr	r2, [sp, #16]
 8008490:	68a1      	ldr	r1, [r4, #8]
 8008492:	9301      	str	r3, [sp, #4]
 8008494:	4620      	mov	r0, r4
 8008496:	f000 f90d 	bl	80086b4 <_vfiprintf_r>
 800849a:	b002      	add	sp, #8
 800849c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a0:	b004      	add	sp, #16
 80084a2:	4770      	bx	lr
 80084a4:	20000180 	.word	0x20000180

080084a8 <_sbrk_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4c06      	ldr	r4, [pc, #24]	; (80084c4 <_sbrk_r+0x1c>)
 80084ac:	2300      	movs	r3, #0
 80084ae:	4605      	mov	r5, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	6023      	str	r3, [r4, #0]
 80084b4:	f7f8 fbb8 	bl	8000c28 <_sbrk>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_sbrk_r+0x1a>
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_sbrk_r+0x1a>
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	200013d0 	.word	0x200013d0

080084c8 <std>:
 80084c8:	2300      	movs	r3, #0
 80084ca:	b510      	push	{r4, lr}
 80084cc:	4604      	mov	r4, r0
 80084ce:	e9c0 3300 	strd	r3, r3, [r0]
 80084d2:	6083      	str	r3, [r0, #8]
 80084d4:	8181      	strh	r1, [r0, #12]
 80084d6:	6643      	str	r3, [r0, #100]	; 0x64
 80084d8:	81c2      	strh	r2, [r0, #14]
 80084da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084de:	6183      	str	r3, [r0, #24]
 80084e0:	4619      	mov	r1, r3
 80084e2:	2208      	movs	r2, #8
 80084e4:	305c      	adds	r0, #92	; 0x5c
 80084e6:	f7ff ff17 	bl	8008318 <memset>
 80084ea:	4b05      	ldr	r3, [pc, #20]	; (8008500 <std+0x38>)
 80084ec:	6263      	str	r3, [r4, #36]	; 0x24
 80084ee:	4b05      	ldr	r3, [pc, #20]	; (8008504 <std+0x3c>)
 80084f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80084f2:	4b05      	ldr	r3, [pc, #20]	; (8008508 <std+0x40>)
 80084f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084f6:	4b05      	ldr	r3, [pc, #20]	; (800850c <std+0x44>)
 80084f8:	6224      	str	r4, [r4, #32]
 80084fa:	6323      	str	r3, [r4, #48]	; 0x30
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	bf00      	nop
 8008500:	08008bf1 	.word	0x08008bf1
 8008504:	08008c13 	.word	0x08008c13
 8008508:	08008c4b 	.word	0x08008c4b
 800850c:	08008c6f 	.word	0x08008c6f

08008510 <_cleanup_r>:
 8008510:	4901      	ldr	r1, [pc, #4]	; (8008518 <_cleanup_r+0x8>)
 8008512:	f000 b885 	b.w	8008620 <_fwalk_reent>
 8008516:	bf00      	nop
 8008518:	08008f49 	.word	0x08008f49

0800851c <__sfmoreglue>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	1e4a      	subs	r2, r1, #1
 8008520:	2568      	movs	r5, #104	; 0x68
 8008522:	4355      	muls	r5, r2
 8008524:	460e      	mov	r6, r1
 8008526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800852a:	f7ff ff4b 	bl	80083c4 <_malloc_r>
 800852e:	4604      	mov	r4, r0
 8008530:	b140      	cbz	r0, 8008544 <__sfmoreglue+0x28>
 8008532:	2100      	movs	r1, #0
 8008534:	e9c0 1600 	strd	r1, r6, [r0]
 8008538:	300c      	adds	r0, #12
 800853a:	60a0      	str	r0, [r4, #8]
 800853c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008540:	f7ff feea 	bl	8008318 <memset>
 8008544:	4620      	mov	r0, r4
 8008546:	bd70      	pop	{r4, r5, r6, pc}

08008548 <__sinit>:
 8008548:	6983      	ldr	r3, [r0, #24]
 800854a:	b510      	push	{r4, lr}
 800854c:	4604      	mov	r4, r0
 800854e:	bb33      	cbnz	r3, 800859e <__sinit+0x56>
 8008550:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008554:	6503      	str	r3, [r0, #80]	; 0x50
 8008556:	4b12      	ldr	r3, [pc, #72]	; (80085a0 <__sinit+0x58>)
 8008558:	4a12      	ldr	r2, [pc, #72]	; (80085a4 <__sinit+0x5c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6282      	str	r2, [r0, #40]	; 0x28
 800855e:	4298      	cmp	r0, r3
 8008560:	bf04      	itt	eq
 8008562:	2301      	moveq	r3, #1
 8008564:	6183      	streq	r3, [r0, #24]
 8008566:	f000 f81f 	bl	80085a8 <__sfp>
 800856a:	6060      	str	r0, [r4, #4]
 800856c:	4620      	mov	r0, r4
 800856e:	f000 f81b 	bl	80085a8 <__sfp>
 8008572:	60a0      	str	r0, [r4, #8]
 8008574:	4620      	mov	r0, r4
 8008576:	f000 f817 	bl	80085a8 <__sfp>
 800857a:	2200      	movs	r2, #0
 800857c:	60e0      	str	r0, [r4, #12]
 800857e:	2104      	movs	r1, #4
 8008580:	6860      	ldr	r0, [r4, #4]
 8008582:	f7ff ffa1 	bl	80084c8 <std>
 8008586:	2201      	movs	r2, #1
 8008588:	2109      	movs	r1, #9
 800858a:	68a0      	ldr	r0, [r4, #8]
 800858c:	f7ff ff9c 	bl	80084c8 <std>
 8008590:	2202      	movs	r2, #2
 8008592:	2112      	movs	r1, #18
 8008594:	68e0      	ldr	r0, [r4, #12]
 8008596:	f7ff ff97 	bl	80084c8 <std>
 800859a:	2301      	movs	r3, #1
 800859c:	61a3      	str	r3, [r4, #24]
 800859e:	bd10      	pop	{r4, pc}
 80085a0:	08009184 	.word	0x08009184
 80085a4:	08008511 	.word	0x08008511

080085a8 <__sfp>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	4b1b      	ldr	r3, [pc, #108]	; (8008618 <__sfp+0x70>)
 80085ac:	681e      	ldr	r6, [r3, #0]
 80085ae:	69b3      	ldr	r3, [r6, #24]
 80085b0:	4607      	mov	r7, r0
 80085b2:	b913      	cbnz	r3, 80085ba <__sfp+0x12>
 80085b4:	4630      	mov	r0, r6
 80085b6:	f7ff ffc7 	bl	8008548 <__sinit>
 80085ba:	3648      	adds	r6, #72	; 0x48
 80085bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	d503      	bpl.n	80085cc <__sfp+0x24>
 80085c4:	6833      	ldr	r3, [r6, #0]
 80085c6:	b133      	cbz	r3, 80085d6 <__sfp+0x2e>
 80085c8:	6836      	ldr	r6, [r6, #0]
 80085ca:	e7f7      	b.n	80085bc <__sfp+0x14>
 80085cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085d0:	b16d      	cbz	r5, 80085ee <__sfp+0x46>
 80085d2:	3468      	adds	r4, #104	; 0x68
 80085d4:	e7f4      	b.n	80085c0 <__sfp+0x18>
 80085d6:	2104      	movs	r1, #4
 80085d8:	4638      	mov	r0, r7
 80085da:	f7ff ff9f 	bl	800851c <__sfmoreglue>
 80085de:	6030      	str	r0, [r6, #0]
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1f1      	bne.n	80085c8 <__sfp+0x20>
 80085e4:	230c      	movs	r3, #12
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	4604      	mov	r4, r0
 80085ea:	4620      	mov	r0, r4
 80085ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ee:	4b0b      	ldr	r3, [pc, #44]	; (800861c <__sfp+0x74>)
 80085f0:	6665      	str	r5, [r4, #100]	; 0x64
 80085f2:	e9c4 5500 	strd	r5, r5, [r4]
 80085f6:	60a5      	str	r5, [r4, #8]
 80085f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80085fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008600:	2208      	movs	r2, #8
 8008602:	4629      	mov	r1, r5
 8008604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008608:	f7ff fe86 	bl	8008318 <memset>
 800860c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008610:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008614:	e7e9      	b.n	80085ea <__sfp+0x42>
 8008616:	bf00      	nop
 8008618:	08009184 	.word	0x08009184
 800861c:	ffff0001 	.word	0xffff0001

08008620 <_fwalk_reent>:
 8008620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008624:	4680      	mov	r8, r0
 8008626:	4689      	mov	r9, r1
 8008628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800862c:	2600      	movs	r6, #0
 800862e:	b914      	cbnz	r4, 8008636 <_fwalk_reent+0x16>
 8008630:	4630      	mov	r0, r6
 8008632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008636:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800863a:	3f01      	subs	r7, #1
 800863c:	d501      	bpl.n	8008642 <_fwalk_reent+0x22>
 800863e:	6824      	ldr	r4, [r4, #0]
 8008640:	e7f5      	b.n	800862e <_fwalk_reent+0xe>
 8008642:	89ab      	ldrh	r3, [r5, #12]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d907      	bls.n	8008658 <_fwalk_reent+0x38>
 8008648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800864c:	3301      	adds	r3, #1
 800864e:	d003      	beq.n	8008658 <_fwalk_reent+0x38>
 8008650:	4629      	mov	r1, r5
 8008652:	4640      	mov	r0, r8
 8008654:	47c8      	blx	r9
 8008656:	4306      	orrs	r6, r0
 8008658:	3568      	adds	r5, #104	; 0x68
 800865a:	e7ee      	b.n	800863a <_fwalk_reent+0x1a>

0800865c <__malloc_lock>:
 800865c:	4770      	bx	lr

0800865e <__malloc_unlock>:
 800865e:	4770      	bx	lr

08008660 <__sfputc_r>:
 8008660:	6893      	ldr	r3, [r2, #8]
 8008662:	3b01      	subs	r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	b410      	push	{r4}
 8008668:	6093      	str	r3, [r2, #8]
 800866a:	da08      	bge.n	800867e <__sfputc_r+0x1e>
 800866c:	6994      	ldr	r4, [r2, #24]
 800866e:	42a3      	cmp	r3, r4
 8008670:	db01      	blt.n	8008676 <__sfputc_r+0x16>
 8008672:	290a      	cmp	r1, #10
 8008674:	d103      	bne.n	800867e <__sfputc_r+0x1e>
 8008676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800867a:	f000 bafd 	b.w	8008c78 <__swbuf_r>
 800867e:	6813      	ldr	r3, [r2, #0]
 8008680:	1c58      	adds	r0, r3, #1
 8008682:	6010      	str	r0, [r2, #0]
 8008684:	7019      	strb	r1, [r3, #0]
 8008686:	4608      	mov	r0, r1
 8008688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800868c:	4770      	bx	lr

0800868e <__sfputs_r>:
 800868e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008690:	4606      	mov	r6, r0
 8008692:	460f      	mov	r7, r1
 8008694:	4614      	mov	r4, r2
 8008696:	18d5      	adds	r5, r2, r3
 8008698:	42ac      	cmp	r4, r5
 800869a:	d101      	bne.n	80086a0 <__sfputs_r+0x12>
 800869c:	2000      	movs	r0, #0
 800869e:	e007      	b.n	80086b0 <__sfputs_r+0x22>
 80086a0:	463a      	mov	r2, r7
 80086a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a6:	4630      	mov	r0, r6
 80086a8:	f7ff ffda 	bl	8008660 <__sfputc_r>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d1f3      	bne.n	8008698 <__sfputs_r+0xa>
 80086b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086b4 <_vfiprintf_r>:
 80086b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b8:	460c      	mov	r4, r1
 80086ba:	b09d      	sub	sp, #116	; 0x74
 80086bc:	4617      	mov	r7, r2
 80086be:	461d      	mov	r5, r3
 80086c0:	4606      	mov	r6, r0
 80086c2:	b118      	cbz	r0, 80086cc <_vfiprintf_r+0x18>
 80086c4:	6983      	ldr	r3, [r0, #24]
 80086c6:	b90b      	cbnz	r3, 80086cc <_vfiprintf_r+0x18>
 80086c8:	f7ff ff3e 	bl	8008548 <__sinit>
 80086cc:	4b7c      	ldr	r3, [pc, #496]	; (80088c0 <_vfiprintf_r+0x20c>)
 80086ce:	429c      	cmp	r4, r3
 80086d0:	d158      	bne.n	8008784 <_vfiprintf_r+0xd0>
 80086d2:	6874      	ldr	r4, [r6, #4]
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	0718      	lsls	r0, r3, #28
 80086d8:	d55e      	bpl.n	8008798 <_vfiprintf_r+0xe4>
 80086da:	6923      	ldr	r3, [r4, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d05b      	beq.n	8008798 <_vfiprintf_r+0xe4>
 80086e0:	2300      	movs	r3, #0
 80086e2:	9309      	str	r3, [sp, #36]	; 0x24
 80086e4:	2320      	movs	r3, #32
 80086e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ea:	2330      	movs	r3, #48	; 0x30
 80086ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086f0:	9503      	str	r5, [sp, #12]
 80086f2:	f04f 0b01 	mov.w	fp, #1
 80086f6:	46b8      	mov	r8, r7
 80086f8:	4645      	mov	r5, r8
 80086fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086fe:	b10b      	cbz	r3, 8008704 <_vfiprintf_r+0x50>
 8008700:	2b25      	cmp	r3, #37	; 0x25
 8008702:	d154      	bne.n	80087ae <_vfiprintf_r+0xfa>
 8008704:	ebb8 0a07 	subs.w	sl, r8, r7
 8008708:	d00b      	beq.n	8008722 <_vfiprintf_r+0x6e>
 800870a:	4653      	mov	r3, sl
 800870c:	463a      	mov	r2, r7
 800870e:	4621      	mov	r1, r4
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff ffbc 	bl	800868e <__sfputs_r>
 8008716:	3001      	adds	r0, #1
 8008718:	f000 80c2 	beq.w	80088a0 <_vfiprintf_r+0x1ec>
 800871c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800871e:	4453      	add	r3, sl
 8008720:	9309      	str	r3, [sp, #36]	; 0x24
 8008722:	f898 3000 	ldrb.w	r3, [r8]
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 80ba 	beq.w	80088a0 <_vfiprintf_r+0x1ec>
 800872c:	2300      	movs	r3, #0
 800872e:	f04f 32ff 	mov.w	r2, #4294967295
 8008732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008736:	9304      	str	r3, [sp, #16]
 8008738:	9307      	str	r3, [sp, #28]
 800873a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800873e:	931a      	str	r3, [sp, #104]	; 0x68
 8008740:	46a8      	mov	r8, r5
 8008742:	2205      	movs	r2, #5
 8008744:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008748:	485e      	ldr	r0, [pc, #376]	; (80088c4 <_vfiprintf_r+0x210>)
 800874a:	f7f7 fd49 	bl	80001e0 <memchr>
 800874e:	9b04      	ldr	r3, [sp, #16]
 8008750:	bb78      	cbnz	r0, 80087b2 <_vfiprintf_r+0xfe>
 8008752:	06d9      	lsls	r1, r3, #27
 8008754:	bf44      	itt	mi
 8008756:	2220      	movmi	r2, #32
 8008758:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800875c:	071a      	lsls	r2, r3, #28
 800875e:	bf44      	itt	mi
 8008760:	222b      	movmi	r2, #43	; 0x2b
 8008762:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008766:	782a      	ldrb	r2, [r5, #0]
 8008768:	2a2a      	cmp	r2, #42	; 0x2a
 800876a:	d02a      	beq.n	80087c2 <_vfiprintf_r+0x10e>
 800876c:	9a07      	ldr	r2, [sp, #28]
 800876e:	46a8      	mov	r8, r5
 8008770:	2000      	movs	r0, #0
 8008772:	250a      	movs	r5, #10
 8008774:	4641      	mov	r1, r8
 8008776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800877a:	3b30      	subs	r3, #48	; 0x30
 800877c:	2b09      	cmp	r3, #9
 800877e:	d969      	bls.n	8008854 <_vfiprintf_r+0x1a0>
 8008780:	b360      	cbz	r0, 80087dc <_vfiprintf_r+0x128>
 8008782:	e024      	b.n	80087ce <_vfiprintf_r+0x11a>
 8008784:	4b50      	ldr	r3, [pc, #320]	; (80088c8 <_vfiprintf_r+0x214>)
 8008786:	429c      	cmp	r4, r3
 8008788:	d101      	bne.n	800878e <_vfiprintf_r+0xda>
 800878a:	68b4      	ldr	r4, [r6, #8]
 800878c:	e7a2      	b.n	80086d4 <_vfiprintf_r+0x20>
 800878e:	4b4f      	ldr	r3, [pc, #316]	; (80088cc <_vfiprintf_r+0x218>)
 8008790:	429c      	cmp	r4, r3
 8008792:	bf08      	it	eq
 8008794:	68f4      	ldreq	r4, [r6, #12]
 8008796:	e79d      	b.n	80086d4 <_vfiprintf_r+0x20>
 8008798:	4621      	mov	r1, r4
 800879a:	4630      	mov	r0, r6
 800879c:	f000 fad0 	bl	8008d40 <__swsetup_r>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d09d      	beq.n	80086e0 <_vfiprintf_r+0x2c>
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	b01d      	add	sp, #116	; 0x74
 80087aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ae:	46a8      	mov	r8, r5
 80087b0:	e7a2      	b.n	80086f8 <_vfiprintf_r+0x44>
 80087b2:	4a44      	ldr	r2, [pc, #272]	; (80088c4 <_vfiprintf_r+0x210>)
 80087b4:	1a80      	subs	r0, r0, r2
 80087b6:	fa0b f000 	lsl.w	r0, fp, r0
 80087ba:	4318      	orrs	r0, r3
 80087bc:	9004      	str	r0, [sp, #16]
 80087be:	4645      	mov	r5, r8
 80087c0:	e7be      	b.n	8008740 <_vfiprintf_r+0x8c>
 80087c2:	9a03      	ldr	r2, [sp, #12]
 80087c4:	1d11      	adds	r1, r2, #4
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	9103      	str	r1, [sp, #12]
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	db01      	blt.n	80087d2 <_vfiprintf_r+0x11e>
 80087ce:	9207      	str	r2, [sp, #28]
 80087d0:	e004      	b.n	80087dc <_vfiprintf_r+0x128>
 80087d2:	4252      	negs	r2, r2
 80087d4:	f043 0302 	orr.w	r3, r3, #2
 80087d8:	9207      	str	r2, [sp, #28]
 80087da:	9304      	str	r3, [sp, #16]
 80087dc:	f898 3000 	ldrb.w	r3, [r8]
 80087e0:	2b2e      	cmp	r3, #46	; 0x2e
 80087e2:	d10e      	bne.n	8008802 <_vfiprintf_r+0x14e>
 80087e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80087e8:	2b2a      	cmp	r3, #42	; 0x2a
 80087ea:	d138      	bne.n	800885e <_vfiprintf_r+0x1aa>
 80087ec:	9b03      	ldr	r3, [sp, #12]
 80087ee:	1d1a      	adds	r2, r3, #4
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	9203      	str	r2, [sp, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	bfb8      	it	lt
 80087f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80087fc:	f108 0802 	add.w	r8, r8, #2
 8008800:	9305      	str	r3, [sp, #20]
 8008802:	4d33      	ldr	r5, [pc, #204]	; (80088d0 <_vfiprintf_r+0x21c>)
 8008804:	f898 1000 	ldrb.w	r1, [r8]
 8008808:	2203      	movs	r2, #3
 800880a:	4628      	mov	r0, r5
 800880c:	f7f7 fce8 	bl	80001e0 <memchr>
 8008810:	b140      	cbz	r0, 8008824 <_vfiprintf_r+0x170>
 8008812:	2340      	movs	r3, #64	; 0x40
 8008814:	1b40      	subs	r0, r0, r5
 8008816:	fa03 f000 	lsl.w	r0, r3, r0
 800881a:	9b04      	ldr	r3, [sp, #16]
 800881c:	4303      	orrs	r3, r0
 800881e:	f108 0801 	add.w	r8, r8, #1
 8008822:	9304      	str	r3, [sp, #16]
 8008824:	f898 1000 	ldrb.w	r1, [r8]
 8008828:	482a      	ldr	r0, [pc, #168]	; (80088d4 <_vfiprintf_r+0x220>)
 800882a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800882e:	2206      	movs	r2, #6
 8008830:	f108 0701 	add.w	r7, r8, #1
 8008834:	f7f7 fcd4 	bl	80001e0 <memchr>
 8008838:	2800      	cmp	r0, #0
 800883a:	d037      	beq.n	80088ac <_vfiprintf_r+0x1f8>
 800883c:	4b26      	ldr	r3, [pc, #152]	; (80088d8 <_vfiprintf_r+0x224>)
 800883e:	bb1b      	cbnz	r3, 8008888 <_vfiprintf_r+0x1d4>
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	3307      	adds	r3, #7
 8008844:	f023 0307 	bic.w	r3, r3, #7
 8008848:	3308      	adds	r3, #8
 800884a:	9303      	str	r3, [sp, #12]
 800884c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884e:	444b      	add	r3, r9
 8008850:	9309      	str	r3, [sp, #36]	; 0x24
 8008852:	e750      	b.n	80086f6 <_vfiprintf_r+0x42>
 8008854:	fb05 3202 	mla	r2, r5, r2, r3
 8008858:	2001      	movs	r0, #1
 800885a:	4688      	mov	r8, r1
 800885c:	e78a      	b.n	8008774 <_vfiprintf_r+0xc0>
 800885e:	2300      	movs	r3, #0
 8008860:	f108 0801 	add.w	r8, r8, #1
 8008864:	9305      	str	r3, [sp, #20]
 8008866:	4619      	mov	r1, r3
 8008868:	250a      	movs	r5, #10
 800886a:	4640      	mov	r0, r8
 800886c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008870:	3a30      	subs	r2, #48	; 0x30
 8008872:	2a09      	cmp	r2, #9
 8008874:	d903      	bls.n	800887e <_vfiprintf_r+0x1ca>
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0c3      	beq.n	8008802 <_vfiprintf_r+0x14e>
 800887a:	9105      	str	r1, [sp, #20]
 800887c:	e7c1      	b.n	8008802 <_vfiprintf_r+0x14e>
 800887e:	fb05 2101 	mla	r1, r5, r1, r2
 8008882:	2301      	movs	r3, #1
 8008884:	4680      	mov	r8, r0
 8008886:	e7f0      	b.n	800886a <_vfiprintf_r+0x1b6>
 8008888:	ab03      	add	r3, sp, #12
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	4622      	mov	r2, r4
 800888e:	4b13      	ldr	r3, [pc, #76]	; (80088dc <_vfiprintf_r+0x228>)
 8008890:	a904      	add	r1, sp, #16
 8008892:	4630      	mov	r0, r6
 8008894:	f3af 8000 	nop.w
 8008898:	f1b0 3fff 	cmp.w	r0, #4294967295
 800889c:	4681      	mov	r9, r0
 800889e:	d1d5      	bne.n	800884c <_vfiprintf_r+0x198>
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	065b      	lsls	r3, r3, #25
 80088a4:	f53f af7e 	bmi.w	80087a4 <_vfiprintf_r+0xf0>
 80088a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088aa:	e77d      	b.n	80087a8 <_vfiprintf_r+0xf4>
 80088ac:	ab03      	add	r3, sp, #12
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	4622      	mov	r2, r4
 80088b2:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <_vfiprintf_r+0x228>)
 80088b4:	a904      	add	r1, sp, #16
 80088b6:	4630      	mov	r0, r6
 80088b8:	f000 f888 	bl	80089cc <_printf_i>
 80088bc:	e7ec      	b.n	8008898 <_vfiprintf_r+0x1e4>
 80088be:	bf00      	nop
 80088c0:	080091a8 	.word	0x080091a8
 80088c4:	080091e8 	.word	0x080091e8
 80088c8:	080091c8 	.word	0x080091c8
 80088cc:	08009188 	.word	0x08009188
 80088d0:	080091ee 	.word	0x080091ee
 80088d4:	080091f2 	.word	0x080091f2
 80088d8:	00000000 	.word	0x00000000
 80088dc:	0800868f 	.word	0x0800868f

080088e0 <_printf_common>:
 80088e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e4:	4691      	mov	r9, r2
 80088e6:	461f      	mov	r7, r3
 80088e8:	688a      	ldr	r2, [r1, #8]
 80088ea:	690b      	ldr	r3, [r1, #16]
 80088ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088f0:	4293      	cmp	r3, r2
 80088f2:	bfb8      	it	lt
 80088f4:	4613      	movlt	r3, r2
 80088f6:	f8c9 3000 	str.w	r3, [r9]
 80088fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088fe:	4606      	mov	r6, r0
 8008900:	460c      	mov	r4, r1
 8008902:	b112      	cbz	r2, 800890a <_printf_common+0x2a>
 8008904:	3301      	adds	r3, #1
 8008906:	f8c9 3000 	str.w	r3, [r9]
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	0699      	lsls	r1, r3, #26
 800890e:	bf42      	ittt	mi
 8008910:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008914:	3302      	addmi	r3, #2
 8008916:	f8c9 3000 	strmi.w	r3, [r9]
 800891a:	6825      	ldr	r5, [r4, #0]
 800891c:	f015 0506 	ands.w	r5, r5, #6
 8008920:	d107      	bne.n	8008932 <_printf_common+0x52>
 8008922:	f104 0a19 	add.w	sl, r4, #25
 8008926:	68e3      	ldr	r3, [r4, #12]
 8008928:	f8d9 2000 	ldr.w	r2, [r9]
 800892c:	1a9b      	subs	r3, r3, r2
 800892e:	42ab      	cmp	r3, r5
 8008930:	dc28      	bgt.n	8008984 <_printf_common+0xa4>
 8008932:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008936:	6822      	ldr	r2, [r4, #0]
 8008938:	3300      	adds	r3, #0
 800893a:	bf18      	it	ne
 800893c:	2301      	movne	r3, #1
 800893e:	0692      	lsls	r2, r2, #26
 8008940:	d42d      	bmi.n	800899e <_printf_common+0xbe>
 8008942:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008946:	4639      	mov	r1, r7
 8008948:	4630      	mov	r0, r6
 800894a:	47c0      	blx	r8
 800894c:	3001      	adds	r0, #1
 800894e:	d020      	beq.n	8008992 <_printf_common+0xb2>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	68e5      	ldr	r5, [r4, #12]
 8008954:	f8d9 2000 	ldr.w	r2, [r9]
 8008958:	f003 0306 	and.w	r3, r3, #6
 800895c:	2b04      	cmp	r3, #4
 800895e:	bf08      	it	eq
 8008960:	1aad      	subeq	r5, r5, r2
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	6922      	ldr	r2, [r4, #16]
 8008966:	bf0c      	ite	eq
 8008968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800896c:	2500      	movne	r5, #0
 800896e:	4293      	cmp	r3, r2
 8008970:	bfc4      	itt	gt
 8008972:	1a9b      	subgt	r3, r3, r2
 8008974:	18ed      	addgt	r5, r5, r3
 8008976:	f04f 0900 	mov.w	r9, #0
 800897a:	341a      	adds	r4, #26
 800897c:	454d      	cmp	r5, r9
 800897e:	d11a      	bne.n	80089b6 <_printf_common+0xd6>
 8008980:	2000      	movs	r0, #0
 8008982:	e008      	b.n	8008996 <_printf_common+0xb6>
 8008984:	2301      	movs	r3, #1
 8008986:	4652      	mov	r2, sl
 8008988:	4639      	mov	r1, r7
 800898a:	4630      	mov	r0, r6
 800898c:	47c0      	blx	r8
 800898e:	3001      	adds	r0, #1
 8008990:	d103      	bne.n	800899a <_printf_common+0xba>
 8008992:	f04f 30ff 	mov.w	r0, #4294967295
 8008996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899a:	3501      	adds	r5, #1
 800899c:	e7c3      	b.n	8008926 <_printf_common+0x46>
 800899e:	18e1      	adds	r1, r4, r3
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	2030      	movs	r0, #48	; 0x30
 80089a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089a8:	4422      	add	r2, r4
 80089aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089b2:	3302      	adds	r3, #2
 80089b4:	e7c5      	b.n	8008942 <_printf_common+0x62>
 80089b6:	2301      	movs	r3, #1
 80089b8:	4622      	mov	r2, r4
 80089ba:	4639      	mov	r1, r7
 80089bc:	4630      	mov	r0, r6
 80089be:	47c0      	blx	r8
 80089c0:	3001      	adds	r0, #1
 80089c2:	d0e6      	beq.n	8008992 <_printf_common+0xb2>
 80089c4:	f109 0901 	add.w	r9, r9, #1
 80089c8:	e7d8      	b.n	800897c <_printf_common+0x9c>
	...

080089cc <_printf_i>:
 80089cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80089d4:	460c      	mov	r4, r1
 80089d6:	7e09      	ldrb	r1, [r1, #24]
 80089d8:	b085      	sub	sp, #20
 80089da:	296e      	cmp	r1, #110	; 0x6e
 80089dc:	4617      	mov	r7, r2
 80089de:	4606      	mov	r6, r0
 80089e0:	4698      	mov	r8, r3
 80089e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089e4:	f000 80b3 	beq.w	8008b4e <_printf_i+0x182>
 80089e8:	d822      	bhi.n	8008a30 <_printf_i+0x64>
 80089ea:	2963      	cmp	r1, #99	; 0x63
 80089ec:	d036      	beq.n	8008a5c <_printf_i+0x90>
 80089ee:	d80a      	bhi.n	8008a06 <_printf_i+0x3a>
 80089f0:	2900      	cmp	r1, #0
 80089f2:	f000 80b9 	beq.w	8008b68 <_printf_i+0x19c>
 80089f6:	2958      	cmp	r1, #88	; 0x58
 80089f8:	f000 8083 	beq.w	8008b02 <_printf_i+0x136>
 80089fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a04:	e032      	b.n	8008a6c <_printf_i+0xa0>
 8008a06:	2964      	cmp	r1, #100	; 0x64
 8008a08:	d001      	beq.n	8008a0e <_printf_i+0x42>
 8008a0a:	2969      	cmp	r1, #105	; 0x69
 8008a0c:	d1f6      	bne.n	80089fc <_printf_i+0x30>
 8008a0e:	6820      	ldr	r0, [r4, #0]
 8008a10:	6813      	ldr	r3, [r2, #0]
 8008a12:	0605      	lsls	r5, r0, #24
 8008a14:	f103 0104 	add.w	r1, r3, #4
 8008a18:	d52a      	bpl.n	8008a70 <_printf_i+0xa4>
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6011      	str	r1, [r2, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	da03      	bge.n	8008a2a <_printf_i+0x5e>
 8008a22:	222d      	movs	r2, #45	; 0x2d
 8008a24:	425b      	negs	r3, r3
 8008a26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008a2a:	486f      	ldr	r0, [pc, #444]	; (8008be8 <_printf_i+0x21c>)
 8008a2c:	220a      	movs	r2, #10
 8008a2e:	e039      	b.n	8008aa4 <_printf_i+0xd8>
 8008a30:	2973      	cmp	r1, #115	; 0x73
 8008a32:	f000 809d 	beq.w	8008b70 <_printf_i+0x1a4>
 8008a36:	d808      	bhi.n	8008a4a <_printf_i+0x7e>
 8008a38:	296f      	cmp	r1, #111	; 0x6f
 8008a3a:	d020      	beq.n	8008a7e <_printf_i+0xb2>
 8008a3c:	2970      	cmp	r1, #112	; 0x70
 8008a3e:	d1dd      	bne.n	80089fc <_printf_i+0x30>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	f043 0320 	orr.w	r3, r3, #32
 8008a46:	6023      	str	r3, [r4, #0]
 8008a48:	e003      	b.n	8008a52 <_printf_i+0x86>
 8008a4a:	2975      	cmp	r1, #117	; 0x75
 8008a4c:	d017      	beq.n	8008a7e <_printf_i+0xb2>
 8008a4e:	2978      	cmp	r1, #120	; 0x78
 8008a50:	d1d4      	bne.n	80089fc <_printf_i+0x30>
 8008a52:	2378      	movs	r3, #120	; 0x78
 8008a54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a58:	4864      	ldr	r0, [pc, #400]	; (8008bec <_printf_i+0x220>)
 8008a5a:	e055      	b.n	8008b08 <_printf_i+0x13c>
 8008a5c:	6813      	ldr	r3, [r2, #0]
 8008a5e:	1d19      	adds	r1, r3, #4
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6011      	str	r1, [r2, #0]
 8008a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e08c      	b.n	8008b8a <_printf_i+0x1be>
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6011      	str	r1, [r2, #0]
 8008a74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a78:	bf18      	it	ne
 8008a7a:	b21b      	sxthne	r3, r3
 8008a7c:	e7cf      	b.n	8008a1e <_printf_i+0x52>
 8008a7e:	6813      	ldr	r3, [r2, #0]
 8008a80:	6825      	ldr	r5, [r4, #0]
 8008a82:	1d18      	adds	r0, r3, #4
 8008a84:	6010      	str	r0, [r2, #0]
 8008a86:	0628      	lsls	r0, r5, #24
 8008a88:	d501      	bpl.n	8008a8e <_printf_i+0xc2>
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	e002      	b.n	8008a94 <_printf_i+0xc8>
 8008a8e:	0668      	lsls	r0, r5, #25
 8008a90:	d5fb      	bpl.n	8008a8a <_printf_i+0xbe>
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	4854      	ldr	r0, [pc, #336]	; (8008be8 <_printf_i+0x21c>)
 8008a96:	296f      	cmp	r1, #111	; 0x6f
 8008a98:	bf14      	ite	ne
 8008a9a:	220a      	movne	r2, #10
 8008a9c:	2208      	moveq	r2, #8
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008aa4:	6865      	ldr	r5, [r4, #4]
 8008aa6:	60a5      	str	r5, [r4, #8]
 8008aa8:	2d00      	cmp	r5, #0
 8008aaa:	f2c0 8095 	blt.w	8008bd8 <_printf_i+0x20c>
 8008aae:	6821      	ldr	r1, [r4, #0]
 8008ab0:	f021 0104 	bic.w	r1, r1, #4
 8008ab4:	6021      	str	r1, [r4, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d13d      	bne.n	8008b36 <_printf_i+0x16a>
 8008aba:	2d00      	cmp	r5, #0
 8008abc:	f040 808e 	bne.w	8008bdc <_printf_i+0x210>
 8008ac0:	4665      	mov	r5, ip
 8008ac2:	2a08      	cmp	r2, #8
 8008ac4:	d10b      	bne.n	8008ade <_printf_i+0x112>
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	07db      	lsls	r3, r3, #31
 8008aca:	d508      	bpl.n	8008ade <_printf_i+0x112>
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	6862      	ldr	r2, [r4, #4]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	bfde      	ittt	le
 8008ad4:	2330      	movle	r3, #48	; 0x30
 8008ad6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ada:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ade:	ebac 0305 	sub.w	r3, ip, r5
 8008ae2:	6123      	str	r3, [r4, #16]
 8008ae4:	f8cd 8000 	str.w	r8, [sp]
 8008ae8:	463b      	mov	r3, r7
 8008aea:	aa03      	add	r2, sp, #12
 8008aec:	4621      	mov	r1, r4
 8008aee:	4630      	mov	r0, r6
 8008af0:	f7ff fef6 	bl	80088e0 <_printf_common>
 8008af4:	3001      	adds	r0, #1
 8008af6:	d14d      	bne.n	8008b94 <_printf_i+0x1c8>
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295
 8008afc:	b005      	add	sp, #20
 8008afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b02:	4839      	ldr	r0, [pc, #228]	; (8008be8 <_printf_i+0x21c>)
 8008b04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008b08:	6813      	ldr	r3, [r2, #0]
 8008b0a:	6821      	ldr	r1, [r4, #0]
 8008b0c:	1d1d      	adds	r5, r3, #4
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6015      	str	r5, [r2, #0]
 8008b12:	060a      	lsls	r2, r1, #24
 8008b14:	d50b      	bpl.n	8008b2e <_printf_i+0x162>
 8008b16:	07ca      	lsls	r2, r1, #31
 8008b18:	bf44      	itt	mi
 8008b1a:	f041 0120 	orrmi.w	r1, r1, #32
 8008b1e:	6021      	strmi	r1, [r4, #0]
 8008b20:	b91b      	cbnz	r3, 8008b2a <_printf_i+0x15e>
 8008b22:	6822      	ldr	r2, [r4, #0]
 8008b24:	f022 0220 	bic.w	r2, r2, #32
 8008b28:	6022      	str	r2, [r4, #0]
 8008b2a:	2210      	movs	r2, #16
 8008b2c:	e7b7      	b.n	8008a9e <_printf_i+0xd2>
 8008b2e:	064d      	lsls	r5, r1, #25
 8008b30:	bf48      	it	mi
 8008b32:	b29b      	uxthmi	r3, r3
 8008b34:	e7ef      	b.n	8008b16 <_printf_i+0x14a>
 8008b36:	4665      	mov	r5, ip
 8008b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b3c:	fb02 3311 	mls	r3, r2, r1, r3
 8008b40:	5cc3      	ldrb	r3, [r0, r3]
 8008b42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008b46:	460b      	mov	r3, r1
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	d1f5      	bne.n	8008b38 <_printf_i+0x16c>
 8008b4c:	e7b9      	b.n	8008ac2 <_printf_i+0xf6>
 8008b4e:	6813      	ldr	r3, [r2, #0]
 8008b50:	6825      	ldr	r5, [r4, #0]
 8008b52:	6961      	ldr	r1, [r4, #20]
 8008b54:	1d18      	adds	r0, r3, #4
 8008b56:	6010      	str	r0, [r2, #0]
 8008b58:	0628      	lsls	r0, r5, #24
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	d501      	bpl.n	8008b62 <_printf_i+0x196>
 8008b5e:	6019      	str	r1, [r3, #0]
 8008b60:	e002      	b.n	8008b68 <_printf_i+0x19c>
 8008b62:	066a      	lsls	r2, r5, #25
 8008b64:	d5fb      	bpl.n	8008b5e <_printf_i+0x192>
 8008b66:	8019      	strh	r1, [r3, #0]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	6123      	str	r3, [r4, #16]
 8008b6c:	4665      	mov	r5, ip
 8008b6e:	e7b9      	b.n	8008ae4 <_printf_i+0x118>
 8008b70:	6813      	ldr	r3, [r2, #0]
 8008b72:	1d19      	adds	r1, r3, #4
 8008b74:	6011      	str	r1, [r2, #0]
 8008b76:	681d      	ldr	r5, [r3, #0]
 8008b78:	6862      	ldr	r2, [r4, #4]
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	f7f7 fb2f 	bl	80001e0 <memchr>
 8008b82:	b108      	cbz	r0, 8008b88 <_printf_i+0x1bc>
 8008b84:	1b40      	subs	r0, r0, r5
 8008b86:	6060      	str	r0, [r4, #4]
 8008b88:	6863      	ldr	r3, [r4, #4]
 8008b8a:	6123      	str	r3, [r4, #16]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b92:	e7a7      	b.n	8008ae4 <_printf_i+0x118>
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	462a      	mov	r2, r5
 8008b98:	4639      	mov	r1, r7
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	47c0      	blx	r8
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	d0aa      	beq.n	8008af8 <_printf_i+0x12c>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	079b      	lsls	r3, r3, #30
 8008ba6:	d413      	bmi.n	8008bd0 <_printf_i+0x204>
 8008ba8:	68e0      	ldr	r0, [r4, #12]
 8008baa:	9b03      	ldr	r3, [sp, #12]
 8008bac:	4298      	cmp	r0, r3
 8008bae:	bfb8      	it	lt
 8008bb0:	4618      	movlt	r0, r3
 8008bb2:	e7a3      	b.n	8008afc <_printf_i+0x130>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	464a      	mov	r2, r9
 8008bb8:	4639      	mov	r1, r7
 8008bba:	4630      	mov	r0, r6
 8008bbc:	47c0      	blx	r8
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d09a      	beq.n	8008af8 <_printf_i+0x12c>
 8008bc2:	3501      	adds	r5, #1
 8008bc4:	68e3      	ldr	r3, [r4, #12]
 8008bc6:	9a03      	ldr	r2, [sp, #12]
 8008bc8:	1a9b      	subs	r3, r3, r2
 8008bca:	42ab      	cmp	r3, r5
 8008bcc:	dcf2      	bgt.n	8008bb4 <_printf_i+0x1e8>
 8008bce:	e7eb      	b.n	8008ba8 <_printf_i+0x1dc>
 8008bd0:	2500      	movs	r5, #0
 8008bd2:	f104 0919 	add.w	r9, r4, #25
 8008bd6:	e7f5      	b.n	8008bc4 <_printf_i+0x1f8>
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1ac      	bne.n	8008b36 <_printf_i+0x16a>
 8008bdc:	7803      	ldrb	r3, [r0, #0]
 8008bde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008be2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008be6:	e76c      	b.n	8008ac2 <_printf_i+0xf6>
 8008be8:	080091f9 	.word	0x080091f9
 8008bec:	0800920a 	.word	0x0800920a

08008bf0 <__sread>:
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf8:	f000 fa46 	bl	8009088 <_read_r>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	bfab      	itete	ge
 8008c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c02:	89a3      	ldrhlt	r3, [r4, #12]
 8008c04:	181b      	addge	r3, r3, r0
 8008c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c0a:	bfac      	ite	ge
 8008c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c0e:	81a3      	strhlt	r3, [r4, #12]
 8008c10:	bd10      	pop	{r4, pc}

08008c12 <__swrite>:
 8008c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c16:	461f      	mov	r7, r3
 8008c18:	898b      	ldrh	r3, [r1, #12]
 8008c1a:	05db      	lsls	r3, r3, #23
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	4616      	mov	r6, r2
 8008c22:	d505      	bpl.n	8008c30 <__swrite+0x1e>
 8008c24:	2302      	movs	r3, #2
 8008c26:	2200      	movs	r2, #0
 8008c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c2c:	f000 f9b6 	bl	8008f9c <_lseek_r>
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c3a:	81a3      	strh	r3, [r4, #12]
 8008c3c:	4632      	mov	r2, r6
 8008c3e:	463b      	mov	r3, r7
 8008c40:	4628      	mov	r0, r5
 8008c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c46:	f000 b869 	b.w	8008d1c <_write_r>

08008c4a <__sseek>:
 8008c4a:	b510      	push	{r4, lr}
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c52:	f000 f9a3 	bl	8008f9c <_lseek_r>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	bf15      	itete	ne
 8008c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c66:	81a3      	strheq	r3, [r4, #12]
 8008c68:	bf18      	it	ne
 8008c6a:	81a3      	strhne	r3, [r4, #12]
 8008c6c:	bd10      	pop	{r4, pc}

08008c6e <__sclose>:
 8008c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c72:	f000 b8d3 	b.w	8008e1c <_close_r>
	...

08008c78 <__swbuf_r>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	460e      	mov	r6, r1
 8008c7c:	4614      	mov	r4, r2
 8008c7e:	4605      	mov	r5, r0
 8008c80:	b118      	cbz	r0, 8008c8a <__swbuf_r+0x12>
 8008c82:	6983      	ldr	r3, [r0, #24]
 8008c84:	b90b      	cbnz	r3, 8008c8a <__swbuf_r+0x12>
 8008c86:	f7ff fc5f 	bl	8008548 <__sinit>
 8008c8a:	4b21      	ldr	r3, [pc, #132]	; (8008d10 <__swbuf_r+0x98>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	d12a      	bne.n	8008ce6 <__swbuf_r+0x6e>
 8008c90:	686c      	ldr	r4, [r5, #4]
 8008c92:	69a3      	ldr	r3, [r4, #24]
 8008c94:	60a3      	str	r3, [r4, #8]
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	071a      	lsls	r2, r3, #28
 8008c9a:	d52e      	bpl.n	8008cfa <__swbuf_r+0x82>
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	b363      	cbz	r3, 8008cfa <__swbuf_r+0x82>
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	6820      	ldr	r0, [r4, #0]
 8008ca4:	1ac0      	subs	r0, r0, r3
 8008ca6:	6963      	ldr	r3, [r4, #20]
 8008ca8:	b2f6      	uxtb	r6, r6
 8008caa:	4283      	cmp	r3, r0
 8008cac:	4637      	mov	r7, r6
 8008cae:	dc04      	bgt.n	8008cba <__swbuf_r+0x42>
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 f948 	bl	8008f48 <_fflush_r>
 8008cb8:	bb28      	cbnz	r0, 8008d06 <__swbuf_r+0x8e>
 8008cba:	68a3      	ldr	r3, [r4, #8]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	60a3      	str	r3, [r4, #8]
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	6022      	str	r2, [r4, #0]
 8008cc6:	701e      	strb	r6, [r3, #0]
 8008cc8:	6963      	ldr	r3, [r4, #20]
 8008cca:	3001      	adds	r0, #1
 8008ccc:	4283      	cmp	r3, r0
 8008cce:	d004      	beq.n	8008cda <__swbuf_r+0x62>
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	07db      	lsls	r3, r3, #31
 8008cd4:	d519      	bpl.n	8008d0a <__swbuf_r+0x92>
 8008cd6:	2e0a      	cmp	r6, #10
 8008cd8:	d117      	bne.n	8008d0a <__swbuf_r+0x92>
 8008cda:	4621      	mov	r1, r4
 8008cdc:	4628      	mov	r0, r5
 8008cde:	f000 f933 	bl	8008f48 <_fflush_r>
 8008ce2:	b190      	cbz	r0, 8008d0a <__swbuf_r+0x92>
 8008ce4:	e00f      	b.n	8008d06 <__swbuf_r+0x8e>
 8008ce6:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <__swbuf_r+0x9c>)
 8008ce8:	429c      	cmp	r4, r3
 8008cea:	d101      	bne.n	8008cf0 <__swbuf_r+0x78>
 8008cec:	68ac      	ldr	r4, [r5, #8]
 8008cee:	e7d0      	b.n	8008c92 <__swbuf_r+0x1a>
 8008cf0:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <__swbuf_r+0xa0>)
 8008cf2:	429c      	cmp	r4, r3
 8008cf4:	bf08      	it	eq
 8008cf6:	68ec      	ldreq	r4, [r5, #12]
 8008cf8:	e7cb      	b.n	8008c92 <__swbuf_r+0x1a>
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f000 f81f 	bl	8008d40 <__swsetup_r>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d0cc      	beq.n	8008ca0 <__swbuf_r+0x28>
 8008d06:	f04f 37ff 	mov.w	r7, #4294967295
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	080091a8 	.word	0x080091a8
 8008d14:	080091c8 	.word	0x080091c8
 8008d18:	08009188 	.word	0x08009188

08008d1c <_write_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4c07      	ldr	r4, [pc, #28]	; (8008d3c <_write_r+0x20>)
 8008d20:	4605      	mov	r5, r0
 8008d22:	4608      	mov	r0, r1
 8008d24:	4611      	mov	r1, r2
 8008d26:	2200      	movs	r2, #0
 8008d28:	6022      	str	r2, [r4, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f7f7 fdd8 	bl	80008e0 <_write>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_write_r+0x1e>
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_write_r+0x1e>
 8008d38:	602b      	str	r3, [r5, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	200013d0 	.word	0x200013d0

08008d40 <__swsetup_r>:
 8008d40:	4b32      	ldr	r3, [pc, #200]	; (8008e0c <__swsetup_r+0xcc>)
 8008d42:	b570      	push	{r4, r5, r6, lr}
 8008d44:	681d      	ldr	r5, [r3, #0]
 8008d46:	4606      	mov	r6, r0
 8008d48:	460c      	mov	r4, r1
 8008d4a:	b125      	cbz	r5, 8008d56 <__swsetup_r+0x16>
 8008d4c:	69ab      	ldr	r3, [r5, #24]
 8008d4e:	b913      	cbnz	r3, 8008d56 <__swsetup_r+0x16>
 8008d50:	4628      	mov	r0, r5
 8008d52:	f7ff fbf9 	bl	8008548 <__sinit>
 8008d56:	4b2e      	ldr	r3, [pc, #184]	; (8008e10 <__swsetup_r+0xd0>)
 8008d58:	429c      	cmp	r4, r3
 8008d5a:	d10f      	bne.n	8008d7c <__swsetup_r+0x3c>
 8008d5c:	686c      	ldr	r4, [r5, #4]
 8008d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	0715      	lsls	r5, r2, #28
 8008d66:	d42c      	bmi.n	8008dc2 <__swsetup_r+0x82>
 8008d68:	06d0      	lsls	r0, r2, #27
 8008d6a:	d411      	bmi.n	8008d90 <__swsetup_r+0x50>
 8008d6c:	2209      	movs	r2, #9
 8008d6e:	6032      	str	r2, [r6, #0]
 8008d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d74:	81a3      	strh	r3, [r4, #12]
 8008d76:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7a:	e03e      	b.n	8008dfa <__swsetup_r+0xba>
 8008d7c:	4b25      	ldr	r3, [pc, #148]	; (8008e14 <__swsetup_r+0xd4>)
 8008d7e:	429c      	cmp	r4, r3
 8008d80:	d101      	bne.n	8008d86 <__swsetup_r+0x46>
 8008d82:	68ac      	ldr	r4, [r5, #8]
 8008d84:	e7eb      	b.n	8008d5e <__swsetup_r+0x1e>
 8008d86:	4b24      	ldr	r3, [pc, #144]	; (8008e18 <__swsetup_r+0xd8>)
 8008d88:	429c      	cmp	r4, r3
 8008d8a:	bf08      	it	eq
 8008d8c:	68ec      	ldreq	r4, [r5, #12]
 8008d8e:	e7e6      	b.n	8008d5e <__swsetup_r+0x1e>
 8008d90:	0751      	lsls	r1, r2, #29
 8008d92:	d512      	bpl.n	8008dba <__swsetup_r+0x7a>
 8008d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d96:	b141      	cbz	r1, 8008daa <__swsetup_r+0x6a>
 8008d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d9c:	4299      	cmp	r1, r3
 8008d9e:	d002      	beq.n	8008da6 <__swsetup_r+0x66>
 8008da0:	4630      	mov	r0, r6
 8008da2:	f7ff fac1 	bl	8008328 <_free_r>
 8008da6:	2300      	movs	r3, #0
 8008da8:	6363      	str	r3, [r4, #52]	; 0x34
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008db0:	81a3      	strh	r3, [r4, #12]
 8008db2:	2300      	movs	r3, #0
 8008db4:	6063      	str	r3, [r4, #4]
 8008db6:	6923      	ldr	r3, [r4, #16]
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	f043 0308 	orr.w	r3, r3, #8
 8008dc0:	81a3      	strh	r3, [r4, #12]
 8008dc2:	6923      	ldr	r3, [r4, #16]
 8008dc4:	b94b      	cbnz	r3, 8008dda <__swsetup_r+0x9a>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dd0:	d003      	beq.n	8008dda <__swsetup_r+0x9a>
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 f917 	bl	8009008 <__smakebuf_r>
 8008dda:	89a2      	ldrh	r2, [r4, #12]
 8008ddc:	f012 0301 	ands.w	r3, r2, #1
 8008de0:	d00c      	beq.n	8008dfc <__swsetup_r+0xbc>
 8008de2:	2300      	movs	r3, #0
 8008de4:	60a3      	str	r3, [r4, #8]
 8008de6:	6963      	ldr	r3, [r4, #20]
 8008de8:	425b      	negs	r3, r3
 8008dea:	61a3      	str	r3, [r4, #24]
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	b953      	cbnz	r3, 8008e06 <__swsetup_r+0xc6>
 8008df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008df8:	d1ba      	bne.n	8008d70 <__swsetup_r+0x30>
 8008dfa:	bd70      	pop	{r4, r5, r6, pc}
 8008dfc:	0792      	lsls	r2, r2, #30
 8008dfe:	bf58      	it	pl
 8008e00:	6963      	ldrpl	r3, [r4, #20]
 8008e02:	60a3      	str	r3, [r4, #8]
 8008e04:	e7f2      	b.n	8008dec <__swsetup_r+0xac>
 8008e06:	2000      	movs	r0, #0
 8008e08:	e7f7      	b.n	8008dfa <__swsetup_r+0xba>
 8008e0a:	bf00      	nop
 8008e0c:	20000180 	.word	0x20000180
 8008e10:	080091a8 	.word	0x080091a8
 8008e14:	080091c8 	.word	0x080091c8
 8008e18:	08009188 	.word	0x08009188

08008e1c <_close_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4c06      	ldr	r4, [pc, #24]	; (8008e38 <_close_r+0x1c>)
 8008e20:	2300      	movs	r3, #0
 8008e22:	4605      	mov	r5, r0
 8008e24:	4608      	mov	r0, r1
 8008e26:	6023      	str	r3, [r4, #0]
 8008e28:	f7f7 fec9 	bl	8000bbe <_close>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_close_r+0x1a>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_close_r+0x1a>
 8008e34:	602b      	str	r3, [r5, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	200013d0 	.word	0x200013d0

08008e3c <__sflush_r>:
 8008e3c:	898a      	ldrh	r2, [r1, #12]
 8008e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e42:	4605      	mov	r5, r0
 8008e44:	0710      	lsls	r0, r2, #28
 8008e46:	460c      	mov	r4, r1
 8008e48:	d458      	bmi.n	8008efc <__sflush_r+0xc0>
 8008e4a:	684b      	ldr	r3, [r1, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dc05      	bgt.n	8008e5c <__sflush_r+0x20>
 8008e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dc02      	bgt.n	8008e5c <__sflush_r+0x20>
 8008e56:	2000      	movs	r0, #0
 8008e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e5e:	2e00      	cmp	r6, #0
 8008e60:	d0f9      	beq.n	8008e56 <__sflush_r+0x1a>
 8008e62:	2300      	movs	r3, #0
 8008e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e68:	682f      	ldr	r7, [r5, #0]
 8008e6a:	6a21      	ldr	r1, [r4, #32]
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	d032      	beq.n	8008ed6 <__sflush_r+0x9a>
 8008e70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	075a      	lsls	r2, r3, #29
 8008e76:	d505      	bpl.n	8008e84 <__sflush_r+0x48>
 8008e78:	6863      	ldr	r3, [r4, #4]
 8008e7a:	1ac0      	subs	r0, r0, r3
 8008e7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e7e:	b10b      	cbz	r3, 8008e84 <__sflush_r+0x48>
 8008e80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e82:	1ac0      	subs	r0, r0, r3
 8008e84:	2300      	movs	r3, #0
 8008e86:	4602      	mov	r2, r0
 8008e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e8a:	6a21      	ldr	r1, [r4, #32]
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b0      	blx	r6
 8008e90:	1c43      	adds	r3, r0, #1
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	d106      	bne.n	8008ea4 <__sflush_r+0x68>
 8008e96:	6829      	ldr	r1, [r5, #0]
 8008e98:	291d      	cmp	r1, #29
 8008e9a:	d848      	bhi.n	8008f2e <__sflush_r+0xf2>
 8008e9c:	4a29      	ldr	r2, [pc, #164]	; (8008f44 <__sflush_r+0x108>)
 8008e9e:	40ca      	lsrs	r2, r1
 8008ea0:	07d6      	lsls	r6, r2, #31
 8008ea2:	d544      	bpl.n	8008f2e <__sflush_r+0xf2>
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	6062      	str	r2, [r4, #4]
 8008ea8:	04d9      	lsls	r1, r3, #19
 8008eaa:	6922      	ldr	r2, [r4, #16]
 8008eac:	6022      	str	r2, [r4, #0]
 8008eae:	d504      	bpl.n	8008eba <__sflush_r+0x7e>
 8008eb0:	1c42      	adds	r2, r0, #1
 8008eb2:	d101      	bne.n	8008eb8 <__sflush_r+0x7c>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	b903      	cbnz	r3, 8008eba <__sflush_r+0x7e>
 8008eb8:	6560      	str	r0, [r4, #84]	; 0x54
 8008eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ebc:	602f      	str	r7, [r5, #0]
 8008ebe:	2900      	cmp	r1, #0
 8008ec0:	d0c9      	beq.n	8008e56 <__sflush_r+0x1a>
 8008ec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ec6:	4299      	cmp	r1, r3
 8008ec8:	d002      	beq.n	8008ed0 <__sflush_r+0x94>
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f7ff fa2c 	bl	8008328 <_free_r>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	6360      	str	r0, [r4, #52]	; 0x34
 8008ed4:	e7c0      	b.n	8008e58 <__sflush_r+0x1c>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b0      	blx	r6
 8008edc:	1c41      	adds	r1, r0, #1
 8008ede:	d1c8      	bne.n	8008e72 <__sflush_r+0x36>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0c5      	beq.n	8008e72 <__sflush_r+0x36>
 8008ee6:	2b1d      	cmp	r3, #29
 8008ee8:	d001      	beq.n	8008eee <__sflush_r+0xb2>
 8008eea:	2b16      	cmp	r3, #22
 8008eec:	d101      	bne.n	8008ef2 <__sflush_r+0xb6>
 8008eee:	602f      	str	r7, [r5, #0]
 8008ef0:	e7b1      	b.n	8008e56 <__sflush_r+0x1a>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef8:	81a3      	strh	r3, [r4, #12]
 8008efa:	e7ad      	b.n	8008e58 <__sflush_r+0x1c>
 8008efc:	690f      	ldr	r7, [r1, #16]
 8008efe:	2f00      	cmp	r7, #0
 8008f00:	d0a9      	beq.n	8008e56 <__sflush_r+0x1a>
 8008f02:	0793      	lsls	r3, r2, #30
 8008f04:	680e      	ldr	r6, [r1, #0]
 8008f06:	bf08      	it	eq
 8008f08:	694b      	ldreq	r3, [r1, #20]
 8008f0a:	600f      	str	r7, [r1, #0]
 8008f0c:	bf18      	it	ne
 8008f0e:	2300      	movne	r3, #0
 8008f10:	eba6 0807 	sub.w	r8, r6, r7
 8008f14:	608b      	str	r3, [r1, #8]
 8008f16:	f1b8 0f00 	cmp.w	r8, #0
 8008f1a:	dd9c      	ble.n	8008e56 <__sflush_r+0x1a>
 8008f1c:	4643      	mov	r3, r8
 8008f1e:	463a      	mov	r2, r7
 8008f20:	6a21      	ldr	r1, [r4, #32]
 8008f22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b0      	blx	r6
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	dc06      	bgt.n	8008f3a <__sflush_r+0xfe>
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f32:	81a3      	strh	r3, [r4, #12]
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	e78e      	b.n	8008e58 <__sflush_r+0x1c>
 8008f3a:	4407      	add	r7, r0
 8008f3c:	eba8 0800 	sub.w	r8, r8, r0
 8008f40:	e7e9      	b.n	8008f16 <__sflush_r+0xda>
 8008f42:	bf00      	nop
 8008f44:	20400001 	.word	0x20400001

08008f48 <_fflush_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	690b      	ldr	r3, [r1, #16]
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	b1db      	cbz	r3, 8008f8a <_fflush_r+0x42>
 8008f52:	b118      	cbz	r0, 8008f5c <_fflush_r+0x14>
 8008f54:	6983      	ldr	r3, [r0, #24]
 8008f56:	b90b      	cbnz	r3, 8008f5c <_fflush_r+0x14>
 8008f58:	f7ff faf6 	bl	8008548 <__sinit>
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	; (8008f90 <_fflush_r+0x48>)
 8008f5e:	429c      	cmp	r4, r3
 8008f60:	d109      	bne.n	8008f76 <_fflush_r+0x2e>
 8008f62:	686c      	ldr	r4, [r5, #4]
 8008f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f68:	b17b      	cbz	r3, 8008f8a <_fflush_r+0x42>
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f72:	f7ff bf63 	b.w	8008e3c <__sflush_r>
 8008f76:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <_fflush_r+0x4c>)
 8008f78:	429c      	cmp	r4, r3
 8008f7a:	d101      	bne.n	8008f80 <_fflush_r+0x38>
 8008f7c:	68ac      	ldr	r4, [r5, #8]
 8008f7e:	e7f1      	b.n	8008f64 <_fflush_r+0x1c>
 8008f80:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <_fflush_r+0x50>)
 8008f82:	429c      	cmp	r4, r3
 8008f84:	bf08      	it	eq
 8008f86:	68ec      	ldreq	r4, [r5, #12]
 8008f88:	e7ec      	b.n	8008f64 <_fflush_r+0x1c>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	bd38      	pop	{r3, r4, r5, pc}
 8008f8e:	bf00      	nop
 8008f90:	080091a8 	.word	0x080091a8
 8008f94:	080091c8 	.word	0x080091c8
 8008f98:	08009188 	.word	0x08009188

08008f9c <_lseek_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	4c07      	ldr	r4, [pc, #28]	; (8008fbc <_lseek_r+0x20>)
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	4608      	mov	r0, r1
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6022      	str	r2, [r4, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	f7f7 fe2e 	bl	8000c0c <_lseek>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d102      	bne.n	8008fba <_lseek_r+0x1e>
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	b103      	cbz	r3, 8008fba <_lseek_r+0x1e>
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	200013d0 	.word	0x200013d0

08008fc0 <__swhatbuf_r>:
 8008fc0:	b570      	push	{r4, r5, r6, lr}
 8008fc2:	460e      	mov	r6, r1
 8008fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	b096      	sub	sp, #88	; 0x58
 8008fcc:	4614      	mov	r4, r2
 8008fce:	461d      	mov	r5, r3
 8008fd0:	da07      	bge.n	8008fe2 <__swhatbuf_r+0x22>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	602b      	str	r3, [r5, #0]
 8008fd6:	89b3      	ldrh	r3, [r6, #12]
 8008fd8:	061a      	lsls	r2, r3, #24
 8008fda:	d410      	bmi.n	8008ffe <__swhatbuf_r+0x3e>
 8008fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe0:	e00e      	b.n	8009000 <__swhatbuf_r+0x40>
 8008fe2:	466a      	mov	r2, sp
 8008fe4:	f000 f862 	bl	80090ac <_fstat_r>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	dbf2      	blt.n	8008fd2 <__swhatbuf_r+0x12>
 8008fec:	9a01      	ldr	r2, [sp, #4]
 8008fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ff6:	425a      	negs	r2, r3
 8008ff8:	415a      	adcs	r2, r3
 8008ffa:	602a      	str	r2, [r5, #0]
 8008ffc:	e7ee      	b.n	8008fdc <__swhatbuf_r+0x1c>
 8008ffe:	2340      	movs	r3, #64	; 0x40
 8009000:	2000      	movs	r0, #0
 8009002:	6023      	str	r3, [r4, #0]
 8009004:	b016      	add	sp, #88	; 0x58
 8009006:	bd70      	pop	{r4, r5, r6, pc}

08009008 <__smakebuf_r>:
 8009008:	898b      	ldrh	r3, [r1, #12]
 800900a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800900c:	079d      	lsls	r5, r3, #30
 800900e:	4606      	mov	r6, r0
 8009010:	460c      	mov	r4, r1
 8009012:	d507      	bpl.n	8009024 <__smakebuf_r+0x1c>
 8009014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	6123      	str	r3, [r4, #16]
 800901c:	2301      	movs	r3, #1
 800901e:	6163      	str	r3, [r4, #20]
 8009020:	b002      	add	sp, #8
 8009022:	bd70      	pop	{r4, r5, r6, pc}
 8009024:	ab01      	add	r3, sp, #4
 8009026:	466a      	mov	r2, sp
 8009028:	f7ff ffca 	bl	8008fc0 <__swhatbuf_r>
 800902c:	9900      	ldr	r1, [sp, #0]
 800902e:	4605      	mov	r5, r0
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff f9c7 	bl	80083c4 <_malloc_r>
 8009036:	b948      	cbnz	r0, 800904c <__smakebuf_r+0x44>
 8009038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903c:	059a      	lsls	r2, r3, #22
 800903e:	d4ef      	bmi.n	8009020 <__smakebuf_r+0x18>
 8009040:	f023 0303 	bic.w	r3, r3, #3
 8009044:	f043 0302 	orr.w	r3, r3, #2
 8009048:	81a3      	strh	r3, [r4, #12]
 800904a:	e7e3      	b.n	8009014 <__smakebuf_r+0xc>
 800904c:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <__smakebuf_r+0x7c>)
 800904e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	6020      	str	r0, [r4, #0]
 8009054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009058:	81a3      	strh	r3, [r4, #12]
 800905a:	9b00      	ldr	r3, [sp, #0]
 800905c:	6163      	str	r3, [r4, #20]
 800905e:	9b01      	ldr	r3, [sp, #4]
 8009060:	6120      	str	r0, [r4, #16]
 8009062:	b15b      	cbz	r3, 800907c <__smakebuf_r+0x74>
 8009064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009068:	4630      	mov	r0, r6
 800906a:	f000 f831 	bl	80090d0 <_isatty_r>
 800906e:	b128      	cbz	r0, 800907c <__smakebuf_r+0x74>
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	f023 0303 	bic.w	r3, r3, #3
 8009076:	f043 0301 	orr.w	r3, r3, #1
 800907a:	81a3      	strh	r3, [r4, #12]
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	431d      	orrs	r5, r3
 8009080:	81a5      	strh	r5, [r4, #12]
 8009082:	e7cd      	b.n	8009020 <__smakebuf_r+0x18>
 8009084:	08008511 	.word	0x08008511

08009088 <_read_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4c07      	ldr	r4, [pc, #28]	; (80090a8 <_read_r+0x20>)
 800908c:	4605      	mov	r5, r0
 800908e:	4608      	mov	r0, r1
 8009090:	4611      	mov	r1, r2
 8009092:	2200      	movs	r2, #0
 8009094:	6022      	str	r2, [r4, #0]
 8009096:	461a      	mov	r2, r3
 8009098:	f7f7 fd74 	bl	8000b84 <_read>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d102      	bne.n	80090a6 <_read_r+0x1e>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	b103      	cbz	r3, 80090a6 <_read_r+0x1e>
 80090a4:	602b      	str	r3, [r5, #0]
 80090a6:	bd38      	pop	{r3, r4, r5, pc}
 80090a8:	200013d0 	.word	0x200013d0

080090ac <_fstat_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4c07      	ldr	r4, [pc, #28]	; (80090cc <_fstat_r+0x20>)
 80090b0:	2300      	movs	r3, #0
 80090b2:	4605      	mov	r5, r0
 80090b4:	4608      	mov	r0, r1
 80090b6:	4611      	mov	r1, r2
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	f7f7 fd8c 	bl	8000bd6 <_fstat>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	d102      	bne.n	80090c8 <_fstat_r+0x1c>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	b103      	cbz	r3, 80090c8 <_fstat_r+0x1c>
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	bd38      	pop	{r3, r4, r5, pc}
 80090ca:	bf00      	nop
 80090cc:	200013d0 	.word	0x200013d0

080090d0 <_isatty_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4c06      	ldr	r4, [pc, #24]	; (80090ec <_isatty_r+0x1c>)
 80090d4:	2300      	movs	r3, #0
 80090d6:	4605      	mov	r5, r0
 80090d8:	4608      	mov	r0, r1
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	f7f7 fd8b 	bl	8000bf6 <_isatty>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d102      	bne.n	80090ea <_isatty_r+0x1a>
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	b103      	cbz	r3, 80090ea <_isatty_r+0x1a>
 80090e8:	602b      	str	r3, [r5, #0]
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	200013d0 	.word	0x200013d0

080090f0 <_init>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	bf00      	nop
 80090f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f6:	bc08      	pop	{r3}
 80090f8:	469e      	mov	lr, r3
 80090fa:	4770      	bx	lr

080090fc <_fini>:
 80090fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fe:	bf00      	nop
 8009100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009102:	bc08      	pop	{r3}
 8009104:	469e      	mov	lr, r3
 8009106:	4770      	bx	lr
